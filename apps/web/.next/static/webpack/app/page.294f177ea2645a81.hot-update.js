"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-client)/../../generated/graphql.ts":
/*!**********************************!*\
  !*** ../../generated/graphql.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AvatarRatingEnum\": function() { return /* binding */ AvatarRatingEnum; },\n/* harmony export */   \"CategoryIdType\": function() { return /* binding */ CategoryIdType; },\n/* harmony export */   \"CommentNodeIdTypeEnum\": function() { return /* binding */ CommentNodeIdTypeEnum; },\n/* harmony export */   \"CommentStatusEnum\": function() { return /* binding */ CommentStatusEnum; },\n/* harmony export */   \"CommentsConnectionOrderbyEnum\": function() { return /* binding */ CommentsConnectionOrderbyEnum; },\n/* harmony export */   \"ContentNodeIdTypeEnum\": function() { return /* binding */ ContentNodeIdTypeEnum; },\n/* harmony export */   \"ContentTypeEnum\": function() { return /* binding */ ContentTypeEnum; },\n/* harmony export */   \"ContentTypeIdTypeEnum\": function() { return /* binding */ ContentTypeIdTypeEnum; },\n/* harmony export */   \"ContentTypesOfCategoryEnum\": function() { return /* binding */ ContentTypesOfCategoryEnum; },\n/* harmony export */   \"ContentTypesOfPostFormatEnum\": function() { return /* binding */ ContentTypesOfPostFormatEnum; },\n/* harmony export */   \"ContentTypesOfTagEnum\": function() { return /* binding */ ContentTypesOfTagEnum; },\n/* harmony export */   \"GetPostDocument\": function() { return /* binding */ GetPostDocument; },\n/* harmony export */   \"GetPostIDsDocument\": function() { return /* binding */ GetPostIDsDocument; },\n/* harmony export */   \"GetPostsDocument\": function() { return /* binding */ GetPostsDocument; },\n/* harmony export */   \"MediaItemIdType\": function() { return /* binding */ MediaItemIdType; },\n/* harmony export */   \"MediaItemSizeEnum\": function() { return /* binding */ MediaItemSizeEnum; },\n/* harmony export */   \"MediaItemStatusEnum\": function() { return /* binding */ MediaItemStatusEnum; },\n/* harmony export */   \"MenuItemNodeIdTypeEnum\": function() { return /* binding */ MenuItemNodeIdTypeEnum; },\n/* harmony export */   \"MenuLocationEnum\": function() { return /* binding */ MenuLocationEnum; },\n/* harmony export */   \"MenuNodeIdTypeEnum\": function() { return /* binding */ MenuNodeIdTypeEnum; },\n/* harmony export */   \"MimeTypeEnum\": function() { return /* binding */ MimeTypeEnum; },\n/* harmony export */   \"OrderEnum\": function() { return /* binding */ OrderEnum; },\n/* harmony export */   \"PageIdType\": function() { return /* binding */ PageIdType; },\n/* harmony export */   \"PluginStatusEnum\": function() { return /* binding */ PluginStatusEnum; },\n/* harmony export */   \"PostFormatIdType\": function() { return /* binding */ PostFormatIdType; },\n/* harmony export */   \"PostFragementFragmentDoc\": function() { return /* binding */ PostFragementFragmentDoc; },\n/* harmony export */   \"PostIdType\": function() { return /* binding */ PostIdType; },\n/* harmony export */   \"PostObjectFieldFormatEnum\": function() { return /* binding */ PostObjectFieldFormatEnum; },\n/* harmony export */   \"PostObjectsConnectionDateColumnEnum\": function() { return /* binding */ PostObjectsConnectionDateColumnEnum; },\n/* harmony export */   \"PostObjectsConnectionOrderbyEnum\": function() { return /* binding */ PostObjectsConnectionOrderbyEnum; },\n/* harmony export */   \"PostStatusEnum\": function() { return /* binding */ PostStatusEnum; },\n/* harmony export */   \"RelationEnum\": function() { return /* binding */ RelationEnum; },\n/* harmony export */   \"ScriptLoadingStrategyEnum\": function() { return /* binding */ ScriptLoadingStrategyEnum; },\n/* harmony export */   \"TagIdType\": function() { return /* binding */ TagIdType; },\n/* harmony export */   \"TaxonomyEnum\": function() { return /* binding */ TaxonomyEnum; },\n/* harmony export */   \"TaxonomyIdTypeEnum\": function() { return /* binding */ TaxonomyIdTypeEnum; },\n/* harmony export */   \"TermNodeIdTypeEnum\": function() { return /* binding */ TermNodeIdTypeEnum; },\n/* harmony export */   \"TermObjectsConnectionOrderbyEnum\": function() { return /* binding */ TermObjectsConnectionOrderbyEnum; },\n/* harmony export */   \"UserNodeIdTypeEnum\": function() { return /* binding */ UserNodeIdTypeEnum; },\n/* harmony export */   \"UserRoleEnum\": function() { return /* binding */ UserRoleEnum; },\n/* harmony export */   \"UsersConnectionOrderbyEnum\": function() { return /* binding */ UsersConnectionOrderbyEnum; },\n/* harmony export */   \"UsersConnectionSearchColumnEnum\": function() { return /* binding */ UsersConnectionSearchColumnEnum; },\n/* harmony export */   \"useGetPostIDsLazyQuery\": function() { return /* binding */ useGetPostIDsLazyQuery; },\n/* harmony export */   \"useGetPostIDsQuery\": function() { return /* binding */ useGetPostIDsQuery; },\n/* harmony export */   \"useGetPostIDsSuspenseQuery\": function() { return /* binding */ useGetPostIDsSuspenseQuery; },\n/* harmony export */   \"useGetPostLazyQuery\": function() { return /* binding */ useGetPostLazyQuery; },\n/* harmony export */   \"useGetPostQuery\": function() { return /* binding */ useGetPostQuery; },\n/* harmony export */   \"useGetPostSuspenseQuery\": function() { return /* binding */ useGetPostSuspenseQuery; },\n/* harmony export */   \"useGetPostsLazyQuery\": function() { return /* binding */ useGetPostsLazyQuery; },\n/* harmony export */   \"useGetPostsQuery\": function() { return /* binding */ useGetPostsQuery; },\n/* harmony export */   \"useGetPostsSuspenseQuery\": function() { return /* binding */ useGetPostsSuspenseQuery; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_tagged_template_literal */ \"(app-client)/../../node_modules/next/node_modules/@swc/helpers/esm/_tagged_template_literal.js\");\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client */ \"(app-client)/../../node_modules/graphql-tag/lib/index.js\");\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client */ \"(app-client)/../../node_modules/@apollo/client/react/hooks/useQuery.js\");\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client */ \"(app-client)/../../node_modules/@apollo/client/react/hooks/useLazyQuery.js\");\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client */ \"(app-client)/../../node_modules/@apollo/client/react/hooks/useSuspenseQuery.js\");\n\nfunction _templateObject() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n    fragment PostFragement on Post {\\n  title\\n  author {\\n    node {\\n      name\\n    }\\n  }\\n  id\\n  date\\n  excerpt\\n  featuredImage {\\n    node {\\n      sourceUrl(size: LARGE)\\n      caption\\n    }\\n  }\\n  slug\\n}\\n    \"\n    ]);\n    _templateObject = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject1() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n    query getPosts($first: Int!) {\\n  posts(first: $first) {\\n    nodes {\\n      ...PostFragement\\n    }\\n  }\\n}\\n    \",\n        \"\"\n    ]);\n    _templateObject1 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject2() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n    query getPostIDs($first: Int!) {\\n  posts(first: $first) {\\n    nodes {\\n      id\\n    }\\n  }\\n}\\n    \"\n    ]);\n    _templateObject2 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject3() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n    query getPost($id: ID!) {\\n  post(id: $id) {\\n    ...PostFragement\\n  }\\n}\\n    \",\n        \"\"\n    ]);\n    _templateObject3 = function() {\n        return data;\n    };\n    return data;\n}\n\n\nconst defaultOptions = {};\nvar AvatarRatingEnum;\n(function(AvatarRatingEnum) {\n    AvatarRatingEnum[/** Indicates a G level avatar rating level. */ \"G\"] = \"G\";\n    AvatarRatingEnum[/** Indicates a PG level avatar rating level. */ \"Pg\"] = \"PG\";\n    AvatarRatingEnum[/** Indicates an R level avatar rating level. */ \"R\"] = \"R\";\n    AvatarRatingEnum[/** Indicates an X level avatar rating level. */ \"X\"] = \"X\";\n})(AvatarRatingEnum || (AvatarRatingEnum = {}));\nvar CategoryIdType;\n(function(CategoryIdType) {\n    CategoryIdType[/** The Database ID for the node */ \"DatabaseId\"] = \"DATABASE_ID\";\n    CategoryIdType[/** The hashed Global ID */ \"Id\"] = \"ID\";\n    CategoryIdType[/** The name of the node */ \"Name\"] = \"NAME\";\n    CategoryIdType[/** Url friendly name of the node */ \"Slug\"] = \"SLUG\";\n    CategoryIdType[/** The URI for the node */ \"Uri\"] = \"URI\";\n})(CategoryIdType || (CategoryIdType = {}));\nvar CommentNodeIdTypeEnum;\n(function(CommentNodeIdTypeEnum) {\n    CommentNodeIdTypeEnum[/** Identify a resource by the Database ID. */ \"DatabaseId\"] = \"DATABASE_ID\";\n    CommentNodeIdTypeEnum[/** Identify a resource by the (hashed) Global ID. */ \"Id\"] = \"ID\";\n})(CommentNodeIdTypeEnum || (CommentNodeIdTypeEnum = {}));\nvar CommentStatusEnum;\n(function(CommentStatusEnum) {\n    CommentStatusEnum[/** Comments with the Approved status */ \"Approve\"] = \"APPROVE\";\n    CommentStatusEnum[/** Comments with the Unapproved status */ \"Hold\"] = \"HOLD\";\n    CommentStatusEnum[/** Comments with the Spam status */ \"Spam\"] = \"SPAM\";\n    CommentStatusEnum[/** Comments with the Trash status */ \"Trash\"] = \"TRASH\";\n})(CommentStatusEnum || (CommentStatusEnum = {}));\nvar CommentsConnectionOrderbyEnum;\n(function(CommentsConnectionOrderbyEnum) {\n    CommentsConnectionOrderbyEnum[/** Order by browser user agent of the commenter. */ \"CommentAgent\"] = \"COMMENT_AGENT\";\n    CommentsConnectionOrderbyEnum[/** Order by approval status of the comment. */ \"CommentApproved\"] = \"COMMENT_APPROVED\";\n    CommentsConnectionOrderbyEnum[/** Order by name of the comment author. */ \"CommentAuthor\"] = \"COMMENT_AUTHOR\";\n    CommentsConnectionOrderbyEnum[/** Order by e-mail of the comment author. */ \"CommentAuthorEmail\"] = \"COMMENT_AUTHOR_EMAIL\";\n    CommentsConnectionOrderbyEnum[/** Order by IP address of the comment author. */ \"CommentAuthorIp\"] = \"COMMENT_AUTHOR_IP\";\n    CommentsConnectionOrderbyEnum[/** Order by URL address of the comment author. */ \"CommentAuthorUrl\"] = \"COMMENT_AUTHOR_URL\";\n    CommentsConnectionOrderbyEnum[/** Order by the comment contents. */ \"CommentContent\"] = \"COMMENT_CONTENT\";\n    CommentsConnectionOrderbyEnum[/** Order by date/time timestamp of the comment. */ \"CommentDate\"] = \"COMMENT_DATE\";\n    CommentsConnectionOrderbyEnum[/** Order by GMT timezone date/time timestamp of the comment. */ \"CommentDateGmt\"] = \"COMMENT_DATE_GMT\";\n    CommentsConnectionOrderbyEnum[/** Order by the globally unique identifier for the comment object */ \"CommentId\"] = \"COMMENT_ID\";\n    CommentsConnectionOrderbyEnum[/** Order by the array list of comment IDs listed in the where clause. */ \"CommentIn\"] = \"COMMENT_IN\";\n    CommentsConnectionOrderbyEnum[/** Order by the comment karma score. */ \"CommentKarma\"] = \"COMMENT_KARMA\";\n    CommentsConnectionOrderbyEnum[/** Order by the comment parent ID. */ \"CommentParent\"] = \"COMMENT_PARENT\";\n    CommentsConnectionOrderbyEnum[/** Order by the post object ID. */ \"CommentPostId\"] = \"COMMENT_POST_ID\";\n    CommentsConnectionOrderbyEnum[/** Order by the the type of comment, such as 'comment', 'pingback', or 'trackback'. */ \"CommentType\"] = \"COMMENT_TYPE\";\n    CommentsConnectionOrderbyEnum[/** Order by the user ID. */ \"UserId\"] = \"USER_ID\";\n})(CommentsConnectionOrderbyEnum || (CommentsConnectionOrderbyEnum = {}));\nvar ContentNodeIdTypeEnum;\n(function(ContentNodeIdTypeEnum) {\n    ContentNodeIdTypeEnum[/** Identify a resource by the Database ID. */ \"DatabaseId\"] = \"DATABASE_ID\";\n    ContentNodeIdTypeEnum[/** Identify a resource by the (hashed) Global ID. */ \"Id\"] = \"ID\";\n    ContentNodeIdTypeEnum[/** Identify a resource by the URI. */ \"Uri\"] = \"URI\";\n})(ContentNodeIdTypeEnum || (ContentNodeIdTypeEnum = {}));\nvar ContentTypeEnum;\n(function(ContentTypeEnum) {\n    ContentTypeEnum[/** The Type of Content object */ \"Attachment\"] = \"ATTACHMENT\";\n    ContentTypeEnum[/** The Type of Content object */ \"Page\"] = \"PAGE\";\n    ContentTypeEnum[/** The Type of Content object */ \"Post\"] = \"POST\";\n})(ContentTypeEnum || (ContentTypeEnum = {}));\nvar ContentTypeIdTypeEnum;\n(function(ContentTypeIdTypeEnum) {\n    ContentTypeIdTypeEnum[/** The globally unique ID */ \"Id\"] = \"ID\";\n    ContentTypeIdTypeEnum[/** The name of the content type. */ \"Name\"] = \"NAME\";\n})(ContentTypeIdTypeEnum || (ContentTypeIdTypeEnum = {}));\nvar ContentTypesOfCategoryEnum;\n(function(ContentTypesOfCategoryEnum) {\n    ContentTypesOfCategoryEnum[/** The Type of Content object */ \"Post\"] = \"POST\";\n})(ContentTypesOfCategoryEnum || (ContentTypesOfCategoryEnum = {}));\nvar ContentTypesOfPostFormatEnum;\n(function(ContentTypesOfPostFormatEnum) {\n    ContentTypesOfPostFormatEnum[/** The Type of Content object */ \"Post\"] = \"POST\";\n})(ContentTypesOfPostFormatEnum || (ContentTypesOfPostFormatEnum = {}));\nvar ContentTypesOfTagEnum;\n(function(ContentTypesOfTagEnum) {\n    ContentTypesOfTagEnum[/** The Type of Content object */ \"Post\"] = \"POST\";\n})(ContentTypesOfTagEnum || (ContentTypesOfTagEnum = {}));\nvar MediaItemIdType;\n(function(MediaItemIdType) {\n    MediaItemIdType[/** Identify a resource by the Database ID. */ \"DatabaseId\"] = \"DATABASE_ID\";\n    MediaItemIdType[/** Identify a resource by the (hashed) Global ID. */ \"Id\"] = \"ID\";\n    MediaItemIdType[/** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */ \"Slug\"] = \"SLUG\";\n    MediaItemIdType[/** Identify a media item by its source url */ \"SourceUrl\"] = \"SOURCE_URL\";\n    MediaItemIdType[/** Identify a resource by the URI. */ \"Uri\"] = \"URI\";\n})(MediaItemIdType || (MediaItemIdType = {}));\nvar MediaItemSizeEnum;\n(function(MediaItemSizeEnum) {\n    MediaItemSizeEnum[/** MediaItem with the alm-thumbnail size */ \"AlmThumbnail\"] = \"ALM_THUMBNAIL\";\n    MediaItemSizeEnum[/** MediaItem with the authorship-box-avatar size */ \"AuthorshipBoxAvatar\"] = \"AUTHORSHIP_BOX_AVATAR\";\n    MediaItemSizeEnum[/** MediaItem with the authorship-box-related size */ \"AuthorshipBoxRelated\"] = \"AUTHORSHIP_BOX_RELATED\";\n    MediaItemSizeEnum[/** MediaItem with the authorship-post-cards size */ \"AuthorshipPostCards\"] = \"AUTHORSHIP_POST_CARDS\";\n    MediaItemSizeEnum[/** MediaItem with the authorship-post-flat size */ \"AuthorshipPostFlat\"] = \"AUTHORSHIP_POST_FLAT\";\n    MediaItemSizeEnum[/** MediaItem with the authorship-post-thumbs size */ \"AuthorshipPostThumbs\"] = \"AUTHORSHIP_POST_THUMBS\";\n    MediaItemSizeEnum[/** MediaItem with the blog_thumbnail size */ \"BlogThumbnail\"] = \"BLOG_THUMBNAIL\";\n    MediaItemSizeEnum[/** MediaItem with the large size */ \"Large\"] = \"LARGE\";\n    MediaItemSizeEnum[/** MediaItem with the mailpoet_newsletter_max size */ \"MailpoetNewsletterMax\"] = \"MAILPOET_NEWSLETTER_MAX\";\n    MediaItemSizeEnum[/** MediaItem with the medium size */ \"Medium\"] = \"MEDIUM\";\n    MediaItemSizeEnum[/** MediaItem with the medium_large size */ \"MediumLarge\"] = \"MEDIUM_LARGE\";\n    MediaItemSizeEnum[/** MediaItem with the thumbnail size */ \"Thumbnail\"] = \"THUMBNAIL\";\n    MediaItemSizeEnum[/** MediaItem with the 1536x1536 size */ \"1536X1536\"] = \"_1536X1536\";\n    MediaItemSizeEnum[/** MediaItem with the 2048x2048 size */ \"2048X2048\"] = \"_2048X2048\";\n})(MediaItemSizeEnum || (MediaItemSizeEnum = {}));\nvar MediaItemStatusEnum;\n(function(MediaItemStatusEnum) {\n    MediaItemStatusEnum[/** Objects with the auto-draft status */ \"AutoDraft\"] = \"AUTO_DRAFT\";\n    MediaItemStatusEnum[/** Objects with the inherit status */ \"Inherit\"] = \"INHERIT\";\n    MediaItemStatusEnum[/** Objects with the private status */ \"Private\"] = \"PRIVATE\";\n    MediaItemStatusEnum[/** Objects with the trash status */ \"Trash\"] = \"TRASH\";\n})(MediaItemStatusEnum || (MediaItemStatusEnum = {}));\nvar MenuItemNodeIdTypeEnum;\n(function(MenuItemNodeIdTypeEnum) {\n    MenuItemNodeIdTypeEnum[/** Identify a resource by the Database ID. */ \"DatabaseId\"] = \"DATABASE_ID\";\n    MenuItemNodeIdTypeEnum[/** Identify a resource by the (hashed) Global ID. */ \"Id\"] = \"ID\";\n})(MenuItemNodeIdTypeEnum || (MenuItemNodeIdTypeEnum = {}));\nvar MenuLocationEnum;\n(function(MenuLocationEnum) {\n    MenuLocationEnum[/** Put the menu in the footer_navi location */ \"FooterNavi\"] = \"FOOTER_NAVI\";\n    MenuLocationEnum[/** Put the menu in the lang_navi location */ \"LangNavi\"] = \"LANG_NAVI\";\n    MenuLocationEnum[/** Put the menu in the primary_navi location */ \"PrimaryNavi\"] = \"PRIMARY_NAVI\";\n})(MenuLocationEnum || (MenuLocationEnum = {}));\nvar MenuNodeIdTypeEnum;\n(function(MenuNodeIdTypeEnum) {\n    MenuNodeIdTypeEnum[/** Identify a menu node by the Database ID. */ \"DatabaseId\"] = \"DATABASE_ID\";\n    MenuNodeIdTypeEnum[/** Identify a menu node by the (hashed) Global ID. */ \"Id\"] = \"ID\";\n    MenuNodeIdTypeEnum[/** Identify a menu node by the slug of menu location to which it is assigned */ \"Location\"] = \"LOCATION\";\n    MenuNodeIdTypeEnum[/** Identify a menu node by its name */ \"Name\"] = \"NAME\";\n    MenuNodeIdTypeEnum[/** Identify a menu node by its slug */ \"Slug\"] = \"SLUG\";\n})(MenuNodeIdTypeEnum || (MenuNodeIdTypeEnum = {}));\nvar MimeTypeEnum;\n(function(MimeTypeEnum) {\n    MimeTypeEnum[/** application/java mime type. */ \"ApplicationJava\"] = \"APPLICATION_JAVA\";\n    MimeTypeEnum[/** application/msword mime type. */ \"ApplicationMsword\"] = \"APPLICATION_MSWORD\";\n    MimeTypeEnum[/** application/octet-stream mime type. */ \"ApplicationOctetStream\"] = \"APPLICATION_OCTET_STREAM\";\n    MimeTypeEnum[/** application/onenote mime type. */ \"ApplicationOnenote\"] = \"APPLICATION_ONENOTE\";\n    MimeTypeEnum[/** application/oxps mime type. */ \"ApplicationOxps\"] = \"APPLICATION_OXPS\";\n    MimeTypeEnum[/** application/pdf mime type. */ \"ApplicationPdf\"] = \"APPLICATION_PDF\";\n    MimeTypeEnum[/** application/rar mime type. */ \"ApplicationRar\"] = \"APPLICATION_RAR\";\n    MimeTypeEnum[/** application/rtf mime type. */ \"ApplicationRtf\"] = \"APPLICATION_RTF\";\n    MimeTypeEnum[/** application/ttaf+xml mime type. */ \"ApplicationTtafXml\"] = \"APPLICATION_TTAF_XML\";\n    MimeTypeEnum[/** application/vnd.apple.keynote mime type. */ \"ApplicationVndAppleKeynote\"] = \"APPLICATION_VND_APPLE_KEYNOTE\";\n    MimeTypeEnum[/** application/vnd.apple.numbers mime type. */ \"ApplicationVndAppleNumbers\"] = \"APPLICATION_VND_APPLE_NUMBERS\";\n    MimeTypeEnum[/** application/vnd.apple.pages mime type. */ \"ApplicationVndApplePages\"] = \"APPLICATION_VND_APPLE_PAGES\";\n    MimeTypeEnum[/** application/vnd.ms-access mime type. */ \"ApplicationVndMsAccess\"] = \"APPLICATION_VND_MS_ACCESS\";\n    MimeTypeEnum[/** application/vnd.ms-excel mime type. */ \"ApplicationVndMsExcel\"] = \"APPLICATION_VND_MS_EXCEL\";\n    MimeTypeEnum[/** application/vnd.ms-excel.addin.macroEnabled.12 mime type. */ \"ApplicationVndMsExcelAddinMacroenabled_12\"] = \"APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-excel.sheet.binary.macroEnabled.12 mime type. */ \"ApplicationVndMsExcelSheetBinaryMacroenabled_12\"] = \"APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-excel.sheet.macroEnabled.12 mime type. */ \"ApplicationVndMsExcelSheetMacroenabled_12\"] = \"APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-excel.template.macroEnabled.12 mime type. */ \"ApplicationVndMsExcelTemplateMacroenabled_12\"] = \"APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-powerpoint mime type. */ \"ApplicationVndMsPowerpoint\"] = \"APPLICATION_VND_MS_POWERPOINT\";\n    MimeTypeEnum[/** application/vnd.ms-powerpoint.addin.macroEnabled.12 mime type. */ \"ApplicationVndMsPowerpointAddinMacroenabled_12\"] = \"APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-powerpoint.presentation.macroEnabled.12 mime type. */ \"ApplicationVndMsPowerpointPresentationMacroenabled_12\"] = \"APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-powerpoint.slideshow.macroEnabled.12 mime type. */ \"ApplicationVndMsPowerpointSlideshowMacroenabled_12\"] = \"APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-powerpoint.slide.macroEnabled.12 mime type. */ \"ApplicationVndMsPowerpointSlideMacroenabled_12\"] = \"APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-powerpoint.template.macroEnabled.12 mime type. */ \"ApplicationVndMsPowerpointTemplateMacroenabled_12\"] = \"APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-project mime type. */ \"ApplicationVndMsProject\"] = \"APPLICATION_VND_MS_PROJECT\";\n    MimeTypeEnum[/** application/vnd.ms-word.document.macroEnabled.12 mime type. */ \"ApplicationVndMsWordDocumentMacroenabled_12\"] = \"APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-word.template.macroEnabled.12 mime type. */ \"ApplicationVndMsWordTemplateMacroenabled_12\"] = \"APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-write mime type. */ \"ApplicationVndMsWrite\"] = \"APPLICATION_VND_MS_WRITE\";\n    MimeTypeEnum[/** application/vnd.ms-xpsdocument mime type. */ \"ApplicationVndMsXpsdocument\"] = \"APPLICATION_VND_MS_XPSDOCUMENT\";\n    MimeTypeEnum[/** application/vnd.oasis.opendocument.chart mime type. */ \"ApplicationVndOasisOpendocumentChart\"] = \"APPLICATION_VND_OASIS_OPENDOCUMENT_CHART\";\n    MimeTypeEnum[/** application/vnd.oasis.opendocument.database mime type. */ \"ApplicationVndOasisOpendocumentDatabase\"] = \"APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE\";\n    MimeTypeEnum[/** application/vnd.oasis.opendocument.formula mime type. */ \"ApplicationVndOasisOpendocumentFormula\"] = \"APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA\";\n    MimeTypeEnum[/** application/vnd.oasis.opendocument.graphics mime type. */ \"ApplicationVndOasisOpendocumentGraphics\"] = \"APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS\";\n    MimeTypeEnum[/** application/vnd.oasis.opendocument.presentation mime type. */ \"ApplicationVndOasisOpendocumentPresentation\"] = \"APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION\";\n    MimeTypeEnum[/** application/vnd.oasis.opendocument.spreadsheet mime type. */ \"ApplicationVndOasisOpendocumentSpreadsheet\"] = \"APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET\";\n    MimeTypeEnum[/** application/vnd.oasis.opendocument.text mime type. */ \"ApplicationVndOasisOpendocumentText\"] = \"APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT\";\n    MimeTypeEnum[/** application/vnd.openxmlformats-officedocument.presentationml.presentation mime type. */ \"ApplicationVndOpenxmlformatsOfficedocumentPresentationmlPresentation\"] = \"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION\";\n    MimeTypeEnum[/** application/vnd.openxmlformats-officedocument.presentationml.slide mime type. */ \"ApplicationVndOpenxmlformatsOfficedocumentPresentationmlSlide\"] = \"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE\";\n    MimeTypeEnum[/** application/vnd.openxmlformats-officedocument.presentationml.slideshow mime type. */ \"ApplicationVndOpenxmlformatsOfficedocumentPresentationmlSlideshow\"] = \"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW\";\n    MimeTypeEnum[/** application/vnd.openxmlformats-officedocument.presentationml.template mime type. */ \"ApplicationVndOpenxmlformatsOfficedocumentPresentationmlTemplate\"] = \"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE\";\n    MimeTypeEnum[/** application/vnd.openxmlformats-officedocument.spreadsheetml.sheet mime type. */ \"ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet\"] = \"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET\";\n    MimeTypeEnum[/** application/vnd.openxmlformats-officedocument.spreadsheetml.template mime type. */ \"ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlTemplate\"] = \"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE\";\n    MimeTypeEnum[/** application/vnd.openxmlformats-officedocument.wordprocessingml.document mime type. */ \"ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlDocument\"] = \"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT\";\n    MimeTypeEnum[/** application/vnd.openxmlformats-officedocument.wordprocessingml.template mime type. */ \"ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlTemplate\"] = \"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE\";\n    MimeTypeEnum[/** application/wordperfect mime type. */ \"ApplicationWordperfect\"] = \"APPLICATION_WORDPERFECT\";\n    MimeTypeEnum[/** application/x-7z-compressed mime type. */ \"ApplicationX_7ZCompressed\"] = \"APPLICATION_X_7Z_COMPRESSED\";\n    MimeTypeEnum[/** application/x-font-ttf mime type. */ \"ApplicationXFontTtf\"] = \"APPLICATION_X_FONT_TTF\";\n    MimeTypeEnum[/** application/x-font-woff mime type. */ \"ApplicationXFontWoff\"] = \"APPLICATION_X_FONT_WOFF\";\n    MimeTypeEnum[/** application/x-font-woff2 mime type. */ \"ApplicationXFontWoff2\"] = \"APPLICATION_X_FONT_WOFF2\";\n    MimeTypeEnum[/** application/x-gzip mime type. */ \"ApplicationXGzip\"] = \"APPLICATION_X_GZIP\";\n    MimeTypeEnum[/** application/x-tar mime type. */ \"ApplicationXTar\"] = \"APPLICATION_X_TAR\";\n    MimeTypeEnum[/** application/zip mime type. */ \"ApplicationZip\"] = \"APPLICATION_ZIP\";\n    MimeTypeEnum[/** audio/aac mime type. */ \"AudioAac\"] = \"AUDIO_AAC\";\n    MimeTypeEnum[/** audio/flac mime type. */ \"AudioFlac\"] = \"AUDIO_FLAC\";\n    MimeTypeEnum[/** audio/midi mime type. */ \"AudioMidi\"] = \"AUDIO_MIDI\";\n    MimeTypeEnum[/** audio/mpeg mime type. */ \"AudioMpeg\"] = \"AUDIO_MPEG\";\n    MimeTypeEnum[/** audio/ogg mime type. */ \"AudioOgg\"] = \"AUDIO_OGG\";\n    MimeTypeEnum[/** audio/wav mime type. */ \"AudioWav\"] = \"AUDIO_WAV\";\n    MimeTypeEnum[/** audio/x-matroska mime type. */ \"AudioXMatroska\"] = \"AUDIO_X_MATROSKA\";\n    MimeTypeEnum[/** audio/x-ms-wax mime type. */ \"AudioXMsWax\"] = \"AUDIO_X_MS_WAX\";\n    MimeTypeEnum[/** audio/x-ms-wma mime type. */ \"AudioXMsWma\"] = \"AUDIO_X_MS_WMA\";\n    MimeTypeEnum[/** audio/x-realaudio mime type. */ \"AudioXRealaudio\"] = \"AUDIO_X_REALAUDIO\";\n    MimeTypeEnum[/** font/otf mime type. */ \"FontOtf\"] = \"FONT_OTF\";\n    MimeTypeEnum[/** image/bmp mime type. */ \"ImageBmp\"] = \"IMAGE_BMP\";\n    MimeTypeEnum[/** image/gif mime type. */ \"ImageGif\"] = \"IMAGE_GIF\";\n    MimeTypeEnum[/** image/heic mime type. */ \"ImageHeic\"] = \"IMAGE_HEIC\";\n    MimeTypeEnum[/** image/jpeg mime type. */ \"ImageJpeg\"] = \"IMAGE_JPEG\";\n    MimeTypeEnum[/** image/png mime type. */ \"ImagePng\"] = \"IMAGE_PNG\";\n    MimeTypeEnum[/** image/tiff mime type. */ \"ImageTiff\"] = \"IMAGE_TIFF\";\n    MimeTypeEnum[/** image/webp mime type. */ \"ImageWebp\"] = \"IMAGE_WEBP\";\n    MimeTypeEnum[/** image/x-icon mime type. */ \"ImageXIcon\"] = \"IMAGE_X_ICON\";\n    MimeTypeEnum[/** text/calendar mime type. */ \"TextCalendar\"] = \"TEXT_CALENDAR\";\n    MimeTypeEnum[/** text/css mime type. */ \"TextCss\"] = \"TEXT_CSS\";\n    MimeTypeEnum[/** text/csv mime type. */ \"TextCsv\"] = \"TEXT_CSV\";\n    MimeTypeEnum[/** text/plain mime type. */ \"TextPlain\"] = \"TEXT_PLAIN\";\n    MimeTypeEnum[/** text/richtext mime type. */ \"TextRichtext\"] = \"TEXT_RICHTEXT\";\n    MimeTypeEnum[/** text/tab-separated-values mime type. */ \"TextTabSeparatedValues\"] = \"TEXT_TAB_SEPARATED_VALUES\";\n    MimeTypeEnum[/** text/vtt mime type. */ \"TextVtt\"] = \"TEXT_VTT\";\n    MimeTypeEnum[/** video/3gpp mime type. */ \"Video_3Gpp\"] = \"VIDEO_3GPP\";\n    MimeTypeEnum[/** video/3gpp2 mime type. */ \"Video_3Gpp2\"] = \"VIDEO_3GPP2\";\n    MimeTypeEnum[/** video/avi mime type. */ \"VideoAvi\"] = \"VIDEO_AVI\";\n    MimeTypeEnum[/** video/divx mime type. */ \"VideoDivx\"] = \"VIDEO_DIVX\";\n    MimeTypeEnum[/** video/mp4 mime type. */ \"VideoMp4\"] = \"VIDEO_MP4\";\n    MimeTypeEnum[/** video/mpeg mime type. */ \"VideoMpeg\"] = \"VIDEO_MPEG\";\n    MimeTypeEnum[/** video/ogg mime type. */ \"VideoOgg\"] = \"VIDEO_OGG\";\n    MimeTypeEnum[/** video/quicktime mime type. */ \"VideoQuicktime\"] = \"VIDEO_QUICKTIME\";\n    MimeTypeEnum[/** video/webm mime type. */ \"VideoWebm\"] = \"VIDEO_WEBM\";\n    MimeTypeEnum[/** video/x-flv mime type. */ \"VideoXFlv\"] = \"VIDEO_X_FLV\";\n    MimeTypeEnum[/** video/x-matroska mime type. */ \"VideoXMatroska\"] = \"VIDEO_X_MATROSKA\";\n    MimeTypeEnum[/** video/x-ms-asf mime type. */ \"VideoXMsAsf\"] = \"VIDEO_X_MS_ASF\";\n    MimeTypeEnum[/** video/x-ms-wm mime type. */ \"VideoXMsWm\"] = \"VIDEO_X_MS_WM\";\n    MimeTypeEnum[/** video/x-ms-wmv mime type. */ \"VideoXMsWmv\"] = \"VIDEO_X_MS_WMV\";\n    MimeTypeEnum[/** video/x-ms-wmx mime type. */ \"VideoXMsWmx\"] = \"VIDEO_X_MS_WMX\";\n})(MimeTypeEnum || (MimeTypeEnum = {}));\nvar OrderEnum;\n(function(OrderEnum) {\n    OrderEnum[/** Sort the query result set in an ascending order */ \"Asc\"] = \"ASC\";\n    OrderEnum[/** Sort the query result set in a descending order */ \"Desc\"] = \"DESC\";\n})(OrderEnum || (OrderEnum = {}));\nvar PageIdType;\n(function(PageIdType) {\n    PageIdType[/** Identify a resource by the Database ID. */ \"DatabaseId\"] = \"DATABASE_ID\";\n    PageIdType[/** Identify a resource by the (hashed) Global ID. */ \"Id\"] = \"ID\";\n    PageIdType[/** Identify a resource by the URI. */ \"Uri\"] = \"URI\";\n})(PageIdType || (PageIdType = {}));\nvar PluginStatusEnum;\n(function(PluginStatusEnum) {\n    PluginStatusEnum[/** The plugin is currently active. */ \"Active\"] = \"ACTIVE\";\n    PluginStatusEnum[/** The plugin is a drop-in plugin. */ \"DropIn\"] = \"DROP_IN\";\n    PluginStatusEnum[/** The plugin is currently inactive. */ \"Inactive\"] = \"INACTIVE\";\n    PluginStatusEnum[/** The plugin is a must-use plugin. */ \"MustUse\"] = \"MUST_USE\";\n    PluginStatusEnum[/** The plugin is technically active but was paused while loading. */ \"Paused\"] = \"PAUSED\";\n    PluginStatusEnum[/** The plugin was active recently. */ \"RecentlyActive\"] = \"RECENTLY_ACTIVE\";\n    PluginStatusEnum[/** The plugin has an upgrade available. */ \"Upgrade\"] = \"UPGRADE\";\n})(PluginStatusEnum || (PluginStatusEnum = {}));\nvar PostFormatIdType;\n(function(PostFormatIdType) {\n    PostFormatIdType[/** The Database ID for the node */ \"DatabaseId\"] = \"DATABASE_ID\";\n    PostFormatIdType[/** The hashed Global ID */ \"Id\"] = \"ID\";\n    PostFormatIdType[/** The name of the node */ \"Name\"] = \"NAME\";\n    PostFormatIdType[/** Url friendly name of the node */ \"Slug\"] = \"SLUG\";\n    PostFormatIdType[/** The URI for the node */ \"Uri\"] = \"URI\";\n})(PostFormatIdType || (PostFormatIdType = {}));\nvar PostIdType;\n(function(PostIdType) {\n    PostIdType[/** Identify a resource by the Database ID. */ \"DatabaseId\"] = \"DATABASE_ID\";\n    PostIdType[/** Identify a resource by the (hashed) Global ID. */ \"Id\"] = \"ID\";\n    PostIdType[/** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */ \"Slug\"] = \"SLUG\";\n    PostIdType[/** Identify a resource by the URI. */ \"Uri\"] = \"URI\";\n})(PostIdType || (PostIdType = {}));\nvar PostObjectFieldFormatEnum;\n(function(PostObjectFieldFormatEnum) {\n    PostObjectFieldFormatEnum[/** Provide the field value directly from database. Null on unauthenticated requests. */ \"Raw\"] = \"RAW\";\n    PostObjectFieldFormatEnum[/** Provide the field value as rendered by WordPress. Default. */ \"Rendered\"] = \"RENDERED\";\n})(PostObjectFieldFormatEnum || (PostObjectFieldFormatEnum = {}));\nvar PostObjectsConnectionDateColumnEnum;\n(function(PostObjectsConnectionDateColumnEnum) {\n    PostObjectsConnectionDateColumnEnum[/** The date the comment was created in local time. */ \"Date\"] = \"DATE\";\n    PostObjectsConnectionDateColumnEnum[/** The most recent modification date of the comment. */ \"Modified\"] = \"MODIFIED\";\n})(PostObjectsConnectionDateColumnEnum || (PostObjectsConnectionDateColumnEnum = {}));\nvar PostObjectsConnectionOrderbyEnum;\n(function(PostObjectsConnectionOrderbyEnum) {\n    PostObjectsConnectionOrderbyEnum[/** Order by author */ \"Author\"] = \"AUTHOR\";\n    PostObjectsConnectionOrderbyEnum[/** Order by the number of comments it has acquired */ \"CommentCount\"] = \"COMMENT_COUNT\";\n    PostObjectsConnectionOrderbyEnum[/** Order by publish date */ \"Date\"] = \"DATE\";\n    PostObjectsConnectionOrderbyEnum[/** Preserve the ID order given in the IN array */ \"In\"] = \"IN\";\n    PostObjectsConnectionOrderbyEnum[/** Order by the menu order value */ \"MenuOrder\"] = \"MENU_ORDER\";\n    PostObjectsConnectionOrderbyEnum[/** Order by last modified date */ \"Modified\"] = \"MODIFIED\";\n    PostObjectsConnectionOrderbyEnum[/** Preserve slug order given in the NAME_IN array */ \"NameIn\"] = \"NAME_IN\";\n    PostObjectsConnectionOrderbyEnum[/** Order by parent ID */ \"Parent\"] = \"PARENT\";\n    PostObjectsConnectionOrderbyEnum[/** Order by slug */ \"Slug\"] = \"SLUG\";\n    PostObjectsConnectionOrderbyEnum[/** Order by title */ \"Title\"] = \"TITLE\";\n})(PostObjectsConnectionOrderbyEnum || (PostObjectsConnectionOrderbyEnum = {}));\nvar PostStatusEnum;\n(function(PostStatusEnum) {\n    PostStatusEnum[/** Objects with the auto-draft status */ \"AutoDraft\"] = \"AUTO_DRAFT\";\n    PostStatusEnum[/** Objects with the draft status */ \"Draft\"] = \"DRAFT\";\n    PostStatusEnum[/** Objects with the future status */ \"Future\"] = \"FUTURE\";\n    PostStatusEnum[/** Objects with the inherit status */ \"Inherit\"] = \"INHERIT\";\n    PostStatusEnum[/** Objects with the negated status */ \"Negated\"] = \"NEGATED\";\n    PostStatusEnum[/** Objects with the pending status */ \"Pending\"] = \"PENDING\";\n    PostStatusEnum[/** Objects with the private status */ \"Private\"] = \"PRIVATE\";\n    PostStatusEnum[/** Objects with the publish status */ \"Publish\"] = \"PUBLISH\";\n    PostStatusEnum[/** Objects with the request-completed status */ \"RequestCompleted\"] = \"REQUEST_COMPLETED\";\n    PostStatusEnum[/** Objects with the request-confirmed status */ \"RequestConfirmed\"] = \"REQUEST_CONFIRMED\";\n    PostStatusEnum[/** Objects with the request-failed status */ \"RequestFailed\"] = \"REQUEST_FAILED\";\n    PostStatusEnum[/** Objects with the request-pending status */ \"RequestPending\"] = \"REQUEST_PENDING\";\n    PostStatusEnum[/** Objects with the trash status */ \"Trash\"] = \"TRASH\";\n    PostStatusEnum[/** Objects with the wpca_except status */ \"WpcaExcept\"] = \"WPCA_EXCEPT\";\n    PostStatusEnum[/** Objects with the wpca_or status */ \"WpcaOr\"] = \"WPCA_OR\";\n})(PostStatusEnum || (PostStatusEnum = {}));\nvar RelationEnum;\n(function(RelationEnum) {\n    RelationEnum[/** The logical AND condition returns true if both operands are true, otherwise, it returns false. */ \"And\"] = \"AND\";\n    RelationEnum[/** The logical OR condition returns false if both operands are false, otherwise, it returns true. */ \"Or\"] = \"OR\";\n})(RelationEnum || (RelationEnum = {}));\nvar ScriptLoadingStrategyEnum;\n(function(ScriptLoadingStrategyEnum) {\n    ScriptLoadingStrategyEnum[/** Use the script `async` attribute */ \"Async\"] = \"ASYNC\";\n    ScriptLoadingStrategyEnum[/** Use the script `defer` attribute */ \"Defer\"] = \"DEFER\";\n})(ScriptLoadingStrategyEnum || (ScriptLoadingStrategyEnum = {}));\nvar TagIdType;\n(function(TagIdType) {\n    TagIdType[/** The Database ID for the node */ \"DatabaseId\"] = \"DATABASE_ID\";\n    TagIdType[/** The hashed Global ID */ \"Id\"] = \"ID\";\n    TagIdType[/** The name of the node */ \"Name\"] = \"NAME\";\n    TagIdType[/** Url friendly name of the node */ \"Slug\"] = \"SLUG\";\n    TagIdType[/** The URI for the node */ \"Uri\"] = \"URI\";\n})(TagIdType || (TagIdType = {}));\nvar TaxonomyEnum;\n(function(TaxonomyEnum) {\n    TaxonomyEnum[/** Taxonomy enum category */ \"Category\"] = \"CATEGORY\";\n    TaxonomyEnum[/** Taxonomy enum post_format */ \"Postformat\"] = \"POSTFORMAT\";\n    TaxonomyEnum[/** Taxonomy enum post_tag */ \"Tag\"] = \"TAG\";\n})(TaxonomyEnum || (TaxonomyEnum = {}));\nvar TaxonomyIdTypeEnum;\n(function(TaxonomyIdTypeEnum) {\n    TaxonomyIdTypeEnum[/** The globally unique ID */ \"Id\"] = \"ID\";\n    TaxonomyIdTypeEnum[/** The name of the taxonomy */ \"Name\"] = \"NAME\";\n})(TaxonomyIdTypeEnum || (TaxonomyIdTypeEnum = {}));\nvar TermNodeIdTypeEnum;\n(function(TermNodeIdTypeEnum) {\n    TermNodeIdTypeEnum[/** The Database ID for the node */ \"DatabaseId\"] = \"DATABASE_ID\";\n    TermNodeIdTypeEnum[/** The hashed Global ID */ \"Id\"] = \"ID\";\n    TermNodeIdTypeEnum[/** The name of the node */ \"Name\"] = \"NAME\";\n    TermNodeIdTypeEnum[/** Url friendly name of the node */ \"Slug\"] = \"SLUG\";\n    TermNodeIdTypeEnum[/** The URI for the node */ \"Uri\"] = \"URI\";\n})(TermNodeIdTypeEnum || (TermNodeIdTypeEnum = {}));\nvar TermObjectsConnectionOrderbyEnum;\n(function(TermObjectsConnectionOrderbyEnum) {\n    TermObjectsConnectionOrderbyEnum[/** Order the connection by item count. */ \"Count\"] = \"COUNT\";\n    TermObjectsConnectionOrderbyEnum[/** Order the connection by description. */ \"Description\"] = \"DESCRIPTION\";\n    TermObjectsConnectionOrderbyEnum[/** Order the connection by name. */ \"Name\"] = \"NAME\";\n    TermObjectsConnectionOrderbyEnum[/** Order the connection by slug. */ \"Slug\"] = \"SLUG\";\n    TermObjectsConnectionOrderbyEnum[/** Order the connection by term group. */ \"TermGroup\"] = \"TERM_GROUP\";\n    TermObjectsConnectionOrderbyEnum[/** Order the connection by term id. */ \"TermId\"] = \"TERM_ID\";\n    TermObjectsConnectionOrderbyEnum[/** Order the connection by term order. */ \"TermOrder\"] = \"TERM_ORDER\";\n})(TermObjectsConnectionOrderbyEnum || (TermObjectsConnectionOrderbyEnum = {}));\nvar UserNodeIdTypeEnum;\n(function(UserNodeIdTypeEnum) {\n    UserNodeIdTypeEnum[/** The Database ID for the node */ \"DatabaseId\"] = \"DATABASE_ID\";\n    UserNodeIdTypeEnum[/** The Email of the User */ \"Email\"] = \"EMAIL\";\n    UserNodeIdTypeEnum[/** The hashed Global ID */ \"Id\"] = \"ID\";\n    UserNodeIdTypeEnum[/** The slug of the User */ \"Slug\"] = \"SLUG\";\n    UserNodeIdTypeEnum[/** The URI for the node */ \"Uri\"] = \"URI\";\n    UserNodeIdTypeEnum[/** The username the User uses to login with */ \"Username\"] = \"USERNAME\";\n})(UserNodeIdTypeEnum || (UserNodeIdTypeEnum = {}));\nvar UserRoleEnum;\n(function(UserRoleEnum) {\n    UserRoleEnum[/** User role with specific capabilities */ \"Administrator\"] = \"ADMINISTRATOR\";\n    UserRoleEnum[/** User role with specific capabilities */ \"Author\"] = \"AUTHOR\";\n    UserRoleEnum[/** User role with specific capabilities */ \"CampaignManager\"] = \"CAMPAIGN_MANAGER\";\n    UserRoleEnum[/** User role with specific capabilities */ \"Contributor\"] = \"CONTRIBUTOR\";\n    UserRoleEnum[/** User role with specific capabilities */ \"Customer\"] = \"CUSTOMER\";\n    UserRoleEnum[/** User role with specific capabilities */ \"Donor\"] = \"DONOR\";\n    UserRoleEnum[/** User role with specific capabilities */ \"Editor\"] = \"EDITOR\";\n    UserRoleEnum[/** User role with specific capabilities */ \"SeoEditor\"] = \"SEO_EDITOR\";\n    UserRoleEnum[/** User role with specific capabilities */ \"SeoManager\"] = \"SEO_MANAGER\";\n    UserRoleEnum[/** User role with specific capabilities */ \"ShopManager\"] = \"SHOP_MANAGER\";\n    UserRoleEnum[/** User role with specific capabilities */ \"Subscriber\"] = \"SUBSCRIBER\";\n    UserRoleEnum[/** User role with specific capabilities */ \"WebDesigner\"] = \"WEB_DESIGNER\";\n})(UserRoleEnum || (UserRoleEnum = {}));\nvar UsersConnectionOrderbyEnum;\n(function(UsersConnectionOrderbyEnum) {\n    UsersConnectionOrderbyEnum[/** Order by display name */ \"DisplayName\"] = \"DISPLAY_NAME\";\n    UsersConnectionOrderbyEnum[/** Order by email address */ \"Email\"] = \"EMAIL\";\n    UsersConnectionOrderbyEnum[/** Order by login */ \"Login\"] = \"LOGIN\";\n    UsersConnectionOrderbyEnum[/** Preserve the login order given in the LOGIN_IN array */ \"LoginIn\"] = \"LOGIN_IN\";\n    UsersConnectionOrderbyEnum[/** Order by nice name */ \"NiceName\"] = \"NICE_NAME\";\n    UsersConnectionOrderbyEnum[/** Preserve the nice name order given in the NICE_NAME_IN array */ \"NiceNameIn\"] = \"NICE_NAME_IN\";\n    UsersConnectionOrderbyEnum[/** Order by registration date */ \"Registered\"] = \"REGISTERED\";\n    UsersConnectionOrderbyEnum[/** Order by URL */ \"Url\"] = \"URL\";\n})(UsersConnectionOrderbyEnum || (UsersConnectionOrderbyEnum = {}));\nvar UsersConnectionSearchColumnEnum;\n(function(UsersConnectionSearchColumnEnum) {\n    UsersConnectionSearchColumnEnum[/** The user's email address. */ \"Email\"] = \"EMAIL\";\n    UsersConnectionSearchColumnEnum[/** The globally unique ID. */ \"Id\"] = \"ID\";\n    UsersConnectionSearchColumnEnum[/** The username the User uses to login with. */ \"Login\"] = \"LOGIN\";\n    UsersConnectionSearchColumnEnum[/** A URL-friendly name for the user. The default is the user's username. */ \"Nicename\"] = \"NICENAME\";\n    UsersConnectionSearchColumnEnum[/** The URL of the user's website. */ \"Url\"] = \"URL\";\n})(UsersConnectionSearchColumnEnum || (UsersConnectionSearchColumnEnum = {}));\nconst PostFragementFragmentDoc = /*#__PURE__*/ (0,_apollo_client__WEBPACK_IMPORTED_MODULE_1__.gql)(_templateObject());\nconst GetPostsDocument = /*#__PURE__*/ (0,_apollo_client__WEBPACK_IMPORTED_MODULE_1__.gql)(_templateObject1(), PostFragementFragmentDoc);\n/**\n * __useGetPostsQuery__\n *\n * To run a query within a React component, call `useGetPostsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPostsQuery({\n *   variables: {\n *      first: // value for 'first'\n *   },\n * });\n */ function useGetPostsQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_2__.useQuery(GetPostsDocument, options);\n}\nfunction useGetPostsLazyQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_3__.useLazyQuery(GetPostsDocument, options);\n}\nfunction useGetPostsSuspenseQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_4__.useSuspenseQuery(GetPostsDocument, options);\n}\nconst GetPostIDsDocument = /*#__PURE__*/ (0,_apollo_client__WEBPACK_IMPORTED_MODULE_1__.gql)(_templateObject2());\n/**\n * __useGetPostIDsQuery__\n *\n * To run a query within a React component, call `useGetPostIDsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPostIDsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPostIDsQuery({\n *   variables: {\n *      first: // value for 'first'\n *   },\n * });\n */ function useGetPostIDsQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_2__.useQuery(GetPostIDsDocument, options);\n}\nfunction useGetPostIDsLazyQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_3__.useLazyQuery(GetPostIDsDocument, options);\n}\nfunction useGetPostIDsSuspenseQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_4__.useSuspenseQuery(GetPostIDsDocument, options);\n}\nconst GetPostDocument = /*#__PURE__*/ (0,_apollo_client__WEBPACK_IMPORTED_MODULE_1__.gql)(_templateObject3(), PostFragementFragmentDoc);\n/**\n * __useGetPostQuery__\n *\n * To run a query within a React component, call `useGetPostQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPostQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */ function useGetPostQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_2__.useQuery(GetPostDocument, options);\n}\nfunction useGetPostLazyQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_3__.useLazyQuery(GetPostDocument, options);\n}\nfunction useGetPostSuspenseQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_4__.useSuspenseQuery(GetPostDocument, options);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1jbGllbnQpLy4uLy4uL2dlbmVyYXRlZC9ncmFwaHFsLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXFDO0FBQ0k7QUFRekMsTUFBTUUsaUJBQWlCLENBQUM7SUFzQ2pCO1VBQUtDLGdCQUFnQjtJQUFoQkEsaUJBQ1YsNkNBQTZDLEdBQzdDQyxPQUFBQTtJQUZVRCxpQkFHViw4Q0FBOEMsR0FDOUNFLFFBQUs7SUFKS0YsaUJBS1YsOENBQThDLEdBQzlDRyxPQUFBQTtJQU5VSCxpQkFPViw4Q0FBOEMsR0FDOUNJLE9BQUFBO0dBUlVKLHFCQUFBQTtJQTZKTDtVQUFLSyxjQUFjO0lBQWRBLGVBQ1YsaUNBQWlDLEdBQ2pDQyxnQkFBYTtJQUZIRCxlQUdWLHlCQUF5QixHQUN6QkUsUUFBSztJQUpLRixlQUtWLHlCQUF5QixHQUN6QkcsVUFBTztJQU5HSCxlQU9WLGtDQUFrQyxHQUNsQ0ksVUFBTztJQVJHSixlQVNWLHlCQUF5QixHQUN6QkssU0FBTTtHQVZJTCxtQkFBQUE7SUE0Ykw7VUFBS00scUJBQXFCO0lBQXJCQSxzQkFDViw0Q0FBNEMsR0FDNUNMLGdCQUFhO0lBRkhLLHNCQUdWLG1EQUFtRCxHQUNuREosUUFBSztHQUpLSSwwQkFBQUE7SUFRTDtVQUFLQyxpQkFBaUI7SUFBakJBLGtCQUNWLHNDQUFzQyxHQUN0Q0MsYUFBVTtJQUZBRCxrQkFHVix3Q0FBd0MsR0FDeENFLFVBQU87SUFKR0Ysa0JBS1Ysa0NBQWtDLEdBQ2xDRyxVQUFPO0lBTkdILGtCQU9WLG1DQUFtQyxHQUNuQ0ksV0FBUTtHQVJFSixzQkFBQUE7SUE4Tkw7VUFBS0ssNkJBQTZCO0lBQTdCQSw4QkFDVixrREFBa0QsR0FDbERDLGtCQUFlO0lBRkxELDhCQUdWLDZDQUE2QyxHQUM3Q0UscUJBQWtCO0lBSlJGLDhCQUtWLHlDQUF5QyxHQUN6Q0csbUJBQWdCO0lBTk5ILDhCQU9WLDJDQUEyQyxHQUMzQ0ksd0JBQXFCO0lBUlhKLDhCQVNWLCtDQUErQyxHQUMvQ0sscUJBQWtCO0lBVlJMLDhCQVdWLGdEQUFnRCxHQUNoRE0sc0JBQW1CO0lBWlROLDhCQWFWLG1DQUFtQyxHQUNuQ08sb0JBQWlCO0lBZFBQLDhCQWVWLGlEQUFpRCxHQUNqRFEsaUJBQWM7SUFoQkpSLDhCQWlCViw4REFBOEQsR0FDOURTLG9CQUFpQjtJQWxCUFQsOEJBbUJWLG1FQUFtRSxHQUNuRVUsZUFBWTtJQXBCRlYsOEJBcUJWLHVFQUF1RSxHQUN2RVcsZUFBWTtJQXRCRlgsOEJBdUJWLHNDQUFzQyxHQUN0Q1ksa0JBQWU7SUF4QkxaLDhCQXlCVixvQ0FBb0MsR0FDcENhLG1CQUFnQjtJQTFCTmIsOEJBMkJWLGlDQUFpQyxHQUNqQ2MsbUJBQWdCO0lBNUJOZCw4QkE2QlYscUZBQXFGLEdBQ3JGZSxpQkFBYztJQTlCSmYsOEJBK0JWLDBCQUEwQixHQUMxQmdCLFlBQVM7R0FoQ0NoQixrQ0FBQUE7SUFzSkw7VUFBS2lCLHFCQUFxQjtJQUFyQkEsc0JBQ1YsNENBQTRDLEdBQzVDNUIsZ0JBQWE7SUFGSDRCLHNCQUdWLG1EQUFtRCxHQUNuRDNCLFFBQUs7SUFKSzJCLHNCQUtWLG9DQUFvQyxHQUNwQ3hCLFNBQU07R0FOSXdCLDBCQUFBQTtJQXFPTDtVQUFLQyxlQUFlO0lBQWZBLGdCQUNWLCtCQUErQixHQUMvQkMsZ0JBQWE7SUFGSEQsZ0JBR1YsK0JBQStCLEdBQy9CRSxVQUFPO0lBSkdGLGdCQUtWLCtCQUErQixHQUMvQkcsVUFBTztHQU5HSCxvQkFBQUE7SUFVTDtVQUFLSSxxQkFBcUI7SUFBckJBLHNCQUNWLDJCQUEyQixHQUMzQmhDLFFBQUs7SUFGS2dDLHNCQUdWLGtDQUFrQyxHQUNsQy9CLFVBQU87R0FKRytCLDBCQUFBQTtJQWtITDtVQUFLQywwQkFBMEI7SUFBMUJBLDJCQUNWLCtCQUErQixHQUMvQkYsVUFBTztHQUZHRSwrQkFBQUE7SUFNTDtVQUFLQyw0QkFBNEI7SUFBNUJBLDZCQUNWLCtCQUErQixHQUMvQkgsVUFBTztHQUZHRyxpQ0FBQUE7SUFNTDtVQUFLQyxxQkFBcUI7SUFBckJBLHNCQUNWLCtCQUErQixHQUMvQkosVUFBTztHQUZHSSwwQkFBQUE7SUE0eENMO1VBQUtDLGVBQWU7SUFBZkEsZ0JBQ1YsNENBQTRDLEdBQzVDckMsZ0JBQWE7SUFGSHFDLGdCQUdWLG1EQUFtRCxHQUNuRHBDLFFBQUs7SUFKS29DLGdCQUtWLGdIQUFnSCxHQUNoSGxDLFVBQU87SUFOR2tDLGdCQU9WLDRDQUE0QyxHQUM1Q0MsZUFBWTtJQVJGRCxnQkFTVixvQ0FBb0MsR0FDcENqQyxTQUFNO0dBVklpQyxvQkFBQUE7SUEyQ0w7VUFBS0UsaUJBQWlCO0lBQWpCQSxrQkFDViwwQ0FBMEMsR0FDMUNDLGtCQUFlO0lBRkxELGtCQUdWLGtEQUFrRCxHQUNsREUseUJBQXNCO0lBSlpGLGtCQUtWLG1EQUFtRCxHQUNuREcsMEJBQXVCO0lBTmJILGtCQU9WLGtEQUFrRCxHQUNsREkseUJBQXNCO0lBUlpKLGtCQVNWLGlEQUFpRCxHQUNqREssd0JBQXFCO0lBVlhMLGtCQVdWLG1EQUFtRCxHQUNuRE0sMEJBQXVCO0lBWmJOLGtCQWFWLDJDQUEyQyxHQUMzQ08sbUJBQWdCO0lBZE5QLGtCQWVWLGtDQUFrQyxHQUNsQ1EsV0FBUTtJQWhCRVIsa0JBaUJWLG9EQUFvRCxHQUNwRFMsMkJBQXdCO0lBbEJkVCxrQkFtQlYsbUNBQW1DLEdBQ25DVSxZQUFTO0lBcEJDVixrQkFxQlYseUNBQXlDLEdBQ3pDVyxpQkFBYztJQXRCSlgsa0JBdUJWLHNDQUFzQyxHQUN0Q1ksZUFBWTtJQXhCRlosa0JBeUJWLHNDQUFzQyxHQUN0QyxlQUFjO0lBMUJKQSxrQkEyQlYsc0NBQXNDLEdBQ3RDLGVBQWM7R0E1QkpBLHNCQUFBQTtJQWdDTDtVQUFLYSxtQkFBbUI7SUFBbkJBLG9CQUNWLHVDQUF1QyxHQUN2Q0MsZUFBWTtJQUZGRCxvQkFHVixvQ0FBb0MsR0FDcENFLGFBQVU7SUFKQUYsb0JBS1Ysb0NBQW9DLEdBQ3BDRyxhQUFVO0lBTkFILG9CQU9WLGtDQUFrQyxHQUNsQzFDLFdBQVE7R0FSRTBDLHdCQUFBQTtJQW1UTDtVQUFLSSxzQkFBc0I7SUFBdEJBLHVCQUNWLDRDQUE0QyxHQUM1Q3hELGdCQUFhO0lBRkh3RCx1QkFHVixtREFBbUQsR0FDbkR2RCxRQUFLO0dBSkt1RCwyQkFBQUE7SUEwRUw7VUFBS0MsZ0JBQWdCO0lBQWhCQSxpQkFDViw2Q0FBNkMsR0FDN0NDLGdCQUFhO0lBRkhELGlCQUdWLDJDQUEyQyxHQUMzQ0UsY0FBVztJQUpERixpQkFLViw4Q0FBOEMsR0FDOUNHLGlCQUFjO0dBTkpILHFCQUFBQTtJQVVMO1VBQUtJLGtCQUFrQjtJQUFsQkEsbUJBQ1YsNkNBQTZDLEdBQzdDN0QsZ0JBQWE7SUFGSDZELG1CQUdWLG9EQUFvRCxHQUNwRDVELFFBQUs7SUFKSzRELG1CQUtWLDhFQUE4RSxHQUM5RUMsY0FBVztJQU5ERCxtQkFPVixxQ0FBcUMsR0FDckMzRCxVQUFPO0lBUkcyRCxtQkFTVixxQ0FBcUMsR0FDckMxRCxVQUFPO0dBVkcwRCx1QkFBQUE7SUEyREw7VUFBS0UsWUFBWTtJQUFaQSxhQUNWLGdDQUFnQyxHQUNoQ0MscUJBQWtCO0lBRlJELGFBR1Ysa0NBQWtDLEdBQ2xDRSx1QkFBb0I7SUFKVkYsYUFLVix3Q0FBd0MsR0FDeENHLDRCQUF5QjtJQU5mSCxhQU9WLG1DQUFtQyxHQUNuQ0ksd0JBQXFCO0lBUlhKLGFBU1YsZ0NBQWdDLEdBQ2hDSyxxQkFBa0I7SUFWUkwsYUFXViwrQkFBK0IsR0FDL0JNLG9CQUFpQjtJQVpQTixhQWFWLCtCQUErQixHQUMvQk8sb0JBQWlCO0lBZFBQLGFBZVYsK0JBQStCLEdBQy9CUSxvQkFBaUI7SUFoQlBSLGFBaUJWLG9DQUFvQyxHQUNwQ1Msd0JBQXFCO0lBbEJYVCxhQW1CViw2Q0FBNkMsR0FDN0NVLGdDQUE2QjtJQXBCbkJWLGFBcUJWLDZDQUE2QyxHQUM3Q1csZ0NBQTZCO0lBdEJuQlgsYUF1QlYsMkNBQTJDLEdBQzNDWSw4QkFBMkI7SUF4QmpCWixhQXlCVix5Q0FBeUMsR0FDekNhLDRCQUF5QjtJQTFCZmIsYUEyQlYsd0NBQXdDLEdBQ3hDYywyQkFBd0I7SUE1QmRkLGFBNkJWLDhEQUE4RCxHQUM5RGUsK0NBQTRDO0lBOUJsQ2YsYUErQlYscUVBQXFFLEdBQ3JFZ0IscURBQWtEO0lBaEN4Q2hCLGFBaUNWLDhEQUE4RCxHQUM5RGlCLCtDQUE0QztJQWxDbENqQixhQW1DVixpRUFBaUUsR0FDakVrQixrREFBK0M7SUFwQ3JDbEIsYUFxQ1YsNkNBQTZDLEdBQzdDbUIsZ0NBQTZCO0lBdENuQm5CLGFBdUNWLG1FQUFtRSxHQUNuRW9CLG9EQUFpRDtJQXhDdkNwQixhQXlDViwwRUFBMEUsR0FDMUVxQiwyREFBd0Q7SUExQzlDckIsYUEyQ1YsdUVBQXVFLEdBQ3ZFc0Isd0RBQXFEO0lBNUMzQ3RCLGFBNkNWLG1FQUFtRSxHQUNuRXVCLG9EQUFpRDtJQTlDdkN2QixhQStDVixzRUFBc0UsR0FDdEV3Qix1REFBb0Q7SUFoRDFDeEIsYUFpRFYsMENBQTBDLEdBQzFDeUIsNkJBQTBCO0lBbERoQnpCLGFBbURWLGdFQUFnRSxHQUNoRTBCLGlEQUE4QztJQXBEcEMxQixhQXFEVixnRUFBZ0UsR0FDaEUyQixpREFBOEM7SUF0RHBDM0IsYUF1RFYsd0NBQXdDLEdBQ3hDNEIsMkJBQXdCO0lBeERkNUIsYUF5RFYsOENBQThDLEdBQzlDNkIsaUNBQThCO0lBMURwQjdCLGFBMkRWLHdEQUF3RCxHQUN4RDhCLDBDQUF1QztJQTVEN0I5QixhQTZEViwyREFBMkQsR0FDM0QrQiw2Q0FBMEM7SUE5RGhDL0IsYUErRFYsMERBQTBELEdBQzFEZ0MsNENBQXlDO0lBaEUvQmhDLGFBaUVWLDJEQUEyRCxHQUMzRGlDLDZDQUEwQztJQWxFaENqQyxhQW1FViwrREFBK0QsR0FDL0RrQyxpREFBOEM7SUFwRXBDbEMsYUFxRVYsOERBQThELEdBQzlEbUMsZ0RBQTZDO0lBdEVuQ25DLGFBdUVWLHVEQUF1RCxHQUN2RG9DLHlDQUFzQztJQXhFNUJwQyxhQXlFVix5RkFBeUYsR0FDekZxQywwRUFBdUU7SUExRTdEckMsYUEyRVYsa0ZBQWtGLEdBQ2xGc0MsbUVBQWdFO0lBNUV0RHRDLGFBNkVWLHNGQUFzRixHQUN0RnVDLHVFQUFvRTtJQTlFMUR2QyxhQStFVixxRkFBcUYsR0FDckZ3QyxzRUFBbUU7SUFoRnpEeEMsYUFpRlYsaUZBQWlGLEdBQ2pGeUMsa0VBQStEO0lBbEZyRHpDLGFBbUZWLG9GQUFvRixHQUNwRjBDLHFFQUFrRTtJQXBGeEQxQyxhQXFGVix1RkFBdUYsR0FDdkYyQyx3RUFBcUU7SUF0RjNEM0MsYUF1RlYsdUZBQXVGLEdBQ3ZGNEMsd0VBQXFFO0lBeEYzRDVDLGFBeUZWLHVDQUF1QyxHQUN2QzZDLDRCQUF5QjtJQTFGZjdDLGFBMkZWLDJDQUEyQyxHQUMzQzhDLCtCQUE0QjtJQTVGbEI5QyxhQTZGVixzQ0FBc0MsR0FDdEMrQyx5QkFBc0I7SUE5RlovQyxhQStGVix1Q0FBdUMsR0FDdkNnRCwwQkFBdUI7SUFoR2JoRCxhQWlHVix3Q0FBd0MsR0FDeENpRCwyQkFBd0I7SUFsR2RqRCxhQW1HVixrQ0FBa0MsR0FDbENrRCxzQkFBbUI7SUFwR1RsRCxhQXFHVixpQ0FBaUMsR0FDakNtRCxxQkFBa0I7SUF0R1JuRCxhQXVHViwrQkFBK0IsR0FDL0JvRCxvQkFBaUI7SUF4R1BwRCxhQXlHVix5QkFBeUIsR0FDekJxRCxjQUFXO0lBMUdEckQsYUEyR1YsMEJBQTBCLEdBQzFCc0QsZUFBWTtJQTVHRnRELGFBNkdWLDBCQUEwQixHQUMxQnVELGVBQVk7SUE5R0Z2RCxhQStHViwwQkFBMEIsR0FDMUJ3RCxlQUFZO0lBaEhGeEQsYUFpSFYseUJBQXlCLEdBQ3pCeUQsY0FBVztJQWxIRHpELGFBbUhWLHlCQUF5QixHQUN6QjBELGNBQVc7SUFwSEQxRCxhQXFIVixnQ0FBZ0MsR0FDaEMyRCxvQkFBaUI7SUF0SFAzRCxhQXVIViw4QkFBOEIsR0FDOUI0RCxpQkFBYztJQXhISjVELGFBeUhWLDhCQUE4QixHQUM5QjZELGlCQUFjO0lBMUhKN0QsYUEySFYsaUNBQWlDLEdBQ2pDOEQscUJBQWtCO0lBNUhSOUQsYUE2SFYsd0JBQXdCLEdBQ3hCK0QsYUFBVTtJQTlIQS9ELGFBK0hWLHlCQUF5QixHQUN6QmdFLGNBQVc7SUFoSURoRSxhQWlJVix5QkFBeUIsR0FDekJpRSxjQUFXO0lBbElEakUsYUFtSVYsMEJBQTBCLEdBQzFCa0UsZUFBWTtJQXBJRmxFLGFBcUlWLDBCQUEwQixHQUMxQm1FLGVBQVk7SUF0SUZuRSxhQXVJVix5QkFBeUIsR0FDekJvRSxjQUFXO0lBeElEcEUsYUF5SVYsMEJBQTBCLEdBQzFCcUUsZUFBWTtJQTFJRnJFLGFBMklWLDBCQUEwQixHQUMxQnNFLGVBQVk7SUE1SUZ0RSxhQTZJViw0QkFBNEIsR0FDNUJ1RSxnQkFBYTtJQTlJSHZFLGFBK0lWLDZCQUE2QixHQUM3QndFLGtCQUFlO0lBaEpMeEUsYUFpSlYsd0JBQXdCLEdBQ3hCeUUsYUFBVTtJQWxKQXpFLGFBbUpWLHdCQUF3QixHQUN4QjBFLGFBQVU7SUFwSkExRSxhQXFKViwwQkFBMEIsR0FDMUIyRSxlQUFZO0lBdEpGM0UsYUF1SlYsNkJBQTZCLEdBQzdCNEUsa0JBQWU7SUF4Skw1RSxhQXlKVix5Q0FBeUMsR0FDekM2RSw0QkFBeUI7SUExSmY3RSxhQTJKVix3QkFBd0IsR0FDeEI4RSxhQUFVO0lBNUpBOUUsYUE2SlYsMEJBQTBCLEdBQzFCK0UsZ0JBQWE7SUE5SkgvRSxhQStKViwyQkFBMkIsR0FDM0JnRixpQkFBYztJQWhLSmhGLGFBaUtWLHlCQUF5QixHQUN6QmlGLGNBQVc7SUFsS0RqRixhQW1LViwwQkFBMEIsR0FDMUJrRixlQUFZO0lBcEtGbEYsYUFxS1YseUJBQXlCLEdBQ3pCbUYsY0FBVztJQXRLRG5GLGFBdUtWLDBCQUEwQixHQUMxQm9GLGVBQVk7SUF4S0ZwRixhQXlLVix5QkFBeUIsR0FDekJxRixjQUFXO0lBMUtEckYsYUEyS1YsK0JBQStCLEdBQy9Cc0Ysb0JBQWlCO0lBNUtQdEYsYUE2S1YsMEJBQTBCLEdBQzFCdUYsZUFBWTtJQTlLRnZGLGFBK0tWLDJCQUEyQixHQUMzQndGLGVBQVk7SUFoTEZ4RixhQWlMVixnQ0FBZ0MsR0FDaEN5RixvQkFBaUI7SUFsTFB6RixhQW1MViw4QkFBOEIsR0FDOUIwRixpQkFBYztJQXBMSjFGLGFBcUxWLDZCQUE2QixHQUM3QjJGLGdCQUFhO0lBdExIM0YsYUF1TFYsOEJBQThCLEdBQzlCNEYsaUJBQWM7SUF4TEo1RixhQXlMViw4QkFBOEIsR0FDOUI2RixpQkFBYztHQTFMSjdGLGlCQUFBQTtJQXlWTDtVQUFLOEYsU0FBUztJQUFUQSxVQUNWLG9EQUFvRCxHQUNwREMsU0FBTTtJQUZJRCxVQUdWLG9EQUFvRCxHQUNwREUsVUFBTztHQUpHRixjQUFBQTtJQTBOTDtVQUFLRyxVQUFVO0lBQVZBLFdBQ1YsNENBQTRDLEdBQzVDaEssZ0JBQWE7SUFGSGdLLFdBR1YsbURBQW1ELEdBQ25EL0osUUFBSztJQUpLK0osV0FLVixvQ0FBb0MsR0FDcEM1SixTQUFNO0dBTkk0SixlQUFBQTtJQTJRTDtVQUFLQyxnQkFBZ0I7SUFBaEJBLGlCQUNWLG9DQUFvQyxHQUNwQ0MsWUFBUztJQUZDRCxpQkFHVixvQ0FBb0MsR0FDcENFLFlBQVM7SUFKQ0YsaUJBS1Ysc0NBQXNDLEdBQ3RDRyxjQUFXO0lBTkRILGlCQU9WLHFDQUFxQyxHQUNyQ0ksYUFBVTtJQVJBSixpQkFTVixtRUFBbUUsR0FDbkVLLFlBQVM7SUFWQ0wsaUJBV1Ysb0NBQW9DLEdBQ3BDTSxvQkFBaUI7SUFaUE4saUJBYVYseUNBQXlDLEdBQ3pDTyxhQUFVO0dBZEFQLHFCQUFBQTtJQXNZTDtVQUFLUSxnQkFBZ0I7SUFBaEJBLGlCQUNWLGlDQUFpQyxHQUNqQ3pLLGdCQUFhO0lBRkh5SyxpQkFHVix5QkFBeUIsR0FDekJ4SyxRQUFLO0lBSkt3SyxpQkFLVix5QkFBeUIsR0FDekJ2SyxVQUFPO0lBTkd1SyxpQkFPVixrQ0FBa0MsR0FDbEN0SyxVQUFPO0lBUkdzSyxpQkFTVix5QkFBeUIsR0FDekJySyxTQUFNO0dBVklxSyxxQkFBQUE7SUFtTUw7VUFBS0MsVUFBVTtJQUFWQSxXQUNWLDRDQUE0QyxHQUM1QzFLLGdCQUFhO0lBRkgwSyxXQUdWLG1EQUFtRCxHQUNuRHpLLFFBQUs7SUFKS3lLLFdBS1YsZ0hBQWdILEdBQ2hIdkssVUFBTztJQU5HdUssV0FPVixvQ0FBb0MsR0FDcEN0SyxTQUFNO0dBUklzSyxlQUFBQTtJQVlMO1VBQUtDLHlCQUF5QjtJQUF6QkEsMEJBQ1Ysc0ZBQXNGLEdBQ3RGQyxTQUFNO0lBRklELDBCQUdWLCtEQUErRCxHQUMvREUsY0FBVztHQUpERiw4QkFBQUE7SUFRTDtVQUFLRyxtQ0FBbUM7SUFBbkNBLG9DQUNWLG9EQUFvRCxHQUNwREMsVUFBTztJQUZHRCxvQ0FHVixzREFBc0QsR0FDdERFLGNBQVc7R0FKREYsd0NBQUFBO0lBUUw7VUFBS0csZ0NBQWdDO0lBQWhDQSxpQ0FDVixvQkFBb0IsR0FDcEJDLFlBQVM7SUFGQ0QsaUNBR1Ysb0RBQW9ELEdBQ3BERSxrQkFBZTtJQUpMRixpQ0FLViwwQkFBMEIsR0FDMUJGLFVBQU87SUFOR0UsaUNBT1YsZ0RBQWdELEdBQ2hERyxRQUFLO0lBUktILGlDQVNWLGtDQUFrQyxHQUNsQ0ksZUFBWTtJQVZGSixpQ0FXVixnQ0FBZ0MsR0FDaENELGNBQVc7SUFaREMsaUNBYVYsbURBQW1ELEdBQ25ESyxZQUFTO0lBZENMLGlDQWVWLHVCQUF1QixHQUN2Qk0sWUFBUztJQWhCQ04saUNBaUJWLGtCQUFrQixHQUNsQjlLLFVBQU87SUFsQkc4SyxpQ0FtQlYsbUJBQW1CLEdBQ25CTyxXQUFRO0dBcEJFUCxxQ0FBQUE7SUFvREw7VUFBS1EsY0FBYztJQUFkQSxlQUNWLHVDQUF1QyxHQUN2Q3BJLGVBQVk7SUFGRm9JLGVBR1Ysa0NBQWtDLEdBQ2xDQyxXQUFRO0lBSkVELGVBS1YsbUNBQW1DLEdBQ25DRSxZQUFTO0lBTkNGLGVBT1Ysb0NBQW9DLEdBQ3BDbkksYUFBVTtJQVJBbUksZUFTVixvQ0FBb0MsR0FDcENHLGFBQVU7SUFWQUgsZUFXVixvQ0FBb0MsR0FDcENJLGFBQVU7SUFaQUosZUFhVixvQ0FBb0MsR0FDcENsSSxhQUFVO0lBZEFrSSxlQWVWLG9DQUFvQyxHQUNwQ0ssYUFBVTtJQWhCQUwsZUFpQlYsOENBQThDLEdBQzlDTSxzQkFBbUI7SUFsQlROLGVBbUJWLDhDQUE4QyxHQUM5Q08sc0JBQW1CO0lBcEJUUCxlQXFCViwyQ0FBMkMsR0FDM0NRLG1CQUFnQjtJQXRCTlIsZUF1QlYsNENBQTRDLEdBQzVDUyxvQkFBaUI7SUF4QlBULGVBeUJWLGtDQUFrQyxHQUNsQy9LLFdBQVE7SUExQkUrSyxlQTJCVix3Q0FBd0MsR0FDeENVLGdCQUFhO0lBNUJIVixlQTZCVixvQ0FBb0MsR0FDcENXLFlBQVM7R0E5QkNYLG1CQUFBQTtJQTRyQkw7VUFBS1ksWUFBWTtJQUFaQSxhQUNWLG1HQUFtRyxHQUNuR0MsU0FBTTtJQUZJRCxhQUdWLG1HQUFtRyxHQUNuR0UsUUFBSztHQUpLRixpQkFBQUE7SUFxN0RMO1VBQUtHLHlCQUF5QjtJQUF6QkEsMEJBQ1YscUNBQXFDLEdBQ3JDQyxXQUFRO0lBRkVELDBCQUdWLHFDQUFxQyxHQUNyQ0UsV0FBUTtHQUpFRiw4QkFBQUE7SUF5TUw7VUFBS0csU0FBUztJQUFUQSxVQUNWLGlDQUFpQyxHQUNqQzNNLGdCQUFhO0lBRkgyTSxVQUdWLHlCQUF5QixHQUN6QjFNLFFBQUs7SUFKSzBNLFVBS1YseUJBQXlCLEdBQ3pCek0sVUFBTztJQU5HeU0sVUFPVixrQ0FBa0MsR0FDbEN4TSxVQUFPO0lBUkd3TSxVQVNWLHlCQUF5QixHQUN6QnZNLFNBQU07R0FWSXVNLGNBQUFBO0lBa1NMO1VBQUtDLFlBQVk7SUFBWkEsYUFDViwyQkFBMkIsR0FDM0JDLGNBQVc7SUFGREQsYUFHViw4QkFBOEIsR0FDOUJFLGdCQUFhO0lBSkhGLGFBS1YsMkJBQTJCLEdBQzNCRyxTQUFNO0dBTklILGlCQUFBQTtJQVVMO1VBQUtJLGtCQUFrQjtJQUFsQkEsbUJBQ1YsMkJBQTJCLEdBQzNCL00sUUFBSztJQUZLK00sbUJBR1YsNkJBQTZCLEdBQzdCOU0sVUFBTztHQUpHOE0sdUJBQUFBO0lBNEtMO1VBQUtDLGtCQUFrQjtJQUFsQkEsbUJBQ1YsaUNBQWlDLEdBQ2pDak4sZ0JBQWE7SUFGSGlOLG1CQUdWLHlCQUF5QixHQUN6QmhOLFFBQUs7SUFKS2dOLG1CQUtWLHlCQUF5QixHQUN6Qi9NLFVBQU87SUFORytNLG1CQU9WLGtDQUFrQyxHQUNsQzlNLFVBQU87SUFSRzhNLG1CQVNWLHlCQUF5QixHQUN6QjdNLFNBQU07R0FWSTZNLHVCQUFBQTtJQWdGTDtVQUFLQyxnQ0FBZ0M7SUFBaENBLGlDQUNWLHdDQUF3QyxHQUN4Q0MsV0FBUTtJQUZFRCxpQ0FHVix5Q0FBeUMsR0FDekNFLGlCQUFjO0lBSkpGLGlDQUtWLGtDQUFrQyxHQUNsQ2hOLFVBQU87SUFOR2dOLGlDQU9WLGtDQUFrQyxHQUNsQy9NLFVBQU87SUFSRytNLGlDQVNWLHdDQUF3QyxHQUN4Q0csZUFBWTtJQVZGSCxpQ0FXVixxQ0FBcUMsR0FDckNJLFlBQVM7SUFaQ0osaUNBYVYsd0NBQXdDLEdBQ3hDSyxlQUFZO0dBZEZMLHFDQUFBQTtJQW1wQkw7VUFBS00sa0JBQWtCO0lBQWxCQSxtQkFDVixpQ0FBaUMsR0FDakN4TixnQkFBYTtJQUZId04sbUJBR1YsMEJBQTBCLEdBQzFCQyxXQUFRO0lBSkVELG1CQUtWLHlCQUF5QixHQUN6QnZOLFFBQUs7SUFOS3VOLG1CQU9WLHlCQUF5QixHQUN6QnJOLFVBQU87SUFSR3FOLG1CQVNWLHlCQUF5QixHQUN6QnBOLFNBQU07SUFWSW9OLG1CQVdWLDZDQUE2QyxHQUM3Q0UsY0FBVztHQVpERix1QkFBQUE7SUE2REw7VUFBS0csWUFBWTtJQUFaQSxhQUNWLHlDQUF5QyxHQUN6Q0MsbUJBQWdCO0lBRk5ELGFBR1YseUNBQXlDLEdBQ3pDekMsWUFBUztJQUpDeUMsYUFLVix5Q0FBeUMsR0FDekNFLHFCQUFrQjtJQU5SRixhQU9WLHlDQUF5QyxHQUN6Q0csaUJBQWM7SUFSSkgsYUFTVix5Q0FBeUMsR0FDekNJLGNBQVc7SUFWREosYUFXVix5Q0FBeUMsR0FDekNLLFdBQVE7SUFaRUwsYUFhVix5Q0FBeUMsR0FDekNNLFlBQVM7SUFkQ04sYUFlVix5Q0FBeUMsR0FDekNPLGVBQVk7SUFoQkZQLGFBaUJWLHlDQUF5QyxHQUN6Q1EsZ0JBQWE7SUFsQkhSLGFBbUJWLHlDQUF5QyxHQUN6Q1MsaUJBQWM7SUFwQkpULGFBcUJWLHlDQUF5QyxHQUN6Q1UsZ0JBQWE7SUF0QkhWLGFBdUJWLHlDQUF5QyxHQUN6Q1csaUJBQWM7R0F4QkpYLGlCQUFBQTtJQXdpQkw7VUFBS1ksMEJBQTBCO0lBQTFCQSwyQkFDViwwQkFBMEIsR0FDMUJDLGlCQUFjO0lBRkpELDJCQUdWLDJCQUEyQixHQUMzQmQsV0FBUTtJQUpFYywyQkFLVixtQkFBbUIsR0FDbkJFLFdBQVE7SUFORUYsMkJBT1YseURBQXlELEdBQ3pERyxhQUFVO0lBUkFILDJCQVNWLHVCQUF1QixHQUN2QkksY0FBVztJQVZESiwyQkFXVixpRUFBaUUsR0FDakVLLGdCQUFhO0lBWkhMLDJCQWFWLCtCQUErQixHQUMvQk0sZ0JBQWE7SUFkSE4sMkJBZVYsaUJBQWlCLEdBQ2pCTyxTQUFNO0dBaEJJUCwrQkFBQUE7SUE0Qkw7VUFBS1EsK0JBQStCO0lBQS9CQSxnQ0FDViw4QkFBOEIsR0FDOUJ0QixXQUFRO0lBRkVzQixnQ0FHViw0QkFBNEIsR0FDNUI5TyxRQUFLO0lBSks4TyxnQ0FLViw4Q0FBOEMsR0FDOUNOLFdBQVE7SUFORU0sZ0NBT1YsMEVBQTBFLEdBQzFFQyxjQUFXO0lBUkRELGdDQVNWLG1DQUFtQyxHQUNuQ0QsU0FBTTtHQVZJQyxvQ0FBQUE7QUEyREwsTUFBTUUsMkJBQTJCLFdBQVcsR0FBRzFQLG1EQUFHQSxvQkFtQm5EO0FBQ0MsTUFBTTJQLG1CQUFtQixXQUFXLEdBQUczUCxtREFBR0EscUJBUTNDMFAsMEJBQTJCO0FBRWpDOzs7Ozs7Ozs7Ozs7Ozs7Q0FlQyxHQUNNLFNBQVNFLGlCQUFpQkMsV0FBMkUsRUFBRTtJQUN0RyxNQUFNQyxVQUFVO1FBQUMsR0FBRzVQLGNBQWM7UUFBRSxHQUFHMlAsV0FBVztJQUFBO0lBQ2xELE9BQU81UCxvREFBZSxDQUF3QzBQLGtCQUFrQkc7QUFDbEYsQ0FBQztBQUNBLFNBQVNFLHFCQUFxQkgsV0FBZ0YsRUFBRTtJQUM3RyxNQUFNQyxVQUFVO1FBQUMsR0FBRzVQLGNBQWM7UUFBRSxHQUFHMlAsV0FBVztJQUFBO0lBQ2xELE9BQU81UCx3REFBbUIsQ0FBd0MwUCxrQkFBa0JHO0FBQ3RGLENBQUM7QUFDRixTQUFTSSx5QkFBeUJMLFdBQW9GLEVBQUU7SUFDckgsTUFBTUMsVUFBVTtRQUFDLEdBQUc1UCxjQUFjO1FBQUUsR0FBRzJQLFdBQVc7SUFBQTtJQUNsRCxPQUFPNVAsNERBQXVCLENBQXdDMFAsa0JBQWtCRztBQUMxRixDQUFDO0FBS0YsTUFBTU0scUJBQXFCLFdBQVcsR0FBR3BRLG1EQUFHQSxxQkFRN0M7QUFFTjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDTSxTQUFTcVEsbUJBQW1CUixXQUErRSxFQUFFO0lBQzVHLE1BQU1DLFVBQVU7UUFBQyxHQUFHNVAsY0FBYztRQUFFLEdBQUcyUCxXQUFXO0lBQUE7SUFDbEQsT0FBTzVQLG9EQUFlLENBQTRDbVEsb0JBQW9CTjtBQUN4RixDQUFDO0FBQ0EsU0FBU1EsdUJBQXVCVCxXQUFvRixFQUFFO0lBQ25ILE1BQU1DLFVBQVU7UUFBQyxHQUFHNVAsY0FBYztRQUFFLEdBQUcyUCxXQUFXO0lBQUE7SUFDbEQsT0FBTzVQLHdEQUFtQixDQUE0Q21RLG9CQUFvQk47QUFDNUYsQ0FBQztBQUNGLFNBQVNTLDJCQUEyQlYsV0FBd0YsRUFBRTtJQUMzSCxNQUFNQyxVQUFVO1FBQUMsR0FBRzVQLGNBQWM7UUFBRSxHQUFHMlAsV0FBVztJQUFBO0lBQ2xELE9BQU81UCw0REFBdUIsQ0FBNENtUSxvQkFBb0JOO0FBQ2hHLENBQUM7QUFLRixNQUFNVSxrQkFBa0IsV0FBVyxHQUFHeFEsbURBQUdBLHFCQU0xQzBQLDBCQUEyQjtBQUVqQzs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDTSxTQUFTZSxnQkFBZ0JaLFdBQXlFLEVBQUU7SUFDbkcsTUFBTUMsVUFBVTtRQUFDLEdBQUc1UCxjQUFjO1FBQUUsR0FBRzJQLFdBQVc7SUFBQTtJQUNsRCxPQUFPNVAsb0RBQWUsQ0FBc0N1USxpQkFBaUJWO0FBQy9FLENBQUM7QUFDQSxTQUFTWSxvQkFBb0JiLFdBQThFLEVBQUU7SUFDMUcsTUFBTUMsVUFBVTtRQUFDLEdBQUc1UCxjQUFjO1FBQUUsR0FBRzJQLFdBQVc7SUFBQTtJQUNsRCxPQUFPNVAsd0RBQW1CLENBQXNDdVEsaUJBQWlCVjtBQUNuRixDQUFDO0FBQ0YsU0FBU2Esd0JBQXdCZCxXQUFrRixFQUFFO0lBQ2xILE1BQU1DLFVBQVU7UUFBQyxHQUFHNVAsY0FBYztRQUFFLEdBQUcyUCxXQUFXO0lBQUE7SUFDbEQsT0FBTzVQLDREQUF1QixDQUFzQ3VRLGlCQUFpQlY7QUFDdkYsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vZ2VuZXJhdGVkL2dyYXBocWwudHM/ODU5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBncWwgfSBmcm9tICdAYXBvbGxvL2NsaWVudCc7XG5pbXBvcnQgKiBhcyBBcG9sbG8gZnJvbSAnQGFwb2xsby9jbGllbnQnO1xuZXhwb3J0IHR5cGUgTWF5YmU8VD4gPSBUIHwgbnVsbDtcbmV4cG9ydCB0eXBlIElucHV0TWF5YmU8VD4gPSBNYXliZTxUPjtcbmV4cG9ydCB0eXBlIEV4YWN0PFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IHVua25vd24gfT4gPSB7IFtLIGluIGtleW9mIFRdOiBUW0tdIH07XG5leHBvcnQgdHlwZSBNYWtlT3B0aW9uYWw8VCwgSyBleHRlbmRzIGtleW9mIFQ+ID0gT21pdDxULCBLPiAmIHsgW1N1YktleSBpbiBLXT86IE1heWJlPFRbU3ViS2V5XT4gfTtcbmV4cG9ydCB0eXBlIE1ha2VNYXliZTxULCBLIGV4dGVuZHMga2V5b2YgVD4gPSBPbWl0PFQsIEs+ICYgeyBbU3ViS2V5IGluIEtdOiBNYXliZTxUW1N1YktleV0+IH07XG5leHBvcnQgdHlwZSBNYWtlRW1wdHk8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogdW5rbm93biB9LCBLIGV4dGVuZHMga2V5b2YgVD4gPSB7IFtfIGluIEtdPzogbmV2ZXIgfTtcbmV4cG9ydCB0eXBlIEluY3JlbWVudGFsPFQ+ID0gVCB8IHsgW1AgaW4ga2V5b2YgVF0/OiBQIGV4dGVuZHMgJyAkZnJhZ21lbnROYW1lJyB8ICdfX3R5cGVuYW1lJyA/IFRbUF0gOiBuZXZlciB9O1xuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7fSBhcyBjb25zdDtcbi8qKiBBbGwgYnVpbHQtaW4gYW5kIGN1c3RvbSBzY2FsYXJzLCBtYXBwZWQgdG8gdGhlaXIgYWN0dWFsIHZhbHVlcyAqL1xuZXhwb3J0IHR5cGUgU2NhbGFycyA9IHtcbiAgSUQ6IHsgaW5wdXQ6IHN0cmluZzsgb3V0cHV0OiBzdHJpbmc7IH1cbiAgU3RyaW5nOiB7IGlucHV0OiBzdHJpbmc7IG91dHB1dDogc3RyaW5nOyB9XG4gIEJvb2xlYW46IHsgaW5wdXQ6IGJvb2xlYW47IG91dHB1dDogYm9vbGVhbjsgfVxuICBJbnQ6IHsgaW5wdXQ6IG51bWJlcjsgb3V0cHV0OiBudW1iZXI7IH1cbiAgRmxvYXQ6IHsgaW5wdXQ6IG51bWJlcjsgb3V0cHV0OiBudW1iZXI7IH1cbn07XG5cbi8qKiBBdmF0YXJzIGFyZSBwcm9maWxlIGltYWdlcyBmb3IgdXNlcnMuIFdvcmRQcmVzcyBieSBkZWZhdWx0IHVzZXMgdGhlIEdyYXZhdGFyIHNlcnZpY2UgdG8gaG9zdCBhbmQgZmV0Y2ggYXZhdGFycyBmcm9tLiAqL1xuZXhwb3J0IHR5cGUgQXZhdGFyID0ge1xuICBfX3R5cGVuYW1lPzogJ0F2YXRhcic7XG4gIC8qKiBVUkwgZm9yIHRoZSBkZWZhdWx0IGltYWdlIG9yIGEgZGVmYXVsdCB0eXBlLiBBY2NlcHRzICYjMDM5OzQwNCYjMDM5OyAocmV0dXJuIGEgNDA0IGluc3RlYWQgb2YgYSBkZWZhdWx0IGltYWdlKSwgJiMwMzk7cmV0cm8mIzAzOTsgKDhiaXQpLCAmIzAzOTttb25zdGVyaWQmIzAzOTsgKG1vbnN0ZXIpLCAmIzAzOTt3YXZhdGFyJiMwMzk7IChjYXJ0b29uIGZhY2UpLCAmIzAzOTtpbmRlbnRpY29uJiMwMzk7ICh0aGUgJiMwMzk7cXVpbHQmIzAzOTspLCAmIzAzOTtteXN0ZXJ5JiMwMzk7LCAmIzAzOTttbSYjMDM5Oywgb3IgJiMwMzk7bXlzdGVyeW1hbiYjMDM5OyAoVGhlIE95c3RlciBNYW4pLCAmIzAzOTtibGFuayYjMDM5OyAodHJhbnNwYXJlbnQgR0lGKSwgb3IgJiMwMzk7Z3JhdmF0YXJfZGVmYXVsdCYjMDM5OyAodGhlIEdyYXZhdGFyIGxvZ28pLiAqL1xuICBkZWZhdWx0PzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIEhUTUwgYXR0cmlidXRlcyB0byBpbnNlcnQgaW4gdGhlIElNRyBlbGVtZW50LiBJcyBub3Qgc2FuaXRpemVkLiAqL1xuICBleHRyYUF0dHI/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hldGhlciB0byBhbHdheXMgc2hvdyB0aGUgZGVmYXVsdCBpbWFnZSwgbmV2ZXIgdGhlIEdyYXZhdGFyLiAqL1xuICBmb3JjZURlZmF1bHQ/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdGhlIGF2YXRhciB3YXMgc3VjY2Vzc2Z1bGx5IGZvdW5kLiAqL1xuICBmb3VuZEF2YXRhcj86IE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J10+O1xuICAvKiogSGVpZ2h0IG9mIHRoZSBhdmF0YXIgaW1hZ2UuICovXG4gIGhlaWdodD86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBXaGV0aGVyIHRoZSBvYmplY3QgaXMgcmVzdHJpY3RlZCBmcm9tIHRoZSBjdXJyZW50IHZpZXdlciAqL1xuICBpc1Jlc3RyaWN0ZWQ/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoYXQgcmF0aW5nIHRvIGRpc3BsYXkgYXZhdGFycyB1cCB0by4gQWNjZXB0cyAmIzAzOTtHJiMwMzk7LCAmIzAzOTtQRyYjMDM5OywgJiMwMzk7UiYjMDM5OywgJiMwMzk7WCYjMDM5OywgYW5kIGFyZSBqdWRnZWQgaW4gdGhhdCBvcmRlci4gKi9cbiAgcmF0aW5nPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFR5cGUgb2YgdXJsIHNjaGVtZSB0byB1c2UuIFR5cGljYWxseSBIVFRQIHZzLiBIVFRQUy4gKi9cbiAgc2NoZW1lPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBzaXplIG9mIHRoZSBhdmF0YXIgaW4gcGl4ZWxzLiBBIHZhbHVlIG9mIDk2IHdpbGwgbWF0Y2ggYSA5NnB4IHggOTZweCBncmF2YXRhciBpbWFnZS4gKi9cbiAgc2l6ZT86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBVUkwgZm9yIHRoZSBncmF2YXRhciBpbWFnZSBzb3VyY2UuICovXG4gIHVybD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaWR0aCBvZiB0aGUgYXZhdGFyIGltYWdlLiAqL1xuICB3aWR0aD86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG59O1xuXG4vKiogV2hhdCByYXRpbmcgdG8gZGlzcGxheSBhdmF0YXJzIHVwIHRvLiBBY2NlcHRzICdHJywgJ1BHJywgJ1InLCAnWCcsIGFuZCBhcmUganVkZ2VkIGluIHRoYXQgb3JkZXIuIERlZmF1bHQgaXMgdGhlIHZhbHVlIG9mIHRoZSAnYXZhdGFyX3JhdGluZycgb3B0aW9uICovXG5leHBvcnQgZW51bSBBdmF0YXJSYXRpbmdFbnVtIHtcbiAgLyoqIEluZGljYXRlcyBhIEcgbGV2ZWwgYXZhdGFyIHJhdGluZyBsZXZlbC4gKi9cbiAgRyA9ICdHJyxcbiAgLyoqIEluZGljYXRlcyBhIFBHIGxldmVsIGF2YXRhciByYXRpbmcgbGV2ZWwuICovXG4gIFBnID0gJ1BHJyxcbiAgLyoqIEluZGljYXRlcyBhbiBSIGxldmVsIGF2YXRhciByYXRpbmcgbGV2ZWwuICovXG4gIFIgPSAnUicsXG4gIC8qKiBJbmRpY2F0ZXMgYW4gWCBsZXZlbCBhdmF0YXIgcmF0aW5nIGxldmVsLiAqL1xuICBYID0gJ1gnXG59XG5cbi8qKiBUaGUgY2F0ZWdvcnkgdHlwZSAqL1xuZXhwb3J0IHR5cGUgQ2F0ZWdvcnkgPSBEYXRhYmFzZUlkZW50aWZpZXIgJiBIaWVyYXJjaGljYWxOb2RlICYgSGllcmFyY2hpY2FsVGVybU5vZGUgJiBNZW51SXRlbUxpbmthYmxlICYgTm9kZSAmIFRlcm1Ob2RlICYgVW5pZm9ybVJlc291cmNlSWRlbnRpZmlhYmxlICYge1xuICBfX3R5cGVuYW1lPzogJ0NhdGVnb3J5JztcbiAgLyoqIFRoZSBhbmNlc3RvcnMgb2YgdGhlIG5vZGUuIERlZmF1bHQgb3JkZXJlZCBhcyBsb3dlc3QgKGNsb3Nlc3QgdG8gdGhlIGNoaWxkKSB0byBoaWdoZXN0IChjbG9zZXN0IHRvIHRoZSByb290KS4gKi9cbiAgYW5jZXN0b3JzPzogTWF5YmU8Q2F0ZWdvcnlUb0FuY2VzdG9yc0NhdGVnb3J5Q29ubmVjdGlvbj47XG4gIC8qKlxuICAgKiBUaGUgaWQgZmllbGQgbWF0Y2hlcyB0aGUgV1BfUG9zdC0mZ3Q7SUQgZmllbGQuXG4gICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgZGF0YWJhc2VJZFxuICAgKi9cbiAgY2F0ZWdvcnlJZD86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIGNhdGVnb3J5IHR5cGUgYW5kIGl0cyBjaGlsZHJlbiBjYXRlZ29yaWVzLiAqL1xuICBjaGlsZHJlbj86IE1heWJlPENhdGVnb3J5VG9DYXRlZ29yeUNvbm5lY3Rpb24+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBDYXRlZ29yeSB0eXBlIGFuZCB0aGUgQ29udGVudE5vZGUgdHlwZSAqL1xuICBjb250ZW50Tm9kZXM/OiBNYXliZTxDYXRlZ29yeVRvQ29udGVudE5vZGVDb25uZWN0aW9uPjtcbiAgLyoqIFRoZSBudW1iZXIgb2Ygb2JqZWN0cyBjb25uZWN0ZWQgdG8gdGhlIG9iamVjdCAqL1xuICBjb3VudD86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgdW5pcXVlIGlkZW50aWZpZXIgc3RvcmVkIGluIHRoZSBkYXRhYmFzZSAqL1xuICBkYXRhYmFzZUlkOiBTY2FsYXJzWydJbnQnXVsnb3V0cHV0J107XG4gIC8qKiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIG9iamVjdCAqL1xuICBkZXNjcmlwdGlvbj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFRlcm1Ob2RlIHR5cGUgYW5kIHRoZSBFbnF1ZXVlZFNjcmlwdCB0eXBlICovXG4gIGVucXVldWVkU2NyaXB0cz86IE1heWJlPFRlcm1Ob2RlVG9FbnF1ZXVlZFNjcmlwdENvbm5lY3Rpb24+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBUZXJtTm9kZSB0eXBlIGFuZCB0aGUgRW5xdWV1ZWRTdHlsZXNoZWV0IHR5cGUgKi9cbiAgZW5xdWV1ZWRTdHlsZXNoZWV0cz86IE1heWJlPFRlcm1Ob2RlVG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uPjtcbiAgLyoqIFRoZSB1bmlxdWUgcmVzb3VyY2UgaWRlbnRpZmllciBwYXRoICovXG4gIGlkOiBTY2FsYXJzWydJRCddWydvdXRwdXQnXTtcbiAgLyoqIFdoZXRoZXIgdGhlIG5vZGUgaXMgYSBDb250ZW50IE5vZGUgKi9cbiAgaXNDb250ZW50Tm9kZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZXRoZXIgdGhlIG9iamVjdCBpcyByZXN0cmljdGVkIGZyb20gdGhlIGN1cnJlbnQgdmlld2VyICovXG4gIGlzUmVzdHJpY3RlZD86IE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J10+O1xuICAvKiogV2hldGhlciB0aGUgbm9kZSBpcyBhIFRlcm0gKi9cbiAgaXNUZXJtTm9kZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFRoZSBsaW5rIHRvIHRoZSB0ZXJtICovXG4gIGxpbms/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGh1bWFuIGZyaWVuZGx5IG5hbWUgb2YgdGhlIG9iamVjdC4gKi9cbiAgbmFtZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIGNhdGVnb3J5IHR5cGUgYW5kIGl0cyBwYXJlbnQgY2F0ZWdvcnkuICovXG4gIHBhcmVudD86IE1heWJlPENhdGVnb3J5VG9QYXJlbnRDYXRlZ29yeUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIERhdGFiYXNlIGlkIG9mIHRoZSBwYXJlbnQgbm9kZSAqL1xuICBwYXJlbnREYXRhYmFzZUlkPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgcGFyZW50IG5vZGUuICovXG4gIHBhcmVudElkPzogTWF5YmU8U2NhbGFyc1snSUQnXVsnb3V0cHV0J10+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBDYXRlZ29yeSB0eXBlIGFuZCB0aGUgcG9zdCB0eXBlICovXG4gIHBvc3RzPzogTWF5YmU8Q2F0ZWdvcnlUb1Bvc3RDb25uZWN0aW9uPjtcbiAgLyoqIEFuIGFscGhhbnVtZXJpYyBpZGVudGlmaWVyIGZvciB0aGUgb2JqZWN0IHVuaXF1ZSB0byBpdHMgdHlwZS4gKi9cbiAgc2x1Zz86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIENhdGVnb3J5IHR5cGUgYW5kIHRoZSBUYXhvbm9teSB0eXBlICovXG4gIHRheG9ub215PzogTWF5YmU8Q2F0ZWdvcnlUb1RheG9ub215Q29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIG5hbWUgb2YgdGhlIHRheG9ub215IHRoYXQgdGhlIG9iamVjdCBpcyBhc3NvY2lhdGVkIHdpdGggKi9cbiAgdGF4b25vbXlOYW1lPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBJRCBvZiB0aGUgdGVybSBncm91cCB0aGF0IHRoaXMgdGVybSBvYmplY3QgYmVsb25ncyB0byAqL1xuICB0ZXJtR3JvdXBJZD86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgdGF4b25vbXkgSUQgdGhhdCB0aGUgb2JqZWN0IGlzIGFzc29jaWF0ZWQgd2l0aCAqL1xuICB0ZXJtVGF4b25vbXlJZD86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgdW5pcXVlIHJlc291cmNlIGlkZW50aWZpZXIgcGF0aCAqL1xuICB1cmk/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuXG4vKiogVGhlIGNhdGVnb3J5IHR5cGUgKi9cbmV4cG9ydCB0eXBlIENhdGVnb3J5QW5jZXN0b3JzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbn07XG5cblxuLyoqIFRoZSBjYXRlZ29yeSB0eXBlICovXG5leHBvcnQgdHlwZSBDYXRlZ29yeUNoaWxkcmVuQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPENhdGVnb3J5VG9DYXRlZ29yeUNvbm5lY3Rpb25XaGVyZUFyZ3M+O1xufTtcblxuXG4vKiogVGhlIGNhdGVnb3J5IHR5cGUgKi9cbmV4cG9ydCB0eXBlIENhdGVnb3J5Q29udGVudE5vZGVzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPENhdGVnb3J5VG9Db250ZW50Tm9kZUNvbm5lY3Rpb25XaGVyZUFyZ3M+O1xufTtcblxuXG4vKiogVGhlIGNhdGVnb3J5IHR5cGUgKi9cbmV4cG9ydCB0eXBlIENhdGVnb3J5RW5xdWV1ZWRTY3JpcHRzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbn07XG5cblxuLyoqIFRoZSBjYXRlZ29yeSB0eXBlICovXG5leHBvcnQgdHlwZSBDYXRlZ29yeUVucXVldWVkU3R5bGVzaGVldHNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xufTtcblxuXG4vKiogVGhlIGNhdGVnb3J5IHR5cGUgKi9cbmV4cG9ydCB0eXBlIENhdGVnb3J5UG9zdHNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICB3aGVyZT86IElucHV0TWF5YmU8Q2F0ZWdvcnlUb1Bvc3RDb25uZWN0aW9uV2hlcmVBcmdzPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIHRvIGNhdGVnb3J5IE5vZGVzICovXG5leHBvcnQgdHlwZSBDYXRlZ29yeUNvbm5lY3Rpb24gPSB7XG4gIC8qKiBBIGxpc3Qgb2YgZWRnZXMgKHJlbGF0aW9uYWwgY29udGV4dCkgYmV0d2VlbiBSb290UXVlcnkgYW5kIGNvbm5lY3RlZCBjYXRlZ29yeSBOb2RlcyAqL1xuICBlZGdlczogQXJyYXk8Q2F0ZWdvcnlDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBBIGxpc3Qgb2YgY29ubmVjdGVkIGNhdGVnb3J5IE5vZGVzICovXG4gIG5vZGVzOiBBcnJheTxDYXRlZ29yeT47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IENhdGVnb3J5Q29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEVkZ2UgYmV0d2VlbiBhIE5vZGUgYW5kIGEgY29ubmVjdGVkIGNhdGVnb3J5ICovXG5leHBvcnQgdHlwZSBDYXRlZ29yeUNvbm5lY3Rpb25FZGdlID0ge1xuICAvKiogT3BhcXVlIHJlZmVyZW5jZSB0byB0aGUgbm9kZXMgcG9zaXRpb24gaW4gdGhlIGNvbm5lY3Rpb24uIFZhbHVlIGNhbiBiZSB1c2VkIHdpdGggcGFnaW5hdGlvbiBhcmdzLiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGNvbm5lY3RlZCBjYXRlZ29yeSBOb2RlICovXG4gIG5vZGU6IENhdGVnb3J5O1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgY29ubmVjdGVkIENhdGVnb3J5Q29ubmVjdGlvbkVkZ2UgKi9cbmV4cG9ydCB0eXBlIENhdGVnb3J5Q29ubmVjdGlvblBhZ2VJbmZvID0ge1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIFRoZSBUeXBlIG9mIElkZW50aWZpZXIgdXNlZCB0byBmZXRjaCBhIHNpbmdsZSByZXNvdXJjZS4gRGVmYXVsdCBpcyBJRC4gKi9cbmV4cG9ydCBlbnVtIENhdGVnb3J5SWRUeXBlIHtcbiAgLyoqIFRoZSBEYXRhYmFzZSBJRCBmb3IgdGhlIG5vZGUgKi9cbiAgRGF0YWJhc2VJZCA9ICdEQVRBQkFTRV9JRCcsXG4gIC8qKiBUaGUgaGFzaGVkIEdsb2JhbCBJRCAqL1xuICBJZCA9ICdJRCcsXG4gIC8qKiBUaGUgbmFtZSBvZiB0aGUgbm9kZSAqL1xuICBOYW1lID0gJ05BTUUnLFxuICAvKiogVXJsIGZyaWVuZGx5IG5hbWUgb2YgdGhlIG5vZGUgKi9cbiAgU2x1ZyA9ICdTTFVHJyxcbiAgLyoqIFRoZSBVUkkgZm9yIHRoZSBub2RlICovXG4gIFVyaSA9ICdVUkknXG59XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIENhdGVnb3J5IHR5cGUgYW5kIHRoZSBjYXRlZ29yeSB0eXBlICovXG5leHBvcnQgdHlwZSBDYXRlZ29yeVRvQW5jZXN0b3JzQ2F0ZWdvcnlDb25uZWN0aW9uID0gQ2F0ZWdvcnlDb25uZWN0aW9uICYgQ29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdDYXRlZ29yeVRvQW5jZXN0b3JzQ2F0ZWdvcnlDb25uZWN0aW9uJztcbiAgLyoqIEVkZ2VzIGZvciB0aGUgQ2F0ZWdvcnlUb0FuY2VzdG9yc0NhdGVnb3J5Q29ubmVjdGlvbiBjb25uZWN0aW9uICovXG4gIGVkZ2VzOiBBcnJheTxDYXRlZ29yeVRvQW5jZXN0b3JzQ2F0ZWdvcnlDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxDYXRlZ29yeT47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IENhdGVnb3J5VG9BbmNlc3RvcnNDYXRlZ29yeUNvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBBbiBlZGdlIGluIGEgY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgQ2F0ZWdvcnlUb0FuY2VzdG9yc0NhdGVnb3J5Q29ubmVjdGlvbkVkZ2UgPSBDYXRlZ29yeUNvbm5lY3Rpb25FZGdlICYgRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdDYXRlZ29yeVRvQW5jZXN0b3JzQ2F0ZWdvcnlDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogQ2F0ZWdvcnk7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtDYXRlZ29yeVRvQW5jZXN0b3JzQ2F0ZWdvcnlDb25uZWN0aW9uJnF1b3Q7ICovXG5leHBvcnQgdHlwZSBDYXRlZ29yeVRvQW5jZXN0b3JzQ2F0ZWdvcnlDb25uZWN0aW9uUGFnZUluZm8gPSBDYXRlZ29yeUNvbm5lY3Rpb25QYWdlSW5mbyAmIFBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdDYXRlZ29yeVRvQW5jZXN0b3JzQ2F0ZWdvcnlDb25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgQ2F0ZWdvcnkgdHlwZSBhbmQgdGhlIGNhdGVnb3J5IHR5cGUgKi9cbmV4cG9ydCB0eXBlIENhdGVnb3J5VG9DYXRlZ29yeUNvbm5lY3Rpb24gPSBDYXRlZ29yeUNvbm5lY3Rpb24gJiBDb25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ0NhdGVnb3J5VG9DYXRlZ29yeUNvbm5lY3Rpb24nO1xuICAvKiogRWRnZXMgZm9yIHRoZSBDYXRlZ29yeVRvQ2F0ZWdvcnlDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbiAgZWRnZXM6IEFycmF5PENhdGVnb3J5VG9DYXRlZ29yeUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBub2RlcyBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZXM6IEFycmF5PENhdGVnb3J5PjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogQ2F0ZWdvcnlUb0NhdGVnb3J5Q29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEFuIGVkZ2UgaW4gYSBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBDYXRlZ29yeVRvQ2F0ZWdvcnlDb25uZWN0aW9uRWRnZSA9IENhdGVnb3J5Q29ubmVjdGlvbkVkZ2UgJiBFZGdlICYge1xuICBfX3R5cGVuYW1lPzogJ0NhdGVnb3J5VG9DYXRlZ29yeUNvbm5lY3Rpb25FZGdlJztcbiAgLyoqIEEgY3Vyc29yIGZvciB1c2UgaW4gcGFnaW5hdGlvbiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGl0ZW0gYXQgdGhlIGVuZCBvZiB0aGUgZWRnZSAqL1xuICBub2RlOiBDYXRlZ29yeTtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlICZxdW90O0NhdGVnb3J5VG9DYXRlZ29yeUNvbm5lY3Rpb24mcXVvdDsgKi9cbmV4cG9ydCB0eXBlIENhdGVnb3J5VG9DYXRlZ29yeUNvbm5lY3Rpb25QYWdlSW5mbyA9IENhdGVnb3J5Q29ubmVjdGlvblBhZ2VJbmZvICYgUGFnZUluZm8gJiBXcFBhZ2VJbmZvICYge1xuICBfX3R5cGVuYW1lPzogJ0NhdGVnb3J5VG9DYXRlZ29yeUNvbm5lY3Rpb25QYWdlSW5mbyc7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogQXJndW1lbnRzIGZvciBmaWx0ZXJpbmcgdGhlIENhdGVnb3J5VG9DYXRlZ29yeUNvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgQ2F0ZWdvcnlUb0NhdGVnb3J5Q29ubmVjdGlvbldoZXJlQXJncyA9IHtcbiAgLyoqIFVuaXF1ZSBjYWNoZSBrZXkgdG8gYmUgcHJvZHVjZWQgd2hlbiB0aGlzIHF1ZXJ5IGlzIHN0b3JlZCBpbiBhbiBvYmplY3QgY2FjaGUuIERlZmF1bHQgaXMgJ2NvcmUnLiAqL1xuICBjYWNoZURvbWFpbj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGVybSBJRCB0byByZXRyaWV2ZSBjaGlsZCB0ZXJtcyBvZi4gSWYgbXVsdGlwbGUgdGF4b25vbWllcyBhcmUgcGFzc2VkLCAkY2hpbGRfb2YgaXMgaWdub3JlZC4gRGVmYXVsdCAwLiAqL1xuICBjaGlsZE9mPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBUcnVlIHRvIGxpbWl0IHJlc3VsdHMgdG8gdGVybXMgdGhhdCBoYXZlIG5vIGNoaWxkcmVuLiBUaGlzIHBhcmFtZXRlciBoYXMgbm8gZWZmZWN0IG9uIG5vbi1oaWVyYXJjaGljYWwgdGF4b25vbWllcy4gRGVmYXVsdCBmYWxzZS4gKi9cbiAgY2hpbGRsZXNzPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogUmV0cmlldmUgdGVybXMgd2hlcmUgdGhlIGRlc2NyaXB0aW9uIGlzIExJS0UgdGhlIGlucHV0IHZhbHVlLiBEZWZhdWx0IGVtcHR5LiAqL1xuICBkZXNjcmlwdGlvbkxpa2U/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIHRlcm0gaWRzIHRvIGV4Y2x1ZGUuIElmICRpbmNsdWRlIGlzIG5vbi1lbXB0eSwgJGV4Y2x1ZGUgaXMgaWdub3JlZC4gRGVmYXVsdCBlbXB0eSBhcnJheS4gKi9cbiAgZXhjbHVkZT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgdGVybSBpZHMgdG8gZXhjbHVkZSBhbG9uZyB3aXRoIGFsbCBvZiB0aGVpciBkZXNjZW5kYW50IHRlcm1zLiBJZiAkaW5jbHVkZSBpcyBub24tZW1wdHksICRleGNsdWRlX3RyZWUgaXMgaWdub3JlZC4gRGVmYXVsdCBlbXB0eSBhcnJheS4gKi9cbiAgZXhjbHVkZVRyZWU/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFdoZXRoZXIgdG8gaGlkZSB0ZXJtcyBub3QgYXNzaWduZWQgdG8gYW55IHBvc3RzLiBBY2NlcHRzIHRydWUgb3IgZmFsc2UuIERlZmF1bHQgZmFsc2UgKi9cbiAgaGlkZUVtcHR5PzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogV2hldGhlciB0byBpbmNsdWRlIHRlcm1zIHRoYXQgaGF2ZSBub24tZW1wdHkgZGVzY2VuZGFudHMgKGV2ZW4gaWYgJGhpZGVfZW1wdHkgaXMgc2V0IHRvIHRydWUpLiBEZWZhdWx0IHRydWUuICovXG4gIGhpZXJhcmNoaWNhbD86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIHRlcm0gaWRzIHRvIGluY2x1ZGUuIERlZmF1bHQgZW1wdHkgYXJyYXkuICovXG4gIGluY2x1ZGU/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIG5hbWVzIHRvIHJldHVybiB0ZXJtKHMpIGZvci4gRGVmYXVsdCBlbXB0eS4gKi9cbiAgbmFtZT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFJldHJpZXZlIHRlcm1zIHdoZXJlIHRoZSBuYW1lIGlzIExJS0UgdGhlIGlucHV0IHZhbHVlLiBEZWZhdWx0IGVtcHR5LiAqL1xuICBuYW1lTGlrZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2Ygb2JqZWN0IElEcy4gUmVzdWx0cyB3aWxsIGJlIGxpbWl0ZWQgdG8gdGVybXMgYXNzb2NpYXRlZCB3aXRoIHRoZXNlIG9iamVjdHMuICovXG4gIG9iamVjdElkcz86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogRGlyZWN0aW9uIHRoZSBjb25uZWN0aW9uIHNob3VsZCBiZSBvcmRlcmVkIGluICovXG4gIG9yZGVyPzogSW5wdXRNYXliZTxPcmRlckVudW0+O1xuICAvKiogRmllbGQocykgdG8gb3JkZXIgdGVybXMgYnkuIERlZmF1bHRzIHRvICduYW1lJy4gKi9cbiAgb3JkZXJieT86IElucHV0TWF5YmU8VGVybU9iamVjdHNDb25uZWN0aW9uT3JkZXJieUVudW0+O1xuICAvKiogV2hldGhlciB0byBwYWQgdGhlIHF1YW50aXR5IG9mIGEgdGVybSdzIGNoaWxkcmVuIGluIHRoZSBxdWFudGl0eSBvZiBlYWNoIHRlcm0ncyBcImNvdW50XCIgb2JqZWN0IHZhcmlhYmxlLiBEZWZhdWx0IGZhbHNlLiAqL1xuICBwYWRDb3VudHM/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBQYXJlbnQgdGVybSBJRCB0byByZXRyaWV2ZSBkaXJlY3QtY2hpbGQgdGVybXMgb2YuIERlZmF1bHQgZW1wdHkuICovXG4gIHBhcmVudD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogU2VhcmNoIGNyaXRlcmlhIHRvIG1hdGNoIHRlcm1zLiBXaWxsIGJlIFNRTC1mb3JtYXR0ZWQgd2l0aCB3aWxkY2FyZHMgYmVmb3JlIGFuZCBhZnRlci4gRGVmYXVsdCBlbXB0eS4gKi9cbiAgc2VhcmNoPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBzbHVncyB0byByZXR1cm4gdGVybShzKSBmb3IuIERlZmF1bHQgZW1wdHkuICovXG4gIHNsdWc/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiB0ZXJtIHRheG9ub215IElEcywgdG8gbWF0Y2ggd2hlbiBxdWVyeWluZyB0ZXJtcy4gKi9cbiAgdGVybVRheG9ub21JZD86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgdGVybSB0YXhvbm9teSBJRHMsIHRvIG1hdGNoIHdoZW4gcXVlcnlpbmcgdGVybXMuICovXG4gIHRlcm1UYXhvbm9teUlkPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBXaGV0aGVyIHRvIHByaW1lIG1ldGEgY2FjaGVzIGZvciBtYXRjaGVkIHRlcm1zLiBEZWZhdWx0IHRydWUuICovXG4gIHVwZGF0ZVRlcm1NZXRhQ2FjaGU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBDYXRlZ29yeSB0eXBlIGFuZCB0aGUgQ29udGVudE5vZGUgdHlwZSAqL1xuZXhwb3J0IHR5cGUgQ2F0ZWdvcnlUb0NvbnRlbnROb2RlQ29ubmVjdGlvbiA9IENvbm5lY3Rpb24gJiBDb250ZW50Tm9kZUNvbm5lY3Rpb24gJiB7XG4gIF9fdHlwZW5hbWU/OiAnQ2F0ZWdvcnlUb0NvbnRlbnROb2RlQ29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIENhdGVnb3J5VG9Db250ZW50Tm9kZUNvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8Q2F0ZWdvcnlUb0NvbnRlbnROb2RlQ29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIG5vZGVzIG9mIHRoZSBjb25uZWN0aW9uLCB3aXRob3V0IHRoZSBlZGdlcyAqL1xuICBub2RlczogQXJyYXk8Q29udGVudE5vZGU+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBDYXRlZ29yeVRvQ29udGVudE5vZGVDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIENhdGVnb3J5VG9Db250ZW50Tm9kZUNvbm5lY3Rpb25FZGdlID0gQ29udGVudE5vZGVDb25uZWN0aW9uRWRnZSAmIEVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnQ2F0ZWdvcnlUb0NvbnRlbnROb2RlQ29ubmVjdGlvbkVkZ2UnO1xuICAvKiogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaXRlbSBhdCB0aGUgZW5kIG9mIHRoZSBlZGdlICovXG4gIG5vZGU6IENvbnRlbnROb2RlO1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgJnF1b3Q7Q2F0ZWdvcnlUb0NvbnRlbnROb2RlQ29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgQ2F0ZWdvcnlUb0NvbnRlbnROb2RlQ29ubmVjdGlvblBhZ2VJbmZvID0gQ29udGVudE5vZGVDb25uZWN0aW9uUGFnZUluZm8gJiBQYWdlSW5mbyAmIFdwUGFnZUluZm8gJiB7XG4gIF9fdHlwZW5hbWU/OiAnQ2F0ZWdvcnlUb0NvbnRlbnROb2RlQ29ubmVjdGlvblBhZ2VJbmZvJztcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBBcmd1bWVudHMgZm9yIGZpbHRlcmluZyB0aGUgQ2F0ZWdvcnlUb0NvbnRlbnROb2RlQ29ubmVjdGlvbiBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBDYXRlZ29yeVRvQ29udGVudE5vZGVDb25uZWN0aW9uV2hlcmVBcmdzID0ge1xuICAvKiogVGhlIFR5cGVzIG9mIGNvbnRlbnQgdG8gZmlsdGVyICovXG4gIGNvbnRlbnRUeXBlcz86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxDb250ZW50VHlwZXNPZkNhdGVnb3J5RW51bT4+PjtcbiAgLyoqIEZpbHRlciB0aGUgY29ubmVjdGlvbiBiYXNlZCBvbiBkYXRlcyAqL1xuICBkYXRlUXVlcnk/OiBJbnB1dE1heWJlPERhdGVRdWVyeUlucHV0PjtcbiAgLyoqIFRydWUgZm9yIG9iamVjdHMgd2l0aCBwYXNzd29yZHM7IEZhbHNlIGZvciBvYmplY3RzIHdpdGhvdXQgcGFzc3dvcmRzOyBudWxsIGZvciBhbGwgb2JqZWN0cyB3aXRoIG9yIHdpdGhvdXQgcGFzc3dvcmRzICovXG4gIGhhc1Bhc3N3b3JkPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmaWMgZGF0YWJhc2UgSUQgb2YgdGhlIG9iamVjdCAqL1xuICBpZD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgSURzIGZvciB0aGUgb2JqZWN0cyB0byByZXRyaWV2ZSAqL1xuICBpbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogR2V0IG9iamVjdHMgd2l0aCBhIHNwZWNpZmljIG1pbWVUeXBlIHByb3BlcnR5ICovXG4gIG1pbWVUeXBlPzogSW5wdXRNYXliZTxNaW1lVHlwZUVudW0+O1xuICAvKiogU2x1ZyAvIHBvc3RfbmFtZSBvZiB0aGUgb2JqZWN0ICovXG4gIG5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFNwZWNpZnkgb2JqZWN0cyB0byByZXRyaWV2ZS4gVXNlIHNsdWdzICovXG4gIG5hbWVJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNwZWNpZnkgSURzIE5PVCB0byByZXRyaWV2ZS4gSWYgdGhpcyBpcyB1c2VkIGluIHRoZSBzYW1lIHF1ZXJ5IGFzIFwiaW5cIiwgaXQgd2lsbCBiZSBpZ25vcmVkICovXG4gIG5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBXaGF0IHBhcmFtZXRlciB0byB1c2UgdG8gb3JkZXIgdGhlIG9iamVjdHMgYnkuICovXG4gIG9yZGVyYnk/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8UG9zdE9iamVjdHNDb25uZWN0aW9uT3JkZXJieUlucHV0Pj4+O1xuICAvKiogVXNlIElEIHRvIHJldHVybiBvbmx5IGNoaWxkcmVuLiBVc2UgMCB0byByZXR1cm4gb25seSB0b3AtbGV2ZWwgaXRlbXMgKi9cbiAgcGFyZW50PzogSW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPjtcbiAgLyoqIFNwZWNpZnkgb2JqZWN0cyB3aG9zZSBwYXJlbnQgaXMgaW4gYW4gYXJyYXkgKi9cbiAgcGFyZW50SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNwZWNpZnkgcG9zdHMgd2hvc2UgcGFyZW50IGlzIG5vdCBpbiBhbiBhcnJheSAqL1xuICBwYXJlbnROb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogU2hvdyBwb3N0cyB3aXRoIGEgc3BlY2lmaWMgcGFzc3dvcmQuICovXG4gIHBhc3N3b3JkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBTaG93IFBvc3RzIGJhc2VkIG9uIGEga2V5d29yZCBzZWFyY2ggKi9cbiAgc2VhcmNoPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBSZXRyaWV2ZSBwb3N0cyB3aGVyZSBwb3N0IHN0YXR1cyBpcyBpbiBhbiBhcnJheS4gKi9cbiAgc3RhdGk/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+Pj47XG4gIC8qKiBTaG93IHBvc3RzIHdpdGggYSBzcGVjaWZpYyBzdGF0dXMuICovXG4gIHN0YXR1cz86IElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+O1xuICAvKiogVGl0bGUgb2YgdGhlIG9iamVjdCAqL1xuICB0aXRsZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgQ2F0ZWdvcnkgdHlwZSBhbmQgdGhlIGNhdGVnb3J5IHR5cGUgKi9cbmV4cG9ydCB0eXBlIENhdGVnb3J5VG9QYXJlbnRDYXRlZ29yeUNvbm5lY3Rpb25FZGdlID0gQ2F0ZWdvcnlDb25uZWN0aW9uRWRnZSAmIEVkZ2UgJiBPbmVUb09uZUNvbm5lY3Rpb24gJiB7XG4gIF9fdHlwZW5hbWU/OiAnQ2F0ZWdvcnlUb1BhcmVudENhdGVnb3J5Q29ubmVjdGlvbkVkZ2UnO1xuICAvKiogT3BhcXVlIHJlZmVyZW5jZSB0byB0aGUgbm9kZXMgcG9zaXRpb24gaW4gdGhlIGNvbm5lY3Rpb24uIFZhbHVlIGNhbiBiZSB1c2VkIHdpdGggcGFnaW5hdGlvbiBhcmdzLiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIG5vZGUgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGU6IENhdGVnb3J5O1xufTtcblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgQ2F0ZWdvcnkgdHlwZSBhbmQgdGhlIHBvc3QgdHlwZSAqL1xuZXhwb3J0IHR5cGUgQ2F0ZWdvcnlUb1Bvc3RDb25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIFBvc3RDb25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ0NhdGVnb3J5VG9Qb3N0Q29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIENhdGVnb3J5VG9Qb3N0Q29ubmVjdGlvbiBjb25uZWN0aW9uICovXG4gIGVkZ2VzOiBBcnJheTxDYXRlZ29yeVRvUG9zdENvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBub2RlcyBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZXM6IEFycmF5PFBvc3Q+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBDYXRlZ29yeVRvUG9zdENvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBBbiBlZGdlIGluIGEgY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgQ2F0ZWdvcnlUb1Bvc3RDb25uZWN0aW9uRWRnZSA9IEVkZ2UgJiBQb3N0Q29ubmVjdGlvbkVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnQ2F0ZWdvcnlUb1Bvc3RDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogUG9zdDtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlICZxdW90O0NhdGVnb3J5VG9Qb3N0Q29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgQ2F0ZWdvcnlUb1Bvc3RDb25uZWN0aW9uUGFnZUluZm8gPSBQYWdlSW5mbyAmIFBvc3RDb25uZWN0aW9uUGFnZUluZm8gJiBXcFBhZ2VJbmZvICYge1xuICBfX3R5cGVuYW1lPzogJ0NhdGVnb3J5VG9Qb3N0Q29ubmVjdGlvblBhZ2VJbmZvJztcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBBcmd1bWVudHMgZm9yIGZpbHRlcmluZyB0aGUgQ2F0ZWdvcnlUb1Bvc3RDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIENhdGVnb3J5VG9Qb3N0Q29ubmVjdGlvbldoZXJlQXJncyA9IHtcbiAgLyoqIFRoZSB1c2VyIHRoYXQncyBjb25uZWN0ZWQgYXMgdGhlIGF1dGhvciBvZiB0aGUgb2JqZWN0LiBVc2UgdGhlIHVzZXJJZCBmb3IgdGhlIGF1dGhvciBvYmplY3QuICovXG4gIGF1dGhvcj86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogRmluZCBvYmplY3RzIGNvbm5lY3RlZCB0byBhdXRob3IocykgaW4gdGhlIGFycmF5IG9mIGF1dGhvcidzIHVzZXJJZHMgKi9cbiAgYXV0aG9ySW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEZpbmQgb2JqZWN0cyBjb25uZWN0ZWQgdG8gdGhlIGF1dGhvciBieSB0aGUgYXV0aG9yJ3MgbmljZW5hbWUgKi9cbiAgYXV0aG9yTmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogRmluZCBvYmplY3RzIE5PVCBjb25uZWN0ZWQgdG8gYXV0aG9yKHMpIGluIHRoZSBhcnJheSBvZiBhdXRob3IncyB1c2VySWRzICovXG4gIGF1dGhvck5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBDYXRlZ29yeSBJRCAqL1xuICBjYXRlZ29yeUlkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBjYXRlZ29yeSBJRHMsIHVzZWQgdG8gZGlzcGxheSBvYmplY3RzIGZyb20gb25lIGNhdGVnb3J5IE9SIGFub3RoZXIgKi9cbiAgY2F0ZWdvcnlJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogVXNlIENhdGVnb3J5IFNsdWcgKi9cbiAgY2F0ZWdvcnlOYW1lPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBjYXRlZ29yeSBJRHMsIHVzZWQgdG8gZGlzcGxheSBvYmplY3RzIGZyb20gb25lIGNhdGVnb3J5IE9SIGFub3RoZXIgKi9cbiAgY2F0ZWdvcnlOb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogRmlsdGVyIHRoZSBjb25uZWN0aW9uIGJhc2VkIG9uIGRhdGVzICovXG4gIGRhdGVRdWVyeT86IElucHV0TWF5YmU8RGF0ZVF1ZXJ5SW5wdXQ+O1xuICAvKiogVHJ1ZSBmb3Igb2JqZWN0cyB3aXRoIHBhc3N3b3JkczsgRmFsc2UgZm9yIG9iamVjdHMgd2l0aG91dCBwYXNzd29yZHM7IG51bGwgZm9yIGFsbCBvYmplY3RzIHdpdGggb3Igd2l0aG91dCBwYXNzd29yZHMgKi9cbiAgaGFzUGFzc3dvcmQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBTcGVjaWZpYyBkYXRhYmFzZSBJRCBvZiB0aGUgb2JqZWN0ICovXG4gIGlkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBJRHMgZm9yIHRoZSBvYmplY3RzIHRvIHJldHJpZXZlICovXG4gIGluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBHZXQgb2JqZWN0cyB3aXRoIGEgc3BlY2lmaWMgbWltZVR5cGUgcHJvcGVydHkgKi9cbiAgbWltZVR5cGU/OiBJbnB1dE1heWJlPE1pbWVUeXBlRW51bT47XG4gIC8qKiBTbHVnIC8gcG9zdF9uYW1lIG9mIHRoZSBvYmplY3QgKi9cbiAgbmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmeSBvYmplY3RzIHRvIHJldHJpZXZlLiBVc2Ugc2x1Z3MgKi9cbiAgbmFtZUluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogU3BlY2lmeSBJRHMgTk9UIHRvIHJldHJpZXZlLiBJZiB0aGlzIGlzIHVzZWQgaW4gdGhlIHNhbWUgcXVlcnkgYXMgXCJpblwiLCBpdCB3aWxsIGJlIGlnbm9yZWQgKi9cbiAgbm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFdoYXQgcGFyYW1ldGVyIHRvIHVzZSB0byBvcmRlciB0aGUgb2JqZWN0cyBieS4gKi9cbiAgb3JkZXJieT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxQb3N0T2JqZWN0c0Nvbm5lY3Rpb25PcmRlcmJ5SW5wdXQ+Pj47XG4gIC8qKiBVc2UgSUQgdG8gcmV0dXJuIG9ubHkgY2hpbGRyZW4uIFVzZSAwIHRvIHJldHVybiBvbmx5IHRvcC1sZXZlbCBpdGVtcyAqL1xuICBwYXJlbnQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmeSBvYmplY3RzIHdob3NlIHBhcmVudCBpcyBpbiBhbiBhcnJheSAqL1xuICBwYXJlbnRJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogU3BlY2lmeSBwb3N0cyB3aG9zZSBwYXJlbnQgaXMgbm90IGluIGFuIGFycmF5ICovXG4gIHBhcmVudE5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTaG93IHBvc3RzIHdpdGggYSBzcGVjaWZpYyBwYXNzd29yZC4gKi9cbiAgcGFzc3dvcmQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFNob3cgUG9zdHMgYmFzZWQgb24gYSBrZXl3b3JkIHNlYXJjaCAqL1xuICBzZWFyY2g/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFJldHJpZXZlIHBvc3RzIHdoZXJlIHBvc3Qgc3RhdHVzIGlzIGluIGFuIGFycmF5LiAqL1xuICBzdGF0aT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxQb3N0U3RhdHVzRW51bT4+PjtcbiAgLyoqIFNob3cgcG9zdHMgd2l0aCBhIHNwZWNpZmljIHN0YXR1cy4gKi9cbiAgc3RhdHVzPzogSW5wdXRNYXliZTxQb3N0U3RhdHVzRW51bT47XG4gIC8qKiBUYWcgU2x1ZyAqL1xuICB0YWc/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFVzZSBUYWcgSUQgKi9cbiAgdGFnSWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIHRhZyBJRHMsIHVzZWQgdG8gZGlzcGxheSBvYmplY3RzIGZyb20gb25lIHRhZyBPUiBhbm90aGVyICovXG4gIHRhZ0luPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiB0YWcgSURzLCB1c2VkIHRvIGRpc3BsYXkgb2JqZWN0cyBmcm9tIG9uZSB0YWcgT1IgYW5vdGhlciAqL1xuICB0YWdOb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgdGFnIHNsdWdzLCB1c2VkIHRvIGRpc3BsYXkgb2JqZWN0cyBmcm9tIG9uZSB0YWcgQU5EIGFub3RoZXIgKi9cbiAgdGFnU2x1Z0FuZD86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIHRhZyBzbHVncywgdXNlZCB0byBpbmNsdWRlIG9iamVjdHMgaW4gQU5ZIHNwZWNpZmllZCB0YWdzICovXG4gIHRhZ1NsdWdJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFRpdGxlIG9mIHRoZSBvYmplY3QgKi9cbiAgdGl0bGU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIENhdGVnb3J5IHR5cGUgYW5kIHRoZSBUYXhvbm9teSB0eXBlICovXG5leHBvcnQgdHlwZSBDYXRlZ29yeVRvVGF4b25vbXlDb25uZWN0aW9uRWRnZSA9IEVkZ2UgJiBPbmVUb09uZUNvbm5lY3Rpb24gJiBUYXhvbm9teUNvbm5lY3Rpb25FZGdlICYge1xuICBfX3R5cGVuYW1lPzogJ0NhdGVnb3J5VG9UYXhvbm9teUNvbm5lY3Rpb25FZGdlJztcbiAgLyoqIE9wYXF1ZSByZWZlcmVuY2UgdG8gdGhlIG5vZGVzIHBvc2l0aW9uIGluIHRoZSBjb25uZWN0aW9uLiBWYWx1ZSBjYW4gYmUgdXNlZCB3aXRoIHBhZ2luYXRpb24gYXJncy4gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBub2RlIG9mIHRoZSBjb25uZWN0aW9uLCB3aXRob3V0IHRoZSBlZGdlcyAqL1xuICBub2RlOiBUYXhvbm9teTtcbn07XG5cbi8qKiBBIENvbW1lbnQgb2JqZWN0ICovXG5leHBvcnQgdHlwZSBDb21tZW50ID0gRGF0YWJhc2VJZGVudGlmaWVyICYgTm9kZSAmIHtcbiAgX190eXBlbmFtZT86ICdDb21tZW50JztcbiAgLyoqIFVzZXIgYWdlbnQgdXNlZCB0byBwb3N0IHRoZSBjb21tZW50LiBUaGlzIGZpZWxkIGlzIGVxdWl2YWxlbnQgdG8gV1BfQ29tbWVudC0mZ3Q7Y29tbWVudF9hZ2VudCBhbmQgdGhlIHZhbHVlIG1hdGNoaW5nIHRoZSAmcXVvdDtjb21tZW50X2FnZW50JnF1b3Q7IGNvbHVtbiBpbiBTUUwuICovXG4gIGFnZW50PzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqXG4gICAqIFRoZSBhcHByb3ZhbCBzdGF0dXMgb2YgdGhlIGNvbW1lbnQuIFRoaXMgZmllbGQgaXMgZXF1aXZhbGVudCB0byBXUF9Db21tZW50LSZndDtjb21tZW50X2FwcHJvdmVkIGFuZCB0aGUgdmFsdWUgbWF0Y2hpbmcgdGhlICZxdW90O2NvbW1lbnRfYXBwcm92ZWQmcXVvdDsgY29sdW1uIGluIFNRTC5cbiAgICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgYHN0YXR1c2AgZmllbGRcbiAgICovXG4gIGFwcHJvdmVkPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgYXV0aG9yIG9mIHRoZSBjb21tZW50ICovXG4gIGF1dGhvcj86IE1heWJlPENvbW1lbnRUb0NvbW1lbnRlckNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIElQIGFkZHJlc3MgZm9yIHRoZSBhdXRob3IuIFRoaXMgZmllbGQgaXMgZXF1aXZhbGVudCB0byBXUF9Db21tZW50LSZndDtjb21tZW50X2F1dGhvcl9JUCBhbmQgdGhlIHZhbHVlIG1hdGNoaW5nIHRoZSAmcXVvdDtjb21tZW50X2F1dGhvcl9JUCZxdW90OyBjb2x1bW4gaW4gU1FMLiAqL1xuICBhdXRob3JJcD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKlxuICAgKiBJRCBmb3IgdGhlIGNvbW1lbnQsIHVuaXF1ZSBhbW9uZyBjb21tZW50cy5cbiAgICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBpbiBmYXZvciBvZiBkYXRhYmFzZUlkXG4gICAqL1xuICBjb21tZW50SWQ/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBDb21tZW50IHR5cGUgYW5kIHRoZSBDb250ZW50Tm9kZSB0eXBlICovXG4gIGNvbW1lbnRlZE9uPzogTWF5YmU8Q29tbWVudFRvQ29udGVudE5vZGVDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBDb250ZW50IG9mIHRoZSBjb21tZW50LiBUaGlzIGZpZWxkIGlzIGVxdWl2YWxlbnQgdG8gV1BfQ29tbWVudC0mZ3Q7Y29tbWVudF9jb250ZW50IGFuZCB0aGUgdmFsdWUgbWF0Y2hpbmcgdGhlICZxdW90O2NvbW1lbnRfY29udGVudCZxdW90OyBjb2x1bW4gaW4gU1FMLiAqL1xuICBjb250ZW50PzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBzdG9yZWQgaW4gdGhlIGRhdGFiYXNlICovXG4gIGRhdGFiYXNlSWQ6IFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXTtcbiAgLyoqIERhdGUgdGhlIGNvbW1lbnQgd2FzIHBvc3RlZCBpbiBsb2NhbCB0aW1lLiBUaGlzIGZpZWxkIGlzIGVxdWl2YWxlbnQgdG8gV1BfQ29tbWVudC0mZ3Q7ZGF0ZSBhbmQgdGhlIHZhbHVlIG1hdGNoaW5nIHRoZSAmcXVvdDtkYXRlJnF1b3Q7IGNvbHVtbiBpbiBTUUwuICovXG4gIGRhdGU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogRGF0ZSB0aGUgY29tbWVudCB3YXMgcG9zdGVkIGluIEdNVC4gVGhpcyBmaWVsZCBpcyBlcXVpdmFsZW50IHRvIFdQX0NvbW1lbnQtJmd0O2RhdGVfZ210IGFuZCB0aGUgdmFsdWUgbWF0Y2hpbmcgdGhlICZxdW90O2RhdGVfZ210JnF1b3Q7IGNvbHVtbiBpbiBTUUwuICovXG4gIGRhdGVHbXQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgY29tbWVudCBvYmplY3QgKi9cbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddO1xuICAvKiogV2hldGhlciB0aGUgb2JqZWN0IGlzIHJlc3RyaWN0ZWQgZnJvbSB0aGUgY3VycmVudCB2aWV3ZXIgKi9cbiAgaXNSZXN0cmljdGVkPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBLYXJtYSB2YWx1ZSBmb3IgdGhlIGNvbW1lbnQuIFRoaXMgZmllbGQgaXMgZXF1aXZhbGVudCB0byBXUF9Db21tZW50LSZndDtjb21tZW50X2thcm1hIGFuZCB0aGUgdmFsdWUgbWF0Y2hpbmcgdGhlICZxdW90O2NvbW1lbnRfa2FybWEmcXVvdDsgY29sdW1uIGluIFNRTC4gKi9cbiAga2FybWE/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBDb21tZW50IHR5cGUgYW5kIHRoZSBDb21tZW50IHR5cGUgKi9cbiAgcGFyZW50PzogTWF5YmU8Q29tbWVudFRvUGFyZW50Q29tbWVudENvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBkYXRhYmFzZSBpZCBvZiB0aGUgcGFyZW50IGNvbW1lbnQgbm9kZSBvciBudWxsIGlmIGl0IGlzIHRoZSByb290IGNvbW1lbnQgKi9cbiAgcGFyZW50RGF0YWJhc2VJZD86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgZ2xvYmFsbHkgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIHBhcmVudCBjb21tZW50IG5vZGUuICovXG4gIHBhcmVudElkPzogTWF5YmU8U2NhbGFyc1snSUQnXVsnb3V0cHV0J10+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBDb21tZW50IHR5cGUgYW5kIHRoZSBDb21tZW50IHR5cGUgKi9cbiAgcmVwbGllcz86IE1heWJlPENvbW1lbnRUb0NvbW1lbnRDb25uZWN0aW9uPjtcbiAgLyoqIFRoZSBhcHByb3ZhbCBzdGF0dXMgb2YgdGhlIGNvbW1lbnQuIFRoaXMgZmllbGQgaXMgZXF1aXZhbGVudCB0byBXUF9Db21tZW50LSZndDtjb21tZW50X2FwcHJvdmVkIGFuZCB0aGUgdmFsdWUgbWF0Y2hpbmcgdGhlICZxdW90O2NvbW1lbnRfYXBwcm92ZWQmcXVvdDsgY29sdW1uIGluIFNRTC4gKi9cbiAgc3RhdHVzPzogTWF5YmU8Q29tbWVudFN0YXR1c0VudW0+O1xuICAvKiogVHlwZSBvZiBjb21tZW50LiBUaGlzIGZpZWxkIGlzIGVxdWl2YWxlbnQgdG8gV1BfQ29tbWVudC0mZ3Q7Y29tbWVudF90eXBlIGFuZCB0aGUgdmFsdWUgbWF0Y2hpbmcgdGhlICZxdW90O2NvbW1lbnRfdHlwZSZxdW90OyBjb2x1bW4gaW4gU1FMLiAqL1xuICB0eXBlPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cblxuLyoqIEEgQ29tbWVudCBvYmplY3QgKi9cbmV4cG9ydCB0eXBlIENvbW1lbnRDb250ZW50QXJncyA9IHtcbiAgZm9ybWF0PzogSW5wdXRNYXliZTxQb3N0T2JqZWN0RmllbGRGb3JtYXRFbnVtPjtcbn07XG5cblxuLyoqIEEgQ29tbWVudCBvYmplY3QgKi9cbmV4cG9ydCB0eXBlIENvbW1lbnRQYXJlbnRBcmdzID0ge1xuICB3aGVyZT86IElucHV0TWF5YmU8Q29tbWVudFRvUGFyZW50Q29tbWVudENvbm5lY3Rpb25XaGVyZUFyZ3M+O1xufTtcblxuXG4vKiogQSBDb21tZW50IG9iamVjdCAqL1xuZXhwb3J0IHR5cGUgQ29tbWVudFJlcGxpZXNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICB3aGVyZT86IElucHV0TWF5YmU8Q29tbWVudFRvQ29tbWVudENvbm5lY3Rpb25XaGVyZUFyZ3M+O1xufTtcblxuLyoqIEEgQ29tbWVudCBBdXRob3Igb2JqZWN0ICovXG5leHBvcnQgdHlwZSBDb21tZW50QXV0aG9yID0gQ29tbWVudGVyICYgRGF0YWJhc2VJZGVudGlmaWVyICYgTm9kZSAmIHtcbiAgX190eXBlbmFtZT86ICdDb21tZW50QXV0aG9yJztcbiAgLyoqIEF2YXRhciBvYmplY3QgZm9yIHVzZXIuIFRoZSBhdmF0YXIgb2JqZWN0IGNhbiBiZSByZXRyaWV2ZWQgaW4gZGlmZmVyZW50IHNpemVzIGJ5IHNwZWNpZnlpbmcgdGhlIHNpemUgYXJndW1lbnQuICovXG4gIGF2YXRhcj86IE1heWJlPEF2YXRhcj47XG4gIC8qKiBUaGUgdW5pcXVlIGlkZW50aWZpZXIgc3RvcmVkIGluIHRoZSBkYXRhYmFzZSAqL1xuICBkYXRhYmFzZUlkOiBTY2FsYXJzWydJbnQnXVsnb3V0cHV0J107XG4gIC8qKiBUaGUgZW1haWwgZm9yIHRoZSBjb21tZW50IGF1dGhvciAqL1xuICBlbWFpbD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgZ2xvYmFsbHkgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBjb21tZW50IGF1dGhvciBvYmplY3QgKi9cbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddO1xuICAvKiogV2hldGhlciB0aGUgb2JqZWN0IGlzIHJlc3RyaWN0ZWQgZnJvbSB0aGUgY3VycmVudCB2aWV3ZXIgKi9cbiAgaXNSZXN0cmljdGVkPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgbmFtZSBmb3IgdGhlIGNvbW1lbnQgYXV0aG9yLiAqL1xuICBuYW1lPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSB1cmwgdGhlIGNvbW1lbnQgYXV0aG9yLiAqL1xuICB1cmw/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuXG4vKiogQSBDb21tZW50IEF1dGhvciBvYmplY3QgKi9cbmV4cG9ydCB0eXBlIENvbW1lbnRBdXRob3JBdmF0YXJBcmdzID0ge1xuICBmb3JjZURlZmF1bHQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIHJhdGluZz86IElucHV0TWF5YmU8QXZhdGFyUmF0aW5nRW51bT47XG4gIHNpemU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIHRvIENvbW1lbnQgTm9kZXMgKi9cbmV4cG9ydCB0eXBlIENvbW1lbnRDb25uZWN0aW9uID0ge1xuICAvKiogQSBsaXN0IG9mIGVkZ2VzIChyZWxhdGlvbmFsIGNvbnRleHQpIGJldHdlZW4gUm9vdFF1ZXJ5IGFuZCBjb25uZWN0ZWQgQ29tbWVudCBOb2RlcyAqL1xuICBlZGdlczogQXJyYXk8Q29tbWVudENvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIEEgbGlzdCBvZiBjb25uZWN0ZWQgQ29tbWVudCBOb2RlcyAqL1xuICBub2RlczogQXJyYXk8Q29tbWVudD47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IENvbW1lbnRDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogRWRnZSBiZXR3ZWVuIGEgTm9kZSBhbmQgYSBjb25uZWN0ZWQgQ29tbWVudCAqL1xuZXhwb3J0IHR5cGUgQ29tbWVudENvbm5lY3Rpb25FZGdlID0ge1xuICAvKiogT3BhcXVlIHJlZmVyZW5jZSB0byB0aGUgbm9kZXMgcG9zaXRpb24gaW4gdGhlIGNvbm5lY3Rpb24uIFZhbHVlIGNhbiBiZSB1c2VkIHdpdGggcGFnaW5hdGlvbiBhcmdzLiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGNvbm5lY3RlZCBDb21tZW50IE5vZGUgKi9cbiAgbm9kZTogQ29tbWVudDtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlIGNvbm5lY3RlZCBDb21tZW50Q29ubmVjdGlvbkVkZ2UgKi9cbmV4cG9ydCB0eXBlIENvbW1lbnRDb25uZWN0aW9uUGFnZUluZm8gPSB7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogVGhlIFR5cGUgb2YgSWRlbnRpZmllciB1c2VkIHRvIGZldGNoIGEgc2luZ2xlIGNvbW1lbnQgbm9kZS4gRGVmYXVsdCBpcyBcIklEXCIuIFRvIGJlIHVzZWQgYWxvbmcgd2l0aCB0aGUgXCJpZFwiIGZpZWxkLiAqL1xuZXhwb3J0IGVudW0gQ29tbWVudE5vZGVJZFR5cGVFbnVtIHtcbiAgLyoqIElkZW50aWZ5IGEgcmVzb3VyY2UgYnkgdGhlIERhdGFiYXNlIElELiAqL1xuICBEYXRhYmFzZUlkID0gJ0RBVEFCQVNFX0lEJyxcbiAgLyoqIElkZW50aWZ5IGEgcmVzb3VyY2UgYnkgdGhlIChoYXNoZWQpIEdsb2JhbCBJRC4gKi9cbiAgSWQgPSAnSUQnXG59XG5cbi8qKiBUaGUgc3RhdHVzIG9mIHRoZSBjb21tZW50IG9iamVjdC4gKi9cbmV4cG9ydCBlbnVtIENvbW1lbnRTdGF0dXNFbnVtIHtcbiAgLyoqIENvbW1lbnRzIHdpdGggdGhlIEFwcHJvdmVkIHN0YXR1cyAqL1xuICBBcHByb3ZlID0gJ0FQUFJPVkUnLFxuICAvKiogQ29tbWVudHMgd2l0aCB0aGUgVW5hcHByb3ZlZCBzdGF0dXMgKi9cbiAgSG9sZCA9ICdIT0xEJyxcbiAgLyoqIENvbW1lbnRzIHdpdGggdGhlIFNwYW0gc3RhdHVzICovXG4gIFNwYW0gPSAnU1BBTScsXG4gIC8qKiBDb21tZW50cyB3aXRoIHRoZSBUcmFzaCBzdGF0dXMgKi9cbiAgVHJhc2ggPSAnVFJBU0gnXG59XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIENvbW1lbnQgdHlwZSBhbmQgdGhlIENvbW1lbnQgdHlwZSAqL1xuZXhwb3J0IHR5cGUgQ29tbWVudFRvQ29tbWVudENvbm5lY3Rpb24gPSBDb21tZW50Q29ubmVjdGlvbiAmIENvbm5lY3Rpb24gJiB7XG4gIF9fdHlwZW5hbWU/OiAnQ29tbWVudFRvQ29tbWVudENvbm5lY3Rpb24nO1xuICAvKiogRWRnZXMgZm9yIHRoZSBDb21tZW50VG9Db21tZW50Q29ubmVjdGlvbiBjb25uZWN0aW9uICovXG4gIGVkZ2VzOiBBcnJheTxDb21tZW50VG9Db21tZW50Q29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIG5vZGVzIG9mIHRoZSBjb25uZWN0aW9uLCB3aXRob3V0IHRoZSBlZGdlcyAqL1xuICBub2RlczogQXJyYXk8Q29tbWVudD47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IENvbW1lbnRUb0NvbW1lbnRDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIENvbW1lbnRUb0NvbW1lbnRDb25uZWN0aW9uRWRnZSA9IENvbW1lbnRDb25uZWN0aW9uRWRnZSAmIEVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnQ29tbWVudFRvQ29tbWVudENvbm5lY3Rpb25FZGdlJztcbiAgLyoqIEEgY3Vyc29yIGZvciB1c2UgaW4gcGFnaW5hdGlvbiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGl0ZW0gYXQgdGhlIGVuZCBvZiB0aGUgZWRnZSAqL1xuICBub2RlOiBDb21tZW50O1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgJnF1b3Q7Q29tbWVudFRvQ29tbWVudENvbm5lY3Rpb24mcXVvdDsgKi9cbmV4cG9ydCB0eXBlIENvbW1lbnRUb0NvbW1lbnRDb25uZWN0aW9uUGFnZUluZm8gPSBDb21tZW50Q29ubmVjdGlvblBhZ2VJbmZvICYgUGFnZUluZm8gJiBXcFBhZ2VJbmZvICYge1xuICBfX3R5cGVuYW1lPzogJ0NvbW1lbnRUb0NvbW1lbnRDb25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIEFyZ3VtZW50cyBmb3IgZmlsdGVyaW5nIHRoZSBDb21tZW50VG9Db21tZW50Q29ubmVjdGlvbiBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBDb21tZW50VG9Db21tZW50Q29ubmVjdGlvbldoZXJlQXJncyA9IHtcbiAgLyoqIENvbW1lbnQgYXV0aG9yIGVtYWlsIGFkZHJlc3MuICovXG4gIGF1dGhvckVtYWlsPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBhdXRob3IgSURzIHRvIGluY2x1ZGUgY29tbWVudHMgZm9yLiAqL1xuICBhdXRob3JJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgYXV0aG9yIElEcyB0byBleGNsdWRlIGNvbW1lbnRzIGZvci4gKi9cbiAgYXV0aG9yTm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIENvbW1lbnQgYXV0aG9yIFVSTC4gKi9cbiAgYXV0aG9yVXJsPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBjb21tZW50IElEcyB0byBpbmNsdWRlLiAqL1xuICBjb21tZW50SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIElEcyBvZiB1c2VycyB3aG9zZSB1bmFwcHJvdmVkIGNvbW1lbnRzIHdpbGwgYmUgcmV0dXJuZWQgYnkgdGhlIHF1ZXJ5IHJlZ2FyZGxlc3Mgb2Ygc3RhdHVzLiAqL1xuICBjb21tZW50Tm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEluY2x1ZGUgY29tbWVudHMgb2YgYSBnaXZlbiB0eXBlLiAqL1xuICBjb21tZW50VHlwZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogSW5jbHVkZSBjb21tZW50cyBmcm9tIGEgZ2l2ZW4gYXJyYXkgb2YgY29tbWVudCB0eXBlcy4gKi9cbiAgY29tbWVudFR5cGVJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEV4Y2x1ZGUgY29tbWVudHMgZnJvbSBhIGdpdmVuIGFycmF5IG9mIGNvbW1lbnQgdHlwZXMuICovXG4gIGNvbW1lbnRUeXBlTm90SW4/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIENvbnRlbnQgb2JqZWN0IGF1dGhvciBJRCB0byBsaW1pdCByZXN1bHRzIGJ5LiAqL1xuICBjb250ZW50QXV0aG9yPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBhdXRob3IgSURzIHRvIHJldHJpZXZlIGNvbW1lbnRzIGZvci4gKi9cbiAgY29udGVudEF1dGhvckluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBhdXRob3IgSURzICpub3QqIHRvIHJldHJpZXZlIGNvbW1lbnRzIGZvci4gKi9cbiAgY29udGVudEF1dGhvck5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBMaW1pdCByZXN1bHRzIHRvIHRob3NlIGFmZmlsaWF0ZWQgd2l0aCBhIGdpdmVuIGNvbnRlbnQgb2JqZWN0IElELiAqL1xuICBjb250ZW50SWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgY29udGVudCBvYmplY3QgSURzIHRvIGluY2x1ZGUgYWZmaWxpYXRlZCBjb21tZW50cyBmb3IuICovXG4gIGNvbnRlbnRJZEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBjb250ZW50IG9iamVjdCBJRHMgdG8gZXhjbHVkZSBhZmZpbGlhdGVkIGNvbW1lbnRzIGZvci4gKi9cbiAgY29udGVudElkTm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIENvbnRlbnQgb2JqZWN0IG5hbWUgKGkuZS4gc2x1ZyApIHRvIHJldHJpZXZlIGFmZmlsaWF0ZWQgY29tbWVudHMgZm9yLiAqL1xuICBjb250ZW50TmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQ29udGVudCBPYmplY3QgcGFyZW50IElEIHRvIHJldHJpZXZlIGFmZmlsaWF0ZWQgY29tbWVudHMgZm9yLiAqL1xuICBjb250ZW50UGFyZW50PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBjb250ZW50IG9iamVjdCBzdGF0dXNlcyB0byByZXRyaWV2ZSBhZmZpbGlhdGVkIGNvbW1lbnRzIGZvci4gUGFzcyAnYW55JyB0byBtYXRjaCBhbnkgdmFsdWUuICovXG4gIGNvbnRlbnRTdGF0dXM/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+Pj47XG4gIC8qKiBDb250ZW50IG9iamVjdCB0eXBlIG9yIGFycmF5IG9mIHR5cGVzIHRvIHJldHJpZXZlIGFmZmlsaWF0ZWQgY29tbWVudHMgZm9yLiBQYXNzICdhbnknIHRvIG1hdGNoIGFueSB2YWx1ZS4gKi9cbiAgY29udGVudFR5cGU/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8Q29udGVudFR5cGVFbnVtPj4+O1xuICAvKiogQXJyYXkgb2YgSURzIG9yIGVtYWlsIGFkZHJlc3NlcyBvZiB1c2VycyB3aG9zZSB1bmFwcHJvdmVkIGNvbW1lbnRzIHdpbGwgYmUgcmV0dXJuZWQgYnkgdGhlIHF1ZXJ5IHJlZ2FyZGxlc3Mgb2YgJHN0YXR1cy4gRGVmYXVsdCBlbXB0eSAqL1xuICBpbmNsdWRlVW5hcHByb3ZlZD86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogS2FybWEgc2NvcmUgdG8gcmV0cmlldmUgbWF0Y2hpbmcgY29tbWVudHMgZm9yLiAqL1xuICBrYXJtYT86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogVGhlIGNhcmRpbmFsaXR5IG9mIHRoZSBvcmRlciBvZiB0aGUgY29ubmVjdGlvbiAqL1xuICBvcmRlcj86IElucHV0TWF5YmU8T3JkZXJFbnVtPjtcbiAgLyoqIEZpZWxkIHRvIG9yZGVyIHRoZSBjb21tZW50cyBieS4gKi9cbiAgb3JkZXJieT86IElucHV0TWF5YmU8Q29tbWVudHNDb25uZWN0aW9uT3JkZXJieUVudW0+O1xuICAvKiogUGFyZW50IElEIG9mIGNvbW1lbnQgdG8gcmV0cmlldmUgY2hpbGRyZW4gb2YuICovXG4gIHBhcmVudD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgcGFyZW50IElEcyBvZiBjb21tZW50cyB0byByZXRyaWV2ZSBjaGlsZHJlbiBmb3IuICovXG4gIHBhcmVudEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBwYXJlbnQgSURzIG9mIGNvbW1lbnRzICpub3QqIHRvIHJldHJpZXZlIGNoaWxkcmVuIGZvci4gKi9cbiAgcGFyZW50Tm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNlYXJjaCB0ZXJtKHMpIHRvIHJldHJpZXZlIG1hdGNoaW5nIGNvbW1lbnRzIGZvci4gKi9cbiAgc2VhcmNoPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBDb21tZW50IHN0YXR1cyB0byBsaW1pdCByZXN1bHRzIGJ5LiAqL1xuICBzdGF0dXM/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEluY2x1ZGUgY29tbWVudHMgZm9yIGEgc3BlY2lmaWMgdXNlciBJRC4gKi9cbiAgdXNlcklkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIENvbW1lbnQgdHlwZSBhbmQgdGhlIENvbW1lbnRlciB0eXBlICovXG5leHBvcnQgdHlwZSBDb21tZW50VG9Db21tZW50ZXJDb25uZWN0aW9uRWRnZSA9IENvbW1lbnRlckNvbm5lY3Rpb25FZGdlICYgRWRnZSAmIE9uZVRvT25lQ29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdDb21tZW50VG9Db21tZW50ZXJDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBPcGFxdWUgcmVmZXJlbmNlIHRvIHRoZSBub2RlcyBwb3NpdGlvbiBpbiB0aGUgY29ubmVjdGlvbi4gVmFsdWUgY2FuIGJlIHVzZWQgd2l0aCBwYWdpbmF0aW9uIGFyZ3MuICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgbm9kZSBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZTogQ29tbWVudGVyO1xufTtcblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgQ29tbWVudCB0eXBlIGFuZCB0aGUgQ29udGVudE5vZGUgdHlwZSAqL1xuZXhwb3J0IHR5cGUgQ29tbWVudFRvQ29udGVudE5vZGVDb25uZWN0aW9uRWRnZSA9IENvbnRlbnROb2RlQ29ubmVjdGlvbkVkZ2UgJiBFZGdlICYgT25lVG9PbmVDb25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ0NvbW1lbnRUb0NvbnRlbnROb2RlQ29ubmVjdGlvbkVkZ2UnO1xuICAvKiogT3BhcXVlIHJlZmVyZW5jZSB0byB0aGUgbm9kZXMgcG9zaXRpb24gaW4gdGhlIGNvbm5lY3Rpb24uIFZhbHVlIGNhbiBiZSB1c2VkIHdpdGggcGFnaW5hdGlvbiBhcmdzLiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIG5vZGUgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGU6IENvbnRlbnROb2RlO1xufTtcblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgQ29tbWVudCB0eXBlIGFuZCB0aGUgQ29tbWVudCB0eXBlICovXG5leHBvcnQgdHlwZSBDb21tZW50VG9QYXJlbnRDb21tZW50Q29ubmVjdGlvbkVkZ2UgPSBDb21tZW50Q29ubmVjdGlvbkVkZ2UgJiBFZGdlICYgT25lVG9PbmVDb25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ0NvbW1lbnRUb1BhcmVudENvbW1lbnRDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBPcGFxdWUgcmVmZXJlbmNlIHRvIHRoZSBub2RlcyBwb3NpdGlvbiBpbiB0aGUgY29ubmVjdGlvbi4gVmFsdWUgY2FuIGJlIHVzZWQgd2l0aCBwYWdpbmF0aW9uIGFyZ3MuICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgbm9kZSBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZTogQ29tbWVudDtcbn07XG5cbi8qKiBBcmd1bWVudHMgZm9yIGZpbHRlcmluZyB0aGUgQ29tbWVudFRvUGFyZW50Q29tbWVudENvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgQ29tbWVudFRvUGFyZW50Q29tbWVudENvbm5lY3Rpb25XaGVyZUFyZ3MgPSB7XG4gIC8qKiBDb21tZW50IGF1dGhvciBlbWFpbCBhZGRyZXNzLiAqL1xuICBhdXRob3JFbWFpbD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgYXV0aG9yIElEcyB0byBpbmNsdWRlIGNvbW1lbnRzIGZvci4gKi9cbiAgYXV0aG9ySW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIGF1dGhvciBJRHMgdG8gZXhjbHVkZSBjb21tZW50cyBmb3IuICovXG4gIGF1dGhvck5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBDb21tZW50IGF1dGhvciBVUkwuICovXG4gIGF1dGhvclVybD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgY29tbWVudCBJRHMgdG8gaW5jbHVkZS4gKi9cbiAgY29tbWVudEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBJRHMgb2YgdXNlcnMgd2hvc2UgdW5hcHByb3ZlZCBjb21tZW50cyB3aWxsIGJlIHJldHVybmVkIGJ5IHRoZSBxdWVyeSByZWdhcmRsZXNzIG9mIHN0YXR1cy4gKi9cbiAgY29tbWVudE5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBJbmNsdWRlIGNvbW1lbnRzIG9mIGEgZ2l2ZW4gdHlwZS4gKi9cbiAgY29tbWVudFR5cGU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEluY2x1ZGUgY29tbWVudHMgZnJvbSBhIGdpdmVuIGFycmF5IG9mIGNvbW1lbnQgdHlwZXMuICovXG4gIGNvbW1lbnRUeXBlSW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBFeGNsdWRlIGNvbW1lbnRzIGZyb20gYSBnaXZlbiBhcnJheSBvZiBjb21tZW50IHR5cGVzLiAqL1xuICBjb21tZW50VHlwZU5vdEluPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBDb250ZW50IG9iamVjdCBhdXRob3IgSUQgdG8gbGltaXQgcmVzdWx0cyBieS4gKi9cbiAgY29udGVudEF1dGhvcj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgYXV0aG9yIElEcyB0byByZXRyaWV2ZSBjb21tZW50cyBmb3IuICovXG4gIGNvbnRlbnRBdXRob3JJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgYXV0aG9yIElEcyAqbm90KiB0byByZXRyaWV2ZSBjb21tZW50cyBmb3IuICovXG4gIGNvbnRlbnRBdXRob3JOb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogTGltaXQgcmVzdWx0cyB0byB0aG9zZSBhZmZpbGlhdGVkIHdpdGggYSBnaXZlbiBjb250ZW50IG9iamVjdCBJRC4gKi9cbiAgY29udGVudElkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIGNvbnRlbnQgb2JqZWN0IElEcyB0byBpbmNsdWRlIGFmZmlsaWF0ZWQgY29tbWVudHMgZm9yLiAqL1xuICBjb250ZW50SWRJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgY29udGVudCBvYmplY3QgSURzIHRvIGV4Y2x1ZGUgYWZmaWxpYXRlZCBjb21tZW50cyBmb3IuICovXG4gIGNvbnRlbnRJZE5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBDb250ZW50IG9iamVjdCBuYW1lIChpLmUuIHNsdWcgKSB0byByZXRyaWV2ZSBhZmZpbGlhdGVkIGNvbW1lbnRzIGZvci4gKi9cbiAgY29udGVudE5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIENvbnRlbnQgT2JqZWN0IHBhcmVudCBJRCB0byByZXRyaWV2ZSBhZmZpbGlhdGVkIGNvbW1lbnRzIGZvci4gKi9cbiAgY29udGVudFBhcmVudD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgY29udGVudCBvYmplY3Qgc3RhdHVzZXMgdG8gcmV0cmlldmUgYWZmaWxpYXRlZCBjb21tZW50cyBmb3IuIFBhc3MgJ2FueScgdG8gbWF0Y2ggYW55IHZhbHVlLiAqL1xuICBjb250ZW50U3RhdHVzPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFBvc3RTdGF0dXNFbnVtPj4+O1xuICAvKiogQ29udGVudCBvYmplY3QgdHlwZSBvciBhcnJheSBvZiB0eXBlcyB0byByZXRyaWV2ZSBhZmZpbGlhdGVkIGNvbW1lbnRzIGZvci4gUGFzcyAnYW55JyB0byBtYXRjaCBhbnkgdmFsdWUuICovXG4gIGNvbnRlbnRUeXBlPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPENvbnRlbnRUeXBlRW51bT4+PjtcbiAgLyoqIEFycmF5IG9mIElEcyBvciBlbWFpbCBhZGRyZXNzZXMgb2YgdXNlcnMgd2hvc2UgdW5hcHByb3ZlZCBjb21tZW50cyB3aWxsIGJlIHJldHVybmVkIGJ5IHRoZSBxdWVyeSByZWdhcmRsZXNzIG9mICRzdGF0dXMuIERlZmF1bHQgZW1wdHkgKi9cbiAgaW5jbHVkZVVuYXBwcm92ZWQ/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEthcm1hIHNjb3JlIHRvIHJldHJpZXZlIG1hdGNoaW5nIGNvbW1lbnRzIGZvci4gKi9cbiAga2FybWE/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBjYXJkaW5hbGl0eSBvZiB0aGUgb3JkZXIgb2YgdGhlIGNvbm5lY3Rpb24gKi9cbiAgb3JkZXI/OiBJbnB1dE1heWJlPE9yZGVyRW51bT47XG4gIC8qKiBGaWVsZCB0byBvcmRlciB0aGUgY29tbWVudHMgYnkuICovXG4gIG9yZGVyYnk/OiBJbnB1dE1heWJlPENvbW1lbnRzQ29ubmVjdGlvbk9yZGVyYnlFbnVtPjtcbiAgLyoqIFBhcmVudCBJRCBvZiBjb21tZW50IHRvIHJldHJpZXZlIGNoaWxkcmVuIG9mLiAqL1xuICBwYXJlbnQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIHBhcmVudCBJRHMgb2YgY29tbWVudHMgdG8gcmV0cmlldmUgY2hpbGRyZW4gZm9yLiAqL1xuICBwYXJlbnRJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgcGFyZW50IElEcyBvZiBjb21tZW50cyAqbm90KiB0byByZXRyaWV2ZSBjaGlsZHJlbiBmb3IuICovXG4gIHBhcmVudE5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTZWFyY2ggdGVybShzKSB0byByZXRyaWV2ZSBtYXRjaGluZyBjb21tZW50cyBmb3IuICovXG4gIHNlYXJjaD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQ29tbWVudCBzdGF0dXMgdG8gbGltaXQgcmVzdWx0cyBieS4gKi9cbiAgc3RhdHVzPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBJbmNsdWRlIGNvbW1lbnRzIGZvciBhIHNwZWNpZmljIHVzZXIgSUQuICovXG4gIHVzZXJJZD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG59O1xuXG4vKiogVGhlIGF1dGhvciBvZiBhIGNvbW1lbnQgKi9cbmV4cG9ydCB0eXBlIENvbW1lbnRlciA9IHtcbiAgLyoqIEF2YXRhciBvYmplY3QgZm9yIHVzZXIuIFRoZSBhdmF0YXIgb2JqZWN0IGNhbiBiZSByZXRyaWV2ZWQgaW4gZGlmZmVyZW50IHNpemVzIGJ5IHNwZWNpZnlpbmcgdGhlIHNpemUgYXJndW1lbnQuICovXG4gIGF2YXRhcj86IE1heWJlPEF2YXRhcj47XG4gIC8qKiBJZGVudGlmaWVzIHRoZSBwcmltYXJ5IGtleSBmcm9tIHRoZSBkYXRhYmFzZS4gKi9cbiAgZGF0YWJhc2VJZDogU2NhbGFyc1snSW50J11bJ291dHB1dCddO1xuICAvKiogVGhlIGVtYWlsIGFkZHJlc3Mgb2YgdGhlIGF1dGhvciBvZiBhIGNvbW1lbnQuICovXG4gIGVtYWlsPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGNvbW1lbnQgYXV0aG9yLiAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnb3V0cHV0J107XG4gIC8qKiBXaGV0aGVyIHRoZSBhdXRob3IgaW5mb3JtYXRpb24gaXMgY29uc2lkZXJlZCByZXN0cmljdGVkLiAobm90IGZ1bGx5IHB1YmxpYykgKi9cbiAgaXNSZXN0cmljdGVkPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgbmFtZSBvZiB0aGUgYXV0aG9yIG9mIGEgY29tbWVudC4gKi9cbiAgbmFtZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgdXJsIG9mIHRoZSBhdXRob3Igb2YgYSBjb21tZW50LiAqL1xuICB1cmw/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIEVkZ2UgYmV0d2VlbiBhIE5vZGUgYW5kIGEgY29ubmVjdGVkIENvbW1lbnRlciAqL1xuZXhwb3J0IHR5cGUgQ29tbWVudGVyQ29ubmVjdGlvbkVkZ2UgPSB7XG4gIC8qKiBPcGFxdWUgcmVmZXJlbmNlIHRvIHRoZSBub2RlcyBwb3NpdGlvbiBpbiB0aGUgY29ubmVjdGlvbi4gVmFsdWUgY2FuIGJlIHVzZWQgd2l0aCBwYWdpbmF0aW9uIGFyZ3MuICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgY29ubmVjdGVkIENvbW1lbnRlciBOb2RlICovXG4gIG5vZGU6IENvbW1lbnRlcjtcbn07XG5cbi8qKiBPcHRpb25zIGZvciBvcmRlcmluZyB0aGUgY29ubmVjdGlvbiAqL1xuZXhwb3J0IGVudW0gQ29tbWVudHNDb25uZWN0aW9uT3JkZXJieUVudW0ge1xuICAvKiogT3JkZXIgYnkgYnJvd3NlciB1c2VyIGFnZW50IG9mIHRoZSBjb21tZW50ZXIuICovXG4gIENvbW1lbnRBZ2VudCA9ICdDT01NRU5UX0FHRU5UJyxcbiAgLyoqIE9yZGVyIGJ5IGFwcHJvdmFsIHN0YXR1cyBvZiB0aGUgY29tbWVudC4gKi9cbiAgQ29tbWVudEFwcHJvdmVkID0gJ0NPTU1FTlRfQVBQUk9WRUQnLFxuICAvKiogT3JkZXIgYnkgbmFtZSBvZiB0aGUgY29tbWVudCBhdXRob3IuICovXG4gIENvbW1lbnRBdXRob3IgPSAnQ09NTUVOVF9BVVRIT1InLFxuICAvKiogT3JkZXIgYnkgZS1tYWlsIG9mIHRoZSBjb21tZW50IGF1dGhvci4gKi9cbiAgQ29tbWVudEF1dGhvckVtYWlsID0gJ0NPTU1FTlRfQVVUSE9SX0VNQUlMJyxcbiAgLyoqIE9yZGVyIGJ5IElQIGFkZHJlc3Mgb2YgdGhlIGNvbW1lbnQgYXV0aG9yLiAqL1xuICBDb21tZW50QXV0aG9ySXAgPSAnQ09NTUVOVF9BVVRIT1JfSVAnLFxuICAvKiogT3JkZXIgYnkgVVJMIGFkZHJlc3Mgb2YgdGhlIGNvbW1lbnQgYXV0aG9yLiAqL1xuICBDb21tZW50QXV0aG9yVXJsID0gJ0NPTU1FTlRfQVVUSE9SX1VSTCcsXG4gIC8qKiBPcmRlciBieSB0aGUgY29tbWVudCBjb250ZW50cy4gKi9cbiAgQ29tbWVudENvbnRlbnQgPSAnQ09NTUVOVF9DT05URU5UJyxcbiAgLyoqIE9yZGVyIGJ5IGRhdGUvdGltZSB0aW1lc3RhbXAgb2YgdGhlIGNvbW1lbnQuICovXG4gIENvbW1lbnREYXRlID0gJ0NPTU1FTlRfREFURScsXG4gIC8qKiBPcmRlciBieSBHTVQgdGltZXpvbmUgZGF0ZS90aW1lIHRpbWVzdGFtcCBvZiB0aGUgY29tbWVudC4gKi9cbiAgQ29tbWVudERhdGVHbXQgPSAnQ09NTUVOVF9EQVRFX0dNVCcsXG4gIC8qKiBPcmRlciBieSB0aGUgZ2xvYmFsbHkgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBjb21tZW50IG9iamVjdCAqL1xuICBDb21tZW50SWQgPSAnQ09NTUVOVF9JRCcsXG4gIC8qKiBPcmRlciBieSB0aGUgYXJyYXkgbGlzdCBvZiBjb21tZW50IElEcyBsaXN0ZWQgaW4gdGhlIHdoZXJlIGNsYXVzZS4gKi9cbiAgQ29tbWVudEluID0gJ0NPTU1FTlRfSU4nLFxuICAvKiogT3JkZXIgYnkgdGhlIGNvbW1lbnQga2FybWEgc2NvcmUuICovXG4gIENvbW1lbnRLYXJtYSA9ICdDT01NRU5UX0tBUk1BJyxcbiAgLyoqIE9yZGVyIGJ5IHRoZSBjb21tZW50IHBhcmVudCBJRC4gKi9cbiAgQ29tbWVudFBhcmVudCA9ICdDT01NRU5UX1BBUkVOVCcsXG4gIC8qKiBPcmRlciBieSB0aGUgcG9zdCBvYmplY3QgSUQuICovXG4gIENvbW1lbnRQb3N0SWQgPSAnQ09NTUVOVF9QT1NUX0lEJyxcbiAgLyoqIE9yZGVyIGJ5IHRoZSB0aGUgdHlwZSBvZiBjb21tZW50LCBzdWNoIGFzICdjb21tZW50JywgJ3BpbmdiYWNrJywgb3IgJ3RyYWNrYmFjaycuICovXG4gIENvbW1lbnRUeXBlID0gJ0NPTU1FTlRfVFlQRScsXG4gIC8qKiBPcmRlciBieSB0aGUgdXNlciBJRC4gKi9cbiAgVXNlcklkID0gJ1VTRVJfSUQnXG59XG5cbi8qKiBBIHBsdXJhbCBjb25uZWN0aW9uIGZyb20gb25lIE5vZGUgVHlwZSBpbiB0aGUgR3JhcGggdG8gYW5vdGhlciBOb2RlIFR5cGUsIHdpdGggc3VwcG9ydCBmb3IgcmVsYXRpb25hbCBkYXRhIHZpYSAmcXVvdDtlZGdlcyZxdW90Oy4gKi9cbmV4cG9ydCB0eXBlIENvbm5lY3Rpb24gPSB7XG4gIC8qKiBBIGxpc3Qgb2YgZWRnZXMgKHJlbGF0aW9uYWwgY29udGV4dCkgYmV0d2VlbiBjb25uZWN0ZWQgbm9kZXMgKi9cbiAgZWRnZXM6IEFycmF5PEVkZ2U+O1xuICAvKiogQSBsaXN0IG9mIGNvbm5lY3RlZCBub2RlcyAqL1xuICBub2RlczogQXJyYXk8Tm9kZT47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFBhZ2VJbmZvO1xufTtcblxuLyoqIE5vZGVzIHVzZWQgdG8gbWFuYWdlIGNvbnRlbnQgKi9cbmV4cG9ydCB0eXBlIENvbnRlbnROb2RlID0ge1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBDb250ZW50Tm9kZSB0eXBlIGFuZCB0aGUgQ29udGVudFR5cGUgdHlwZSAqL1xuICBjb250ZW50VHlwZT86IE1heWJlPENvbnRlbnROb2RlVG9Db250ZW50VHlwZUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBuYW1lIG9mIHRoZSBDb250ZW50IFR5cGUgdGhlIG5vZGUgYmVsb25ncyB0byAqL1xuICBjb250ZW50VHlwZU5hbWU6IFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXTtcbiAgLyoqIFRoZSBJRCBvZiB0aGUgbm9kZSBpbiB0aGUgZGF0YWJhc2UuICovXG4gIGRhdGFiYXNlSWQ6IFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXTtcbiAgLyoqIFBvc3QgcHVibGlzaGluZyBkYXRlLiAqL1xuICBkYXRlPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBwdWJsaXNoaW5nIGRhdGUgc2V0IGluIEdNVC4gKi9cbiAgZGF0ZUdtdD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgZGVzaXJlZCBzbHVnIG9mIHRoZSBwb3N0ICovXG4gIGRlc2lyZWRTbHVnPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIElmIGEgdXNlciBoYXMgZWRpdGVkIHRoZSBub2RlIHdpdGhpbiB0aGUgcGFzdCAxNSBzZWNvbmRzLCB0aGlzIHdpbGwgcmV0dXJuIHRoZSB1c2VyIHRoYXQgbGFzdCBlZGl0ZWQuIE51bGwgaWYgdGhlIGVkaXQgbG9jayBkb2VzbiYjMDM5O3QgZXhpc3Qgb3IgaXMgZ3JlYXRlciB0aGFuIDE1IHNlY29uZHMgKi9cbiAgZWRpdGluZ0xvY2tlZEJ5PzogTWF5YmU8Q29udGVudE5vZGVUb0VkaXRMb2NrQ29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIFJTUyBlbmNsb3N1cmUgZm9yIHRoZSBvYmplY3QgKi9cbiAgZW5jbG9zdXJlPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgQ29udGVudE5vZGUgdHlwZSBhbmQgdGhlIEVucXVldWVkU2NyaXB0IHR5cGUgKi9cbiAgZW5xdWV1ZWRTY3JpcHRzPzogTWF5YmU8Q29udGVudE5vZGVUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvbj47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIENvbnRlbnROb2RlIHR5cGUgYW5kIHRoZSBFbnF1ZXVlZFN0eWxlc2hlZXQgdHlwZSAqL1xuICBlbnF1ZXVlZFN0eWxlc2hlZXRzPzogTWF5YmU8Q29udGVudE5vZGVUb0VucXVldWVkU3R5bGVzaGVldENvbm5lY3Rpb24+O1xuICAvKiogVGhlIGdsb2JhbCB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBwb3N0LiBUaGlzIGN1cnJlbnRseSBtYXRjaGVzIHRoZSB2YWx1ZSBzdG9yZWQgaW4gV1BfUG9zdC0mZ3Q7Z3VpZCBhbmQgdGhlIGd1aWQgY29sdW1uIGluIHRoZSAmcXVvdDtwb3N0X29iamVjdHMmcXVvdDsgZGF0YWJhc2UgdGFibGUuICovXG4gIGd1aWQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIHVuaXF1ZSByZXNvdXJjZSBpZGVudGlmaWVyIHBhdGggKi9cbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddO1xuICAvKiogV2hldGhlciB0aGUgbm9kZSBpcyBhIENvbnRlbnQgTm9kZSAqL1xuICBpc0NvbnRlbnROb2RlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hldGhlciB0aGUgb2JqZWN0IGlzIGEgbm9kZSBpbiB0aGUgcHJldmlldyBzdGF0ZSAqL1xuICBpc1ByZXZpZXc/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdGhlIG9iamVjdCBpcyByZXN0cmljdGVkIGZyb20gdGhlIGN1cnJlbnQgdmlld2VyICovXG4gIGlzUmVzdHJpY3RlZD86IE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J10+O1xuICAvKiogV2hldGhlciB0aGUgbm9kZSBpcyBhIFRlcm0gKi9cbiAgaXNUZXJtTm9kZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFRoZSB1c2VyIHRoYXQgbW9zdCByZWNlbnRseSBlZGl0ZWQgdGhlIG5vZGUgKi9cbiAgbGFzdEVkaXRlZEJ5PzogTWF5YmU8Q29udGVudE5vZGVUb0VkaXRMYXN0Q29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIHBlcm1hbGluayBvZiB0aGUgcG9zdCAqL1xuICBsaW5rPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBsb2NhbCBtb2RpZmllZCB0aW1lIGZvciBhIHBvc3QuIElmIGEgcG9zdCB3YXMgcmVjZW50bHkgdXBkYXRlZCB0aGUgbW9kaWZpZWQgZmllbGQgd2lsbCBjaGFuZ2UgdG8gbWF0Y2ggdGhlIGNvcnJlc3BvbmRpbmcgdGltZS4gKi9cbiAgbW9kaWZpZWQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIEdNVCBtb2RpZmllZCB0aW1lIGZvciBhIHBvc3QuIElmIGEgcG9zdCB3YXMgcmVjZW50bHkgdXBkYXRlZCB0aGUgbW9kaWZpZWQgZmllbGQgd2lsbCBjaGFuZ2UgdG8gbWF0Y2ggdGhlIGNvcnJlc3BvbmRpbmcgdGltZSBpbiBHTVQuICovXG4gIG1vZGlmaWVkR210PzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBkYXRhYmFzZSBpZCBvZiB0aGUgcHJldmlldyBub2RlICovXG4gIHByZXZpZXdSZXZpc2lvbkRhdGFiYXNlSWQ/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogV2hldGhlciB0aGUgb2JqZWN0IGlzIGEgbm9kZSBpbiB0aGUgcHJldmlldyBzdGF0ZSAqL1xuICBwcmV2aWV3UmV2aXNpb25JZD86IE1heWJlPFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSB1cmkgc2x1ZyBmb3IgdGhlIHBvc3QuIFRoaXMgaXMgZXF1aXZhbGVudCB0byB0aGUgV1BfUG9zdC0mZ3Q7cG9zdF9uYW1lIGZpZWxkIGFuZCB0aGUgcG9zdF9uYW1lIGNvbHVtbiBpbiB0aGUgZGF0YWJhc2UgZm9yIHRoZSAmcXVvdDtwb3N0X29iamVjdHMmcXVvdDsgdGFibGUuICovXG4gIHNsdWc/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGN1cnJlbnQgc3RhdHVzIG9mIHRoZSBvYmplY3QgKi9cbiAgc3RhdHVzPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSB0ZW1wbGF0ZSBhc3NpZ25lZCB0byBhIG5vZGUgb2YgY29udGVudCAqL1xuICB0ZW1wbGF0ZT86IE1heWJlPENvbnRlbnRUZW1wbGF0ZT47XG4gIC8qKiBUaGUgdW5pcXVlIHJlc291cmNlIGlkZW50aWZpZXIgcGF0aCAqL1xuICB1cmk/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuXG4vKiogTm9kZXMgdXNlZCB0byBtYW5hZ2UgY29udGVudCAqL1xuZXhwb3J0IHR5cGUgQ29udGVudE5vZGVFbnF1ZXVlZFNjcmlwdHNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xufTtcblxuXG4vKiogTm9kZXMgdXNlZCB0byBtYW5hZ2UgY29udGVudCAqL1xuZXhwb3J0IHR5cGUgQ29udGVudE5vZGVFbnF1ZXVlZFN0eWxlc2hlZXRzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIHRvIENvbnRlbnROb2RlIE5vZGVzICovXG5leHBvcnQgdHlwZSBDb250ZW50Tm9kZUNvbm5lY3Rpb24gPSB7XG4gIC8qKiBBIGxpc3Qgb2YgZWRnZXMgKHJlbGF0aW9uYWwgY29udGV4dCkgYmV0d2VlbiBDb250ZW50VHlwZSBhbmQgY29ubmVjdGVkIENvbnRlbnROb2RlIE5vZGVzICovXG4gIGVkZ2VzOiBBcnJheTxDb250ZW50Tm9kZUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIEEgbGlzdCBvZiBjb25uZWN0ZWQgQ29udGVudE5vZGUgTm9kZXMgKi9cbiAgbm9kZXM6IEFycmF5PENvbnRlbnROb2RlPjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogQ29udGVudE5vZGVDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogRWRnZSBiZXR3ZWVuIGEgTm9kZSBhbmQgYSBjb25uZWN0ZWQgQ29udGVudE5vZGUgKi9cbmV4cG9ydCB0eXBlIENvbnRlbnROb2RlQ29ubmVjdGlvbkVkZ2UgPSB7XG4gIC8qKiBPcGFxdWUgcmVmZXJlbmNlIHRvIHRoZSBub2RlcyBwb3NpdGlvbiBpbiB0aGUgY29ubmVjdGlvbi4gVmFsdWUgY2FuIGJlIHVzZWQgd2l0aCBwYWdpbmF0aW9uIGFyZ3MuICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgY29ubmVjdGVkIENvbnRlbnROb2RlIE5vZGUgKi9cbiAgbm9kZTogQ29udGVudE5vZGU7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSBjb25uZWN0ZWQgQ29udGVudE5vZGVDb25uZWN0aW9uRWRnZSAqL1xuZXhwb3J0IHR5cGUgQ29udGVudE5vZGVDb25uZWN0aW9uUGFnZUluZm8gPSB7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogVGhlIFR5cGUgb2YgSWRlbnRpZmllciB1c2VkIHRvIGZldGNoIGEgc2luZ2xlIHJlc291cmNlLiBEZWZhdWx0IGlzIElELiAqL1xuZXhwb3J0IGVudW0gQ29udGVudE5vZGVJZFR5cGVFbnVtIHtcbiAgLyoqIElkZW50aWZ5IGEgcmVzb3VyY2UgYnkgdGhlIERhdGFiYXNlIElELiAqL1xuICBEYXRhYmFzZUlkID0gJ0RBVEFCQVNFX0lEJyxcbiAgLyoqIElkZW50aWZ5IGEgcmVzb3VyY2UgYnkgdGhlIChoYXNoZWQpIEdsb2JhbCBJRC4gKi9cbiAgSWQgPSAnSUQnLFxuICAvKiogSWRlbnRpZnkgYSByZXNvdXJjZSBieSB0aGUgVVJJLiAqL1xuICBVcmkgPSAnVVJJJ1xufVxuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBDb250ZW50Tm9kZSB0eXBlIGFuZCB0aGUgQ29udGVudFR5cGUgdHlwZSAqL1xuZXhwb3J0IHR5cGUgQ29udGVudE5vZGVUb0NvbnRlbnRUeXBlQ29ubmVjdGlvbkVkZ2UgPSBDb250ZW50VHlwZUNvbm5lY3Rpb25FZGdlICYgRWRnZSAmIE9uZVRvT25lQ29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdDb250ZW50Tm9kZVRvQ29udGVudFR5cGVDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBPcGFxdWUgcmVmZXJlbmNlIHRvIHRoZSBub2RlcyBwb3NpdGlvbiBpbiB0aGUgY29ubmVjdGlvbi4gVmFsdWUgY2FuIGJlIHVzZWQgd2l0aCBwYWdpbmF0aW9uIGFyZ3MuICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgbm9kZSBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZTogQ29udGVudFR5cGU7XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBDb250ZW50Tm9kZSB0eXBlIGFuZCB0aGUgVXNlciB0eXBlICovXG5leHBvcnQgdHlwZSBDb250ZW50Tm9kZVRvRWRpdExhc3RDb25uZWN0aW9uRWRnZSA9IEVkZ2UgJiBPbmVUb09uZUNvbm5lY3Rpb24gJiBVc2VyQ29ubmVjdGlvbkVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnQ29udGVudE5vZGVUb0VkaXRMYXN0Q29ubmVjdGlvbkVkZ2UnO1xuICAvKiogT3BhcXVlIHJlZmVyZW5jZSB0byB0aGUgbm9kZXMgcG9zaXRpb24gaW4gdGhlIGNvbm5lY3Rpb24uIFZhbHVlIGNhbiBiZSB1c2VkIHdpdGggcGFnaW5hdGlvbiBhcmdzLiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIG5vZGUgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGU6IFVzZXI7XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBDb250ZW50Tm9kZSB0eXBlIGFuZCB0aGUgVXNlciB0eXBlICovXG5leHBvcnQgdHlwZSBDb250ZW50Tm9kZVRvRWRpdExvY2tDb25uZWN0aW9uRWRnZSA9IEVkZ2UgJiBPbmVUb09uZUNvbm5lY3Rpb24gJiBVc2VyQ29ubmVjdGlvbkVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnQ29udGVudE5vZGVUb0VkaXRMb2NrQ29ubmVjdGlvbkVkZ2UnO1xuICAvKiogT3BhcXVlIHJlZmVyZW5jZSB0byB0aGUgbm9kZXMgcG9zaXRpb24gaW4gdGhlIGNvbm5lY3Rpb24uIFZhbHVlIGNhbiBiZSB1c2VkIHdpdGggcGFnaW5hdGlvbiBhcmdzLiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIHRpbWVzdGFtcCBmb3Igd2hlbiB0aGUgbm9kZSB3YXMgbGFzdCBlZGl0ZWQgKi9cbiAgbG9ja1RpbWVzdGFtcD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgbm9kZSBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZTogVXNlcjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIENvbnRlbnROb2RlIHR5cGUgYW5kIHRoZSBFbnF1ZXVlZFNjcmlwdCB0eXBlICovXG5leHBvcnQgdHlwZSBDb250ZW50Tm9kZVRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIEVucXVldWVkU2NyaXB0Q29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdDb250ZW50Tm9kZVRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uJztcbiAgLyoqIEVkZ2VzIGZvciB0aGUgQ29udGVudE5vZGVUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvbiBjb25uZWN0aW9uICovXG4gIGVkZ2VzOiBBcnJheTxDb250ZW50Tm9kZVRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxFbnF1ZXVlZFNjcmlwdD47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IENvbnRlbnROb2RlVG9FbnF1ZXVlZFNjcmlwdENvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBBbiBlZGdlIGluIGEgY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgQ29udGVudE5vZGVUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvbkVkZ2UgPSBFZGdlICYgRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdDb250ZW50Tm9kZVRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogRW5xdWV1ZWRTY3JpcHQ7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtDb250ZW50Tm9kZVRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uJnF1b3Q7ICovXG5leHBvcnQgdHlwZSBDb250ZW50Tm9kZVRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uUGFnZUluZm8gPSBFbnF1ZXVlZFNjcmlwdENvbm5lY3Rpb25QYWdlSW5mbyAmIFBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdDb250ZW50Tm9kZVRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgQ29udGVudE5vZGUgdHlwZSBhbmQgdGhlIEVucXVldWVkU3R5bGVzaGVldCB0eXBlICovXG5leHBvcnQgdHlwZSBDb250ZW50Tm9kZVRvRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvbiA9IENvbm5lY3Rpb24gJiBFbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ0NvbnRlbnROb2RlVG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uJztcbiAgLyoqIEVkZ2VzIGZvciB0aGUgQ29udGVudE5vZGVUb0VucXVldWVkU3R5bGVzaGVldENvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8Q29udGVudE5vZGVUb0VucXVldWVkU3R5bGVzaGVldENvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBub2RlcyBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZXM6IEFycmF5PEVucXVldWVkU3R5bGVzaGVldD47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IENvbnRlbnROb2RlVG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIENvbnRlbnROb2RlVG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uRWRnZSA9IEVkZ2UgJiBFbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdDb250ZW50Tm9kZVRvRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvbkVkZ2UnO1xuICAvKiogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaXRlbSBhdCB0aGUgZW5kIG9mIHRoZSBlZGdlICovXG4gIG5vZGU6IEVucXVldWVkU3R5bGVzaGVldDtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlICZxdW90O0NvbnRlbnROb2RlVG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uJnF1b3Q7ICovXG5leHBvcnQgdHlwZSBDb250ZW50Tm9kZVRvRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvblBhZ2VJbmZvID0gRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvblBhZ2VJbmZvICYgUGFnZUluZm8gJiBXcFBhZ2VJbmZvICYge1xuICBfX3R5cGVuYW1lPzogJ0NvbnRlbnROb2RlVG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIFRoZSB0ZW1wbGF0ZSBhc3NpZ25lZCB0byBhIG5vZGUgb2YgY29udGVudCAqL1xuZXhwb3J0IHR5cGUgQ29udGVudFRlbXBsYXRlID0ge1xuICAvKiogVGhlIG5hbWUgb2YgdGhlIHRlbXBsYXRlICovXG4gIHRlbXBsYXRlTmFtZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogQW4gUG9zdCBUeXBlIG9iamVjdCAqL1xuZXhwb3J0IHR5cGUgQ29udGVudFR5cGUgPSBOb2RlICYgVW5pZm9ybVJlc291cmNlSWRlbnRpZmlhYmxlICYge1xuICBfX3R5cGVuYW1lPzogJ0NvbnRlbnRUeXBlJztcbiAgLyoqIFdoZXRoZXIgdGhpcyBjb250ZW50IHR5cGUgc2hvdWxkIGNhbiBiZSBleHBvcnRlZC4gKi9cbiAgY2FuRXhwb3J0PzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIENvbnRlbnRUeXBlIHR5cGUgYW5kIHRoZSBUYXhvbm9teSB0eXBlICovXG4gIGNvbm5lY3RlZFRheG9ub21pZXM/OiBNYXliZTxDb250ZW50VHlwZVRvVGF4b25vbXlDb25uZWN0aW9uPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgQ29udGVudFR5cGUgdHlwZSBhbmQgdGhlIENvbnRlbnROb2RlIHR5cGUgKi9cbiAgY29udGVudE5vZGVzPzogTWF5YmU8Q29udGVudFR5cGVUb0NvbnRlbnROb2RlQ29ubmVjdGlvbj47XG4gIC8qKiBXaGV0aGVyIGNvbnRlbnQgb2YgdGhpcyB0eXBlIHNob3VsZCBiZSBkZWxldGVkIHdoZW4gdGhlIGF1dGhvciBvZiBpdCBpcyBkZWxldGVkIGZyb20gdGhlIHN5c3RlbS4gKi9cbiAgZGVsZXRlV2l0aFVzZXI/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIERlc2NyaXB0aW9uIG9mIHRoZSBjb250ZW50IHR5cGUuICovXG4gIGRlc2NyaXB0aW9uPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdG8gZXhjbHVkZSBub2RlcyBvZiB0aGlzIGNvbnRlbnQgdHlwZSBmcm9tIGZyb250IGVuZCBzZWFyY2ggcmVzdWx0cy4gKi9cbiAgZXhjbHVkZUZyb21TZWFyY2g/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBwbHVyYWwgbmFtZSBvZiB0aGUgY29udGVudCB0eXBlIHdpdGhpbiB0aGUgR3JhcGhRTCBTY2hlbWEuICovXG4gIGdyYXBocWxQbHVyYWxOYW1lPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBzaW5ndWxhciBuYW1lIG9mIHRoZSBjb250ZW50IHR5cGUgd2l0aGluIHRoZSBHcmFwaFFMIFNjaGVtYS4gKi9cbiAgZ3JhcGhxbFNpbmdsZU5hbWU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hldGhlciB0aGlzIGNvbnRlbnQgdHlwZSBzaG91bGQgaGF2ZSBhcmNoaXZlcy4gQ29udGVudCBhcmNoaXZlcyBhcmUgZ2VuZXJhdGVkIGJ5IHR5cGUgYW5kIGJ5IGRhdGUuICovXG4gIGhhc0FyY2hpdmU/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdGhlIGNvbnRlbnQgdHlwZSBpcyBoaWVyYXJjaGljYWwsIGZvciBleGFtcGxlIHBhZ2VzLiAqL1xuICBoaWVyYXJjaGljYWw/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgcG9zdC10eXBlIG9iamVjdC4gKi9cbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddO1xuICAvKiogV2hldGhlciB0aGUgbm9kZSBpcyBhIENvbnRlbnQgTm9kZSAqL1xuICBpc0NvbnRlbnROb2RlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hldGhlciB0aGlzIHBhZ2UgaXMgc2V0IHRvIHRoZSBzdGF0aWMgZnJvbnQgcGFnZS4gKi9cbiAgaXNGcm9udFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGV0aGVyIHRoaXMgcGFnZSBpcyBzZXQgdG8gdGhlIGJsb2cgcG9zdHMgcGFnZS4gKi9cbiAgaXNQb3N0c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGV0aGVyIHRoZSBvYmplY3QgaXMgcmVzdHJpY3RlZCBmcm9tIHRoZSBjdXJyZW50IHZpZXdlciAqL1xuICBpc1Jlc3RyaWN0ZWQ/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdGhlIG5vZGUgaXMgYSBUZXJtICovXG4gIGlzVGVybU5vZGU6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBEaXNwbGF5IG5hbWUgb2YgdGhlIGNvbnRlbnQgdHlwZS4gKi9cbiAgbGFiZWw/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogRGV0YWlscyBhYm91dCB0aGUgY29udGVudCB0eXBlIGxhYmVscy4gKi9cbiAgbGFiZWxzPzogTWF5YmU8UG9zdFR5cGVMYWJlbERldGFpbHM+O1xuICAvKiogVGhlIG5hbWUgb2YgdGhlIGljb24gZmlsZSB0byBkaXNwbGF5IGFzIGEgbWVudSBpY29uLiAqL1xuICBtZW51SWNvbj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgcG9zaXRpb24gb2YgdGhpcyBwb3N0IHR5cGUgaW4gdGhlIG1lbnUuIE9ubHkgYXBwbGllcyBpZiBzaG93X2luX21lbnUgaXMgdHJ1ZS4gKi9cbiAgbWVudVBvc2l0aW9uPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpbnRlcm5hbCBuYW1lIG9mIHRoZSBwb3N0IHR5cGUuIFRoaXMgc2hvdWxkIG5vdCBiZSB1c2VkIGZvciBkaXNwbGF5IHB1cnBvc2VzLiAqL1xuICBuYW1lPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgYSBjb250ZW50IHR5cGUgaXMgaW50ZW5kZWQgZm9yIHVzZSBwdWJsaWNseSBlaXRoZXIgdmlhIHRoZSBhZG1pbiBpbnRlcmZhY2Ugb3IgYnkgZnJvbnQtZW5kIHVzZXJzLiBXaGlsZSB0aGUgZGVmYXVsdCBzZXR0aW5ncyBvZiBleGNsdWRlX2Zyb21fc2VhcmNoLCBwdWJsaWNseV9xdWVyeWFibGUsIHNob3dfdWksIGFuZCBzaG93X2luX25hdl9tZW51cyBhcmUgaW5oZXJpdGVkIGZyb20gcHVibGljLCBlYWNoIGRvZXMgbm90IHJlbHkgb24gdGhpcyByZWxhdGlvbnNoaXAgYW5kIGNvbnRyb2xzIGEgdmVyeSBzcGVjaWZpYyBpbnRlbnRpb24uICovXG4gIHB1YmxpYz86IE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J10+O1xuICAvKiogV2hldGhlciBxdWVyaWVzIGNhbiBiZSBwZXJmb3JtZWQgb24gdGhlIGZyb250IGVuZCBmb3IgdGhlIGNvbnRlbnQgdHlwZSBhcyBwYXJ0IG9mIHBhcnNlX3JlcXVlc3QoKS4gKi9cbiAgcHVibGljbHlRdWVyeWFibGU/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIE5hbWUgb2YgY29udGVudCB0eXBlIHRvIGRpc3BsYXkgaW4gUkVTVCBBUEkgJnF1b3Q7d3AvdjImcXVvdDsgbmFtZXNwYWNlLiAqL1xuICByZXN0QmFzZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgUkVTVCBDb250cm9sbGVyIGNsYXNzIGFzc2lnbmVkIHRvIGhhbmRsaW5nIHRoaXMgY29udGVudCB0eXBlLiAqL1xuICByZXN0Q29udHJvbGxlckNsYXNzPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIE1ha2VzIHRoaXMgY29udGVudCB0eXBlIGF2YWlsYWJsZSB2aWEgdGhlIGFkbWluIGJhci4gKi9cbiAgc2hvd0luQWRtaW5CYXI/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdG8gYWRkIHRoZSBjb250ZW50IHR5cGUgdG8gdGhlIEdyYXBoUUwgU2NoZW1hLiAqL1xuICBzaG93SW5HcmFwaHFsPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVyZSB0byBzaG93IHRoZSBjb250ZW50IHR5cGUgaW4gdGhlIGFkbWluIG1lbnUuIFRvIHdvcmssICRzaG93X3VpIG11c3QgYmUgdHJ1ZS4gSWYgdHJ1ZSwgdGhlIHBvc3QgdHlwZSBpcyBzaG93biBpbiBpdHMgb3duIHRvcCBsZXZlbCBtZW51LiBJZiBmYWxzZSwgbm8gbWVudSBpcyBzaG93bi4gSWYgYSBzdHJpbmcgb2YgYW4gZXhpc3RpbmcgdG9wIGxldmVsIG1lbnUgKGVnLiAmcXVvdDt0b29scy5waHAmcXVvdDsgb3IgJnF1b3Q7ZWRpdC5waHA/cG9zdF90eXBlPXBhZ2UmcXVvdDspLCB0aGUgcG9zdCB0eXBlIHdpbGwgYmUgcGxhY2VkIGFzIGEgc3ViLW1lbnUgb2YgdGhhdC4gKi9cbiAgc2hvd0luTWVudT86IE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J10+O1xuICAvKiogTWFrZXMgdGhpcyBjb250ZW50IHR5cGUgYXZhaWxhYmxlIGZvciBzZWxlY3Rpb24gaW4gbmF2aWdhdGlvbiBtZW51cy4gKi9cbiAgc2hvd0luTmF2TWVudXM/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdGhlIGNvbnRlbnQgdHlwZSBpcyBhc3NvY2lhdGVkIHdpdGggYSByb3V0ZSB1bmRlciB0aGUgdGhlIFJFU1QgQVBJICZxdW90O3dwL3YyJnF1b3Q7IG5hbWVzcGFjZS4gKi9cbiAgc2hvd0luUmVzdD86IE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J10+O1xuICAvKiogV2hldGhlciB0byBnZW5lcmF0ZSBhbmQgYWxsb3cgYSBVSSBmb3IgbWFuYWdpbmcgdGhpcyBjb250ZW50IHR5cGUgaW4gdGhlIGFkbWluLiAqL1xuICBzaG93VWk/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSB1bmlxdWUgcmVzb3VyY2UgaWRlbnRpZmllciBwYXRoICovXG4gIHVyaT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG5cbi8qKiBBbiBQb3N0IFR5cGUgb2JqZWN0ICovXG5leHBvcnQgdHlwZSBDb250ZW50VHlwZUNvbm5lY3RlZFRheG9ub21pZXNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xufTtcblxuXG4vKiogQW4gUG9zdCBUeXBlIG9iamVjdCAqL1xuZXhwb3J0IHR5cGUgQ29udGVudFR5cGVDb250ZW50Tm9kZXNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICB3aGVyZT86IElucHV0TWF5YmU8Q29udGVudFR5cGVUb0NvbnRlbnROb2RlQ29ubmVjdGlvbldoZXJlQXJncz47XG59O1xuXG4vKiogQ29ubmVjdGlvbiB0byBDb250ZW50VHlwZSBOb2RlcyAqL1xuZXhwb3J0IHR5cGUgQ29udGVudFR5cGVDb25uZWN0aW9uID0ge1xuICAvKiogQSBsaXN0IG9mIGVkZ2VzIChyZWxhdGlvbmFsIGNvbnRleHQpIGJldHdlZW4gUm9vdFF1ZXJ5IGFuZCBjb25uZWN0ZWQgQ29udGVudFR5cGUgTm9kZXMgKi9cbiAgZWRnZXM6IEFycmF5PENvbnRlbnRUeXBlQ29ubmVjdGlvbkVkZ2U+O1xuICAvKiogQSBsaXN0IG9mIGNvbm5lY3RlZCBDb250ZW50VHlwZSBOb2RlcyAqL1xuICBub2RlczogQXJyYXk8Q29udGVudFR5cGU+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBDb250ZW50VHlwZUNvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBFZGdlIGJldHdlZW4gYSBOb2RlIGFuZCBhIGNvbm5lY3RlZCBDb250ZW50VHlwZSAqL1xuZXhwb3J0IHR5cGUgQ29udGVudFR5cGVDb25uZWN0aW9uRWRnZSA9IHtcbiAgLyoqIE9wYXF1ZSByZWZlcmVuY2UgdG8gdGhlIG5vZGVzIHBvc2l0aW9uIGluIHRoZSBjb25uZWN0aW9uLiBWYWx1ZSBjYW4gYmUgdXNlZCB3aXRoIHBhZ2luYXRpb24gYXJncy4gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBjb25uZWN0ZWQgQ29udGVudFR5cGUgTm9kZSAqL1xuICBub2RlOiBDb250ZW50VHlwZTtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlIGNvbm5lY3RlZCBDb250ZW50VHlwZUNvbm5lY3Rpb25FZGdlICovXG5leHBvcnQgdHlwZSBDb250ZW50VHlwZUNvbm5lY3Rpb25QYWdlSW5mbyA9IHtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBBbGxvd2VkIENvbnRlbnQgVHlwZXMgKi9cbmV4cG9ydCBlbnVtIENvbnRlbnRUeXBlRW51bSB7XG4gIC8qKiBUaGUgVHlwZSBvZiBDb250ZW50IG9iamVjdCAqL1xuICBBdHRhY2htZW50ID0gJ0FUVEFDSE1FTlQnLFxuICAvKiogVGhlIFR5cGUgb2YgQ29udGVudCBvYmplY3QgKi9cbiAgUGFnZSA9ICdQQUdFJyxcbiAgLyoqIFRoZSBUeXBlIG9mIENvbnRlbnQgb2JqZWN0ICovXG4gIFBvc3QgPSAnUE9TVCdcbn1cblxuLyoqIFRoZSBUeXBlIG9mIElkZW50aWZpZXIgdXNlZCB0byBmZXRjaCBhIHNpbmdsZSBDb250ZW50IFR5cGUgbm9kZS4gVG8gYmUgdXNlZCBhbG9uZyB3aXRoIHRoZSBcImlkXCIgZmllbGQuIERlZmF1bHQgaXMgXCJJRFwiLiAqL1xuZXhwb3J0IGVudW0gQ29udGVudFR5cGVJZFR5cGVFbnVtIHtcbiAgLyoqIFRoZSBnbG9iYWxseSB1bmlxdWUgSUQgKi9cbiAgSWQgPSAnSUQnLFxuICAvKiogVGhlIG5hbWUgb2YgdGhlIGNvbnRlbnQgdHlwZS4gKi9cbiAgTmFtZSA9ICdOQU1FJ1xufVxuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBDb250ZW50VHlwZSB0eXBlIGFuZCB0aGUgQ29udGVudE5vZGUgdHlwZSAqL1xuZXhwb3J0IHR5cGUgQ29udGVudFR5cGVUb0NvbnRlbnROb2RlQ29ubmVjdGlvbiA9IENvbm5lY3Rpb24gJiBDb250ZW50Tm9kZUNvbm5lY3Rpb24gJiB7XG4gIF9fdHlwZW5hbWU/OiAnQ29udGVudFR5cGVUb0NvbnRlbnROb2RlQ29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIENvbnRlbnRUeXBlVG9Db250ZW50Tm9kZUNvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8Q29udGVudFR5cGVUb0NvbnRlbnROb2RlQ29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIG5vZGVzIG9mIHRoZSBjb25uZWN0aW9uLCB3aXRob3V0IHRoZSBlZGdlcyAqL1xuICBub2RlczogQXJyYXk8Q29udGVudE5vZGU+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBDb250ZW50VHlwZVRvQ29udGVudE5vZGVDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIENvbnRlbnRUeXBlVG9Db250ZW50Tm9kZUNvbm5lY3Rpb25FZGdlID0gQ29udGVudE5vZGVDb25uZWN0aW9uRWRnZSAmIEVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnQ29udGVudFR5cGVUb0NvbnRlbnROb2RlQ29ubmVjdGlvbkVkZ2UnO1xuICAvKiogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaXRlbSBhdCB0aGUgZW5kIG9mIHRoZSBlZGdlICovXG4gIG5vZGU6IENvbnRlbnROb2RlO1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgJnF1b3Q7Q29udGVudFR5cGVUb0NvbnRlbnROb2RlQ29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgQ29udGVudFR5cGVUb0NvbnRlbnROb2RlQ29ubmVjdGlvblBhZ2VJbmZvID0gQ29udGVudE5vZGVDb25uZWN0aW9uUGFnZUluZm8gJiBQYWdlSW5mbyAmIFdwUGFnZUluZm8gJiB7XG4gIF9fdHlwZW5hbWU/OiAnQ29udGVudFR5cGVUb0NvbnRlbnROb2RlQ29ubmVjdGlvblBhZ2VJbmZvJztcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBBcmd1bWVudHMgZm9yIGZpbHRlcmluZyB0aGUgQ29udGVudFR5cGVUb0NvbnRlbnROb2RlQ29ubmVjdGlvbiBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBDb250ZW50VHlwZVRvQ29udGVudE5vZGVDb25uZWN0aW9uV2hlcmVBcmdzID0ge1xuICAvKiogVGhlIFR5cGVzIG9mIGNvbnRlbnQgdG8gZmlsdGVyICovXG4gIGNvbnRlbnRUeXBlcz86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxDb250ZW50VHlwZUVudW0+Pj47XG4gIC8qKiBGaWx0ZXIgdGhlIGNvbm5lY3Rpb24gYmFzZWQgb24gZGF0ZXMgKi9cbiAgZGF0ZVF1ZXJ5PzogSW5wdXRNYXliZTxEYXRlUXVlcnlJbnB1dD47XG4gIC8qKiBUcnVlIGZvciBvYmplY3RzIHdpdGggcGFzc3dvcmRzOyBGYWxzZSBmb3Igb2JqZWN0cyB3aXRob3V0IHBhc3N3b3JkczsgbnVsbCBmb3IgYWxsIG9iamVjdHMgd2l0aCBvciB3aXRob3V0IHBhc3N3b3JkcyAqL1xuICBoYXNQYXNzd29yZD86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIFNwZWNpZmljIGRhdGFiYXNlIElEIG9mIHRoZSBvYmplY3QgKi9cbiAgaWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIElEcyBmb3IgdGhlIG9iamVjdHMgdG8gcmV0cmlldmUgKi9cbiAgaW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEdldCBvYmplY3RzIHdpdGggYSBzcGVjaWZpYyBtaW1lVHlwZSBwcm9wZXJ0eSAqL1xuICBtaW1lVHlwZT86IElucHV0TWF5YmU8TWltZVR5cGVFbnVtPjtcbiAgLyoqIFNsdWcgLyBwb3N0X25hbWUgb2YgdGhlIG9iamVjdCAqL1xuICBuYW1lPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBTcGVjaWZ5IG9iamVjdHMgdG8gcmV0cmlldmUuIFVzZSBzbHVncyAqL1xuICBuYW1lSW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTcGVjaWZ5IElEcyBOT1QgdG8gcmV0cmlldmUuIElmIHRoaXMgaXMgdXNlZCBpbiB0aGUgc2FtZSBxdWVyeSBhcyBcImluXCIsIGl0IHdpbGwgYmUgaWdub3JlZCAqL1xuICBub3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogV2hhdCBwYXJhbWV0ZXIgdG8gdXNlIHRvIG9yZGVyIHRoZSBvYmplY3RzIGJ5LiAqL1xuICBvcmRlcmJ5PzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFBvc3RPYmplY3RzQ29ubmVjdGlvbk9yZGVyYnlJbnB1dD4+PjtcbiAgLyoqIFVzZSBJRCB0byByZXR1cm4gb25seSBjaGlsZHJlbi4gVXNlIDAgdG8gcmV0dXJuIG9ubHkgdG9wLWxldmVsIGl0ZW1zICovXG4gIHBhcmVudD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG4gIC8qKiBTcGVjaWZ5IG9iamVjdHMgd2hvc2UgcGFyZW50IGlzIGluIGFuIGFycmF5ICovXG4gIHBhcmVudEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTcGVjaWZ5IHBvc3RzIHdob3NlIHBhcmVudCBpcyBub3QgaW4gYW4gYXJyYXkgKi9cbiAgcGFyZW50Tm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNob3cgcG9zdHMgd2l0aCBhIHNwZWNpZmljIHBhc3N3b3JkLiAqL1xuICBwYXNzd29yZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogU2hvdyBQb3N0cyBiYXNlZCBvbiBhIGtleXdvcmQgc2VhcmNoICovXG4gIHNlYXJjaD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogUmV0cmlldmUgcG9zdHMgd2hlcmUgcG9zdCBzdGF0dXMgaXMgaW4gYW4gYXJyYXkuICovXG4gIHN0YXRpPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFBvc3RTdGF0dXNFbnVtPj4+O1xuICAvKiogU2hvdyBwb3N0cyB3aXRoIGEgc3BlY2lmaWMgc3RhdHVzLiAqL1xuICBzdGF0dXM/OiBJbnB1dE1heWJlPFBvc3RTdGF0dXNFbnVtPjtcbiAgLyoqIFRpdGxlIG9mIHRoZSBvYmplY3QgKi9cbiAgdGl0bGU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIENvbnRlbnRUeXBlIHR5cGUgYW5kIHRoZSBUYXhvbm9teSB0eXBlICovXG5leHBvcnQgdHlwZSBDb250ZW50VHlwZVRvVGF4b25vbXlDb25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIFRheG9ub215Q29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdDb250ZW50VHlwZVRvVGF4b25vbXlDb25uZWN0aW9uJztcbiAgLyoqIEVkZ2VzIGZvciB0aGUgQ29udGVudFR5cGVUb1RheG9ub215Q29ubmVjdGlvbiBjb25uZWN0aW9uICovXG4gIGVkZ2VzOiBBcnJheTxDb250ZW50VHlwZVRvVGF4b25vbXlDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxUYXhvbm9teT47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IENvbnRlbnRUeXBlVG9UYXhvbm9teUNvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBBbiBlZGdlIGluIGEgY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgQ29udGVudFR5cGVUb1RheG9ub215Q29ubmVjdGlvbkVkZ2UgPSBFZGdlICYgVGF4b25vbXlDb25uZWN0aW9uRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdDb250ZW50VHlwZVRvVGF4b25vbXlDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogVGF4b25vbXk7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtDb250ZW50VHlwZVRvVGF4b25vbXlDb25uZWN0aW9uJnF1b3Q7ICovXG5leHBvcnQgdHlwZSBDb250ZW50VHlwZVRvVGF4b25vbXlDb25uZWN0aW9uUGFnZUluZm8gPSBQYWdlSW5mbyAmIFRheG9ub215Q29ubmVjdGlvblBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdDb250ZW50VHlwZVRvVGF4b25vbXlDb25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIEFsbG93ZWQgQ29udGVudCBUeXBlcyBvZiB0aGUgQ2F0ZWdvcnkgdGF4b25vbXkuICovXG5leHBvcnQgZW51bSBDb250ZW50VHlwZXNPZkNhdGVnb3J5RW51bSB7XG4gIC8qKiBUaGUgVHlwZSBvZiBDb250ZW50IG9iamVjdCAqL1xuICBQb3N0ID0gJ1BPU1QnXG59XG5cbi8qKiBBbGxvd2VkIENvbnRlbnQgVHlwZXMgb2YgdGhlIFBvc3RGb3JtYXQgdGF4b25vbXkuICovXG5leHBvcnQgZW51bSBDb250ZW50VHlwZXNPZlBvc3RGb3JtYXRFbnVtIHtcbiAgLyoqIFRoZSBUeXBlIG9mIENvbnRlbnQgb2JqZWN0ICovXG4gIFBvc3QgPSAnUE9TVCdcbn1cblxuLyoqIEFsbG93ZWQgQ29udGVudCBUeXBlcyBvZiB0aGUgVGFnIHRheG9ub215LiAqL1xuZXhwb3J0IGVudW0gQ29udGVudFR5cGVzT2ZUYWdFbnVtIHtcbiAgLyoqIFRoZSBUeXBlIG9mIENvbnRlbnQgb2JqZWN0ICovXG4gIFBvc3QgPSAnUE9TVCdcbn1cblxuLyoqIElucHV0IGZvciB0aGUgY3JlYXRlQ2F0ZWdvcnkgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBDcmVhdGVDYXRlZ29yeUlucHV0ID0ge1xuICAvKiogVGhlIHNsdWcgdGhhdCB0aGUgY2F0ZWdvcnkgd2lsbCBiZSBhbiBhbGlhcyBvZiAqL1xuICBhbGlhc09mPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGlzIGlzIGFuIElEIHRoYXQgY2FuIGJlIHBhc3NlZCB0byBhIG11dGF0aW9uIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIGNhdGVnb3J5IG9iamVjdCAqL1xuICBkZXNjcmlwdGlvbj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIG5hbWUgb2YgdGhlIGNhdGVnb3J5IG9iamVjdCB0byBtdXRhdGUgKi9cbiAgbmFtZTogU2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J107XG4gIC8qKiBUaGUgSUQgb2YgdGhlIGNhdGVnb3J5IHRoYXQgc2hvdWxkIGJlIHNldCBhcyB0aGUgcGFyZW50ICovXG4gIHBhcmVudElkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPjtcbiAgLyoqIElmIHRoaXMgYXJndW1lbnQgZXhpc3RzIHRoZW4gdGhlIHNsdWcgd2lsbCBiZSBjaGVja2VkIHRvIHNlZSBpZiBpdCBpcyBub3QgYW4gZXhpc3RpbmcgdmFsaWQgdGVybS4gSWYgdGhhdCBjaGVjayBzdWNjZWVkcyAoaXQgaXMgbm90IGEgdmFsaWQgdGVybSksIHRoZW4gaXQgaXMgYWRkZWQgYW5kIHRoZSB0ZXJtIGlkIGlzIGdpdmVuLiBJZiBpdCBmYWlscywgdGhlbiBhIGNoZWNrIGlzIG1hZGUgdG8gd2hldGhlciB0aGUgdGF4b25vbXkgaXMgaGllcmFyY2hpY2FsIGFuZCB0aGUgcGFyZW50IGFyZ3VtZW50IGlzIG5vdCBlbXB0eS4gSWYgdGhlIHNlY29uZCBjaGVjayBzdWNjZWVkcywgdGhlIHRlcm0gd2lsbCBiZSBpbnNlcnRlZCBhbmQgdGhlIHRlcm0gaWQgd2lsbCBiZSBnaXZlbi4gSWYgdGhlIHNsdWcgYXJndW1lbnQgaXMgZW1wdHksIHRoZW4gaXQgd2lsbCBiZSBjYWxjdWxhdGVkIGZyb20gdGhlIHRlcm0gbmFtZS4gKi9cbiAgc2x1Zz86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIFRoZSBwYXlsb2FkIGZvciB0aGUgY3JlYXRlQ2F0ZWdvcnkgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBDcmVhdGVDYXRlZ29yeVBheWxvYWQgPSB7XG4gIF9fdHlwZW5hbWU/OiAnQ3JlYXRlQ2F0ZWdvcnlQYXlsb2FkJztcbiAgLyoqIFRoZSBjcmVhdGVkIGNhdGVnb3J5ICovXG4gIGNhdGVnb3J5PzogTWF5YmU8Q2F0ZWdvcnk+O1xuICAvKiogSWYgYSAmIzAzOTtjbGllbnRNdXRhdGlvbklkJiMwMzk7IGlucHV0IGlzIHByb3ZpZGVkIHRvIHRoZSBtdXRhdGlvbiwgaXQgd2lsbCBiZSByZXR1cm5lZCBhcyBvdXRwdXQgb24gdGhlIG11dGF0aW9uLiBUaGlzIElEIGNhbiBiZSB1c2VkIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBJbnB1dCBmb3IgdGhlIGNyZWF0ZUNvbW1lbnQgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBDcmVhdGVDb21tZW50SW5wdXQgPSB7XG4gIC8qKiBUaGUgYXBwcm92YWwgc3RhdHVzIG9mIHRoZSBjb21tZW50LiAqL1xuICBhcHByb3ZlZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIG5hbWUgb2YgdGhlIGNvbW1lbnQncyBhdXRob3IuICovXG4gIGF1dGhvcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIGVtYWlsIG9mIHRoZSBjb21tZW50J3MgYXV0aG9yLiAqL1xuICBhdXRob3JFbWFpbD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIHVybCBvZiB0aGUgY29tbWVudCdzIGF1dGhvci4gKi9cbiAgYXV0aG9yVXJsPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGlzIGlzIGFuIElEIHRoYXQgY2FuIGJlIHBhc3NlZCB0byBhIG11dGF0aW9uIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgZGF0YWJhc2UgSUQgb2YgdGhlIHBvc3Qgb2JqZWN0IHRoZSBjb21tZW50IGJlbG9uZ3MgdG8uICovXG4gIGNvbW1lbnRPbj86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogQ29udGVudCBvZiB0aGUgY29tbWVudC4gKi9cbiAgY29udGVudD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIGRhdGUgb2YgdGhlIG9iamVjdC4gUHJlZmVyYWJsZSB0byBlbnRlciBhcyB5ZWFyL21vbnRoL2RheSAoIGUuZy4gMDEvMzEvMjAxNyApIGFzIGl0IHdpbGwgcmVhcnJhbmdlIGRhdGUgYXMgZml0IGlmIGl0IGlzIG5vdCBzcGVjaWZpZWQuIEluY29tcGxldGUgZGF0ZXMgbWF5IGhhdmUgdW5pbnRlbmRlZCByZXN1bHRzIGZvciBleGFtcGxlLCBcIjIwMTdcIiBhcyB0aGUgaW5wdXQgd2lsbCB1c2UgY3VycmVudCBkYXRlIHdpdGggdGltZXN0YW1wIDIwOjE3ICAqL1xuICBkYXRlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBQYXJlbnQgY29tbWVudCBJRCBvZiBjdXJyZW50IGNvbW1lbnQuICovXG4gIHBhcmVudD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgYXBwcm92YWwgc3RhdHVzIG9mIHRoZSBjb21tZW50ICovXG4gIHN0YXR1cz86IElucHV0TWF5YmU8Q29tbWVudFN0YXR1c0VudW0+O1xuICAvKiogVHlwZSBvZiBjb21tZW50LiAqL1xuICB0eXBlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG59O1xuXG4vKiogVGhlIHBheWxvYWQgZm9yIHRoZSBjcmVhdGVDb21tZW50IG11dGF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgQ3JlYXRlQ29tbWVudFBheWxvYWQgPSB7XG4gIF9fdHlwZW5hbWU/OiAnQ3JlYXRlQ29tbWVudFBheWxvYWQnO1xuICAvKiogSWYgYSAmIzAzOTtjbGllbnRNdXRhdGlvbklkJiMwMzk7IGlucHV0IGlzIHByb3ZpZGVkIHRvIHRoZSBtdXRhdGlvbiwgaXQgd2lsbCBiZSByZXR1cm5lZCBhcyBvdXRwdXQgb24gdGhlIG11dGF0aW9uLiBUaGlzIElEIGNhbiBiZSB1c2VkIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBjb21tZW50IHRoYXQgd2FzIGNyZWF0ZWQgKi9cbiAgY29tbWVudD86IE1heWJlPENvbW1lbnQ+O1xuICAvKiogV2hldGhlciB0aGUgbXV0YXRpb24gc3VjY2VlZGVkLiBJZiB0aGUgY29tbWVudCBpcyBub3QgYXBwcm92ZWQsIHRoZSBzZXJ2ZXIgd2lsbCBub3QgcmV0dXJuIHRoZSBjb21tZW50IHRvIGEgbm9uIGF1dGhlbnRpY2F0ZWQgdXNlciwgYnV0IGEgc3VjY2VzcyBtZXNzYWdlIGNhbiBiZSByZXR1cm5lZCBpZiB0aGUgY3JlYXRlIHN1Y2NlZWRlZCwgYW5kIHRoZSBjbGllbnQgY2FuIG9wdGltaXN0aWNhbGx5IGFkZCB0aGUgY29tbWVudCB0byB0aGUgY2xpZW50IGNhY2hlICovXG4gIHN1Y2Nlc3M/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBJbnB1dCBmb3IgdGhlIGNyZWF0ZU1lZGlhSXRlbSBtdXRhdGlvbi4gKi9cbmV4cG9ydCB0eXBlIENyZWF0ZU1lZGlhSXRlbUlucHV0ID0ge1xuICAvKiogQWx0ZXJuYXRpdmUgdGV4dCB0byBkaXNwbGF5IHdoZW4gbWVkaWFJdGVtIGlzIG5vdCBkaXNwbGF5ZWQgKi9cbiAgYWx0VGV4dD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIHVzZXJJZCB0byBhc3NpZ24gYXMgdGhlIGF1dGhvciBvZiB0aGUgbWVkaWFJdGVtICovXG4gIGF1dGhvcklkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBjYXB0aW9uIGZvciB0aGUgbWVkaWFJdGVtICovXG4gIGNhcHRpb24/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoaXMgaXMgYW4gSUQgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIGEgbXV0YXRpb24gYnkgdGhlIGNsaWVudCB0byB0cmFjayB0aGUgcHJvZ3Jlc3Mgb2YgbXV0YXRpb25zIGFuZCBjYXRjaCBwb3NzaWJsZSBkdXBsaWNhdGUgbXV0YXRpb24gc3VibWlzc2lvbnMuICovXG4gIGNsaWVudE11dGF0aW9uSWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBjb21tZW50IHN0YXR1cyBmb3IgdGhlIG1lZGlhSXRlbSAqL1xuICBjb21tZW50U3RhdHVzPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgZGF0ZSBvZiB0aGUgbWVkaWFJdGVtICovXG4gIGRhdGU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBkYXRlIChpbiBHTVQgem9uZSkgb2YgdGhlIG1lZGlhSXRlbSAqL1xuICBkYXRlR210PzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBEZXNjcmlwdGlvbiBvZiB0aGUgbWVkaWFJdGVtICovXG4gIGRlc2NyaXB0aW9uPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgZmlsZSBuYW1lIG9mIHRoZSBtZWRpYUl0ZW0gKi9cbiAgZmlsZVBhdGg/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBmaWxlIHR5cGUgb2YgdGhlIG1lZGlhSXRlbSAqL1xuICBmaWxlVHlwZT86IElucHV0TWF5YmU8TWltZVR5cGVFbnVtPjtcbiAgLyoqIFRoZSBJRCBvZiB0aGUgcGFyZW50IG9iamVjdCAqL1xuICBwYXJlbnRJZD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgcGluZyBzdGF0dXMgZm9yIHRoZSBtZWRpYUl0ZW0gKi9cbiAgcGluZ1N0YXR1cz86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIHNsdWcgb2YgdGhlIG1lZGlhSXRlbSAqL1xuICBzbHVnPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgc3RhdHVzIG9mIHRoZSBtZWRpYUl0ZW0gKi9cbiAgc3RhdHVzPzogSW5wdXRNYXliZTxNZWRpYUl0ZW1TdGF0dXNFbnVtPjtcbiAgLyoqIFRoZSB0aXRsZSBvZiB0aGUgbWVkaWFJdGVtICovXG4gIHRpdGxlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG59O1xuXG4vKiogVGhlIHBheWxvYWQgZm9yIHRoZSBjcmVhdGVNZWRpYUl0ZW0gbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBDcmVhdGVNZWRpYUl0ZW1QYXlsb2FkID0ge1xuICBfX3R5cGVuYW1lPzogJ0NyZWF0ZU1lZGlhSXRlbVBheWxvYWQnO1xuICAvKiogSWYgYSAmIzAzOTtjbGllbnRNdXRhdGlvbklkJiMwMzk7IGlucHV0IGlzIHByb3ZpZGVkIHRvIHRoZSBtdXRhdGlvbiwgaXQgd2lsbCBiZSByZXR1cm5lZCBhcyBvdXRwdXQgb24gdGhlIG11dGF0aW9uLiBUaGlzIElEIGNhbiBiZSB1c2VkIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBNZWRpYUl0ZW0gb2JqZWN0IG11dGF0aW9uIHR5cGUuICovXG4gIG1lZGlhSXRlbT86IE1heWJlPE1lZGlhSXRlbT47XG59O1xuXG4vKiogSW5wdXQgZm9yIHRoZSBjcmVhdGVQYWdlIG11dGF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgQ3JlYXRlUGFnZUlucHV0ID0ge1xuICAvKiogVGhlIHVzZXJJZCB0byBhc3NpZ24gYXMgdGhlIGF1dGhvciBvZiB0aGUgb2JqZWN0ICovXG4gIGF1dGhvcklkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPjtcbiAgLyoqIFRoaXMgaXMgYW4gSUQgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIGEgbXV0YXRpb24gYnkgdGhlIGNsaWVudCB0byB0cmFjayB0aGUgcHJvZ3Jlc3Mgb2YgbXV0YXRpb25zIGFuZCBjYXRjaCBwb3NzaWJsZSBkdXBsaWNhdGUgbXV0YXRpb24gc3VibWlzc2lvbnMuICovXG4gIGNsaWVudE11dGF0aW9uSWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBjb21tZW50IHN0YXR1cyBmb3IgdGhlIG9iamVjdCAqL1xuICBjb21tZW50U3RhdHVzPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgY29udGVudCBvZiB0aGUgb2JqZWN0ICovXG4gIGNvbnRlbnQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBkYXRlIG9mIHRoZSBvYmplY3QuIFByZWZlcmFibGUgdG8gZW50ZXIgYXMgeWVhci9tb250aC9kYXkgKGUuZy4gMDEvMzEvMjAxNykgYXMgaXQgd2lsbCByZWFycmFuZ2UgZGF0ZSBhcyBmaXQgaWYgaXQgaXMgbm90IHNwZWNpZmllZC4gSW5jb21wbGV0ZSBkYXRlcyBtYXkgaGF2ZSB1bmludGVuZGVkIHJlc3VsdHMgZm9yIGV4YW1wbGUsIFwiMjAxN1wiIGFzIHRoZSBpbnB1dCB3aWxsIHVzZSBjdXJyZW50IGRhdGUgd2l0aCB0aW1lc3RhbXAgMjA6MTcgICovXG4gIGRhdGU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEEgZmllbGQgdXNlZCBmb3Igb3JkZXJpbmcgcG9zdHMuIFRoaXMgaXMgdHlwaWNhbGx5IHVzZWQgd2l0aCBuYXYgbWVudSBpdGVtcyBvciBmb3Igc3BlY2lhbCBvcmRlcmluZyBvZiBoaWVyYXJjaGljYWwgY29udGVudCB0eXBlcy4gKi9cbiAgbWVudU9yZGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgSUQgb2YgdGhlIHBhcmVudCBvYmplY3QgKi9cbiAgcGFyZW50SWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIHBhc3N3b3JkIHVzZWQgdG8gcHJvdGVjdCB0aGUgY29udGVudCBvZiB0aGUgb2JqZWN0ICovXG4gIHBhc3N3b3JkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgc2x1ZyBvZiB0aGUgb2JqZWN0ICovXG4gIHNsdWc/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBzdGF0dXMgb2YgdGhlIG9iamVjdCAqL1xuICBzdGF0dXM/OiBJbnB1dE1heWJlPFBvc3RTdGF0dXNFbnVtPjtcbiAgLyoqIFRoZSB0aXRsZSBvZiB0aGUgb2JqZWN0ICovXG4gIHRpdGxlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG59O1xuXG4vKiogVGhlIHBheWxvYWQgZm9yIHRoZSBjcmVhdGVQYWdlIG11dGF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgQ3JlYXRlUGFnZVBheWxvYWQgPSB7XG4gIF9fdHlwZW5hbWU/OiAnQ3JlYXRlUGFnZVBheWxvYWQnO1xuICAvKiogSWYgYSAmIzAzOTtjbGllbnRNdXRhdGlvbklkJiMwMzk7IGlucHV0IGlzIHByb3ZpZGVkIHRvIHRoZSBtdXRhdGlvbiwgaXQgd2lsbCBiZSByZXR1cm5lZCBhcyBvdXRwdXQgb24gdGhlIG11dGF0aW9uLiBUaGlzIElEIGNhbiBiZSB1c2VkIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBQb3N0IG9iamVjdCBtdXRhdGlvbiB0eXBlLiAqL1xuICBwYWdlPzogTWF5YmU8UGFnZT47XG59O1xuXG4vKiogSW5wdXQgZm9yIHRoZSBjcmVhdGVQb3N0Rm9ybWF0IG11dGF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgQ3JlYXRlUG9zdEZvcm1hdElucHV0ID0ge1xuICAvKiogVGhlIHNsdWcgdGhhdCB0aGUgcG9zdF9mb3JtYXQgd2lsbCBiZSBhbiBhbGlhcyBvZiAqL1xuICBhbGlhc09mPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGlzIGlzIGFuIElEIHRoYXQgY2FuIGJlIHBhc3NlZCB0byBhIG11dGF0aW9uIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIHBvc3RfZm9ybWF0IG9iamVjdCAqL1xuICBkZXNjcmlwdGlvbj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIG5hbWUgb2YgdGhlIHBvc3RfZm9ybWF0IG9iamVjdCB0byBtdXRhdGUgKi9cbiAgbmFtZTogU2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J107XG4gIC8qKiBJZiB0aGlzIGFyZ3VtZW50IGV4aXN0cyB0aGVuIHRoZSBzbHVnIHdpbGwgYmUgY2hlY2tlZCB0byBzZWUgaWYgaXQgaXMgbm90IGFuIGV4aXN0aW5nIHZhbGlkIHRlcm0uIElmIHRoYXQgY2hlY2sgc3VjY2VlZHMgKGl0IGlzIG5vdCBhIHZhbGlkIHRlcm0pLCB0aGVuIGl0IGlzIGFkZGVkIGFuZCB0aGUgdGVybSBpZCBpcyBnaXZlbi4gSWYgaXQgZmFpbHMsIHRoZW4gYSBjaGVjayBpcyBtYWRlIHRvIHdoZXRoZXIgdGhlIHRheG9ub215IGlzIGhpZXJhcmNoaWNhbCBhbmQgdGhlIHBhcmVudCBhcmd1bWVudCBpcyBub3QgZW1wdHkuIElmIHRoZSBzZWNvbmQgY2hlY2sgc3VjY2VlZHMsIHRoZSB0ZXJtIHdpbGwgYmUgaW5zZXJ0ZWQgYW5kIHRoZSB0ZXJtIGlkIHdpbGwgYmUgZ2l2ZW4uIElmIHRoZSBzbHVnIGFyZ3VtZW50IGlzIGVtcHR5LCB0aGVuIGl0IHdpbGwgYmUgY2FsY3VsYXRlZCBmcm9tIHRoZSB0ZXJtIG5hbWUuICovXG4gIHNsdWc/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbn07XG5cbi8qKiBUaGUgcGF5bG9hZCBmb3IgdGhlIGNyZWF0ZVBvc3RGb3JtYXQgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBDcmVhdGVQb3N0Rm9ybWF0UGF5bG9hZCA9IHtcbiAgX190eXBlbmFtZT86ICdDcmVhdGVQb3N0Rm9ybWF0UGF5bG9hZCc7XG4gIC8qKiBJZiBhICYjMDM5O2NsaWVudE11dGF0aW9uSWQmIzAzOTsgaW5wdXQgaXMgcHJvdmlkZWQgdG8gdGhlIG11dGF0aW9uLCBpdCB3aWxsIGJlIHJldHVybmVkIGFzIG91dHB1dCBvbiB0aGUgbXV0YXRpb24uIFRoaXMgSUQgY2FuIGJlIHVzZWQgYnkgdGhlIGNsaWVudCB0byB0cmFjayB0aGUgcHJvZ3Jlc3Mgb2YgbXV0YXRpb25zIGFuZCBjYXRjaCBwb3NzaWJsZSBkdXBsaWNhdGUgbXV0YXRpb24gc3VibWlzc2lvbnMuICovXG4gIGNsaWVudE11dGF0aW9uSWQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGNyZWF0ZWQgcG9zdF9mb3JtYXQgKi9cbiAgcG9zdEZvcm1hdD86IE1heWJlPFBvc3RGb3JtYXQ+O1xufTtcblxuLyoqIElucHV0IGZvciB0aGUgY3JlYXRlUG9zdCBtdXRhdGlvbi4gKi9cbmV4cG9ydCB0eXBlIENyZWF0ZVBvc3RJbnB1dCA9IHtcbiAgLyoqIFRoZSB1c2VySWQgdG8gYXNzaWduIGFzIHRoZSBhdXRob3Igb2YgdGhlIG9iamVjdCAqL1xuICBhdXRob3JJZD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG4gIC8qKiBTZXQgY29ubmVjdGlvbnMgYmV0d2VlbiB0aGUgcG9zdCBhbmQgY2F0ZWdvcmllcyAqL1xuICBjYXRlZ29yaWVzPzogSW5wdXRNYXliZTxQb3N0Q2F0ZWdvcmllc0lucHV0PjtcbiAgLyoqIFRoaXMgaXMgYW4gSUQgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIGEgbXV0YXRpb24gYnkgdGhlIGNsaWVudCB0byB0cmFjayB0aGUgcHJvZ3Jlc3Mgb2YgbXV0YXRpb25zIGFuZCBjYXRjaCBwb3NzaWJsZSBkdXBsaWNhdGUgbXV0YXRpb24gc3VibWlzc2lvbnMuICovXG4gIGNsaWVudE11dGF0aW9uSWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBjb21tZW50IHN0YXR1cyBmb3IgdGhlIG9iamVjdCAqL1xuICBjb21tZW50U3RhdHVzPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgY29udGVudCBvZiB0aGUgb2JqZWN0ICovXG4gIGNvbnRlbnQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBkYXRlIG9mIHRoZSBvYmplY3QuIFByZWZlcmFibGUgdG8gZW50ZXIgYXMgeWVhci9tb250aC9kYXkgKGUuZy4gMDEvMzEvMjAxNykgYXMgaXQgd2lsbCByZWFycmFuZ2UgZGF0ZSBhcyBmaXQgaWYgaXQgaXMgbm90IHNwZWNpZmllZC4gSW5jb21wbGV0ZSBkYXRlcyBtYXkgaGF2ZSB1bmludGVuZGVkIHJlc3VsdHMgZm9yIGV4YW1wbGUsIFwiMjAxN1wiIGFzIHRoZSBpbnB1dCB3aWxsIHVzZSBjdXJyZW50IGRhdGUgd2l0aCB0aW1lc3RhbXAgMjA6MTcgICovXG4gIGRhdGU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBleGNlcnB0IG9mIHRoZSBvYmplY3QgKi9cbiAgZXhjZXJwdD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQSBmaWVsZCB1c2VkIGZvciBvcmRlcmluZyBwb3N0cy4gVGhpcyBpcyB0eXBpY2FsbHkgdXNlZCB3aXRoIG5hdiBtZW51IGl0ZW1zIG9yIGZvciBzcGVjaWFsIG9yZGVyaW5nIG9mIGhpZXJhcmNoaWNhbCBjb250ZW50IHR5cGVzLiAqL1xuICBtZW51T3JkZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBwYXNzd29yZCB1c2VkIHRvIHByb3RlY3QgdGhlIGNvbnRlbnQgb2YgdGhlIG9iamVjdCAqL1xuICBwYXNzd29yZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIHBpbmcgc3RhdHVzIGZvciB0aGUgb2JqZWN0ICovXG4gIHBpbmdTdGF0dXM/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFVSTHMgdGhhdCBoYXZlIGJlZW4gcGluZ2VkLiAqL1xuICBwaW5nZWQ/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTZXQgY29ubmVjdGlvbnMgYmV0d2VlbiB0aGUgcG9zdCBhbmQgcG9zdEZvcm1hdHMgKi9cbiAgcG9zdEZvcm1hdHM/OiBJbnB1dE1heWJlPFBvc3RQb3N0Rm9ybWF0c0lucHV0PjtcbiAgLyoqIFRoZSBzbHVnIG9mIHRoZSBvYmplY3QgKi9cbiAgc2x1Zz86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIHN0YXR1cyBvZiB0aGUgb2JqZWN0ICovXG4gIHN0YXR1cz86IElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+O1xuICAvKiogU2V0IGNvbm5lY3Rpb25zIGJldHdlZW4gdGhlIHBvc3QgYW5kIHRhZ3MgKi9cbiAgdGFncz86IElucHV0TWF5YmU8UG9zdFRhZ3NJbnB1dD47XG4gIC8qKiBUaGUgdGl0bGUgb2YgdGhlIG9iamVjdCAqL1xuICB0aXRsZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVVJMcyBxdWV1ZWQgdG8gYmUgcGluZ2VkLiAqL1xuICB0b1Bpbmc/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG59O1xuXG4vKiogVGhlIHBheWxvYWQgZm9yIHRoZSBjcmVhdGVQb3N0IG11dGF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgQ3JlYXRlUG9zdFBheWxvYWQgPSB7XG4gIF9fdHlwZW5hbWU/OiAnQ3JlYXRlUG9zdFBheWxvYWQnO1xuICAvKiogSWYgYSAmIzAzOTtjbGllbnRNdXRhdGlvbklkJiMwMzk7IGlucHV0IGlzIHByb3ZpZGVkIHRvIHRoZSBtdXRhdGlvbiwgaXQgd2lsbCBiZSByZXR1cm5lZCBhcyBvdXRwdXQgb24gdGhlIG11dGF0aW9uLiBUaGlzIElEIGNhbiBiZSB1c2VkIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBQb3N0IG9iamVjdCBtdXRhdGlvbiB0eXBlLiAqL1xuICBwb3N0PzogTWF5YmU8UG9zdD47XG59O1xuXG4vKiogSW5wdXQgZm9yIHRoZSBjcmVhdGVUYWcgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBDcmVhdGVUYWdJbnB1dCA9IHtcbiAgLyoqIFRoZSBzbHVnIHRoYXQgdGhlIHBvc3RfdGFnIHdpbGwgYmUgYW4gYWxpYXMgb2YgKi9cbiAgYWxpYXNPZj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhpcyBpcyBhbiBJRCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gYSBtdXRhdGlvbiBieSB0aGUgY2xpZW50IHRvIHRyYWNrIHRoZSBwcm9ncmVzcyBvZiBtdXRhdGlvbnMgYW5kIGNhdGNoIHBvc3NpYmxlIGR1cGxpY2F0ZSBtdXRhdGlvbiBzdWJtaXNzaW9ucy4gKi9cbiAgY2xpZW50TXV0YXRpb25JZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBwb3N0X3RhZyBvYmplY3QgKi9cbiAgZGVzY3JpcHRpb24/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBuYW1lIG9mIHRoZSBwb3N0X3RhZyBvYmplY3QgdG8gbXV0YXRlICovXG4gIG5hbWU6IFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddO1xuICAvKiogSWYgdGhpcyBhcmd1bWVudCBleGlzdHMgdGhlbiB0aGUgc2x1ZyB3aWxsIGJlIGNoZWNrZWQgdG8gc2VlIGlmIGl0IGlzIG5vdCBhbiBleGlzdGluZyB2YWxpZCB0ZXJtLiBJZiB0aGF0IGNoZWNrIHN1Y2NlZWRzIChpdCBpcyBub3QgYSB2YWxpZCB0ZXJtKSwgdGhlbiBpdCBpcyBhZGRlZCBhbmQgdGhlIHRlcm0gaWQgaXMgZ2l2ZW4uIElmIGl0IGZhaWxzLCB0aGVuIGEgY2hlY2sgaXMgbWFkZSB0byB3aGV0aGVyIHRoZSB0YXhvbm9teSBpcyBoaWVyYXJjaGljYWwgYW5kIHRoZSBwYXJlbnQgYXJndW1lbnQgaXMgbm90IGVtcHR5LiBJZiB0aGUgc2Vjb25kIGNoZWNrIHN1Y2NlZWRzLCB0aGUgdGVybSB3aWxsIGJlIGluc2VydGVkIGFuZCB0aGUgdGVybSBpZCB3aWxsIGJlIGdpdmVuLiBJZiB0aGUgc2x1ZyBhcmd1bWVudCBpcyBlbXB0eSwgdGhlbiBpdCB3aWxsIGJlIGNhbGN1bGF0ZWQgZnJvbSB0aGUgdGVybSBuYW1lLiAqL1xuICBzbHVnPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG59O1xuXG4vKiogVGhlIHBheWxvYWQgZm9yIHRoZSBjcmVhdGVUYWcgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBDcmVhdGVUYWdQYXlsb2FkID0ge1xuICBfX3R5cGVuYW1lPzogJ0NyZWF0ZVRhZ1BheWxvYWQnO1xuICAvKiogSWYgYSAmIzAzOTtjbGllbnRNdXRhdGlvbklkJiMwMzk7IGlucHV0IGlzIHByb3ZpZGVkIHRvIHRoZSBtdXRhdGlvbiwgaXQgd2lsbCBiZSByZXR1cm5lZCBhcyBvdXRwdXQgb24gdGhlIG11dGF0aW9uLiBUaGlzIElEIGNhbiBiZSB1c2VkIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBjcmVhdGVkIHBvc3RfdGFnICovXG4gIHRhZz86IE1heWJlPFRhZz47XG59O1xuXG4vKiogSW5wdXQgZm9yIHRoZSBjcmVhdGVVc2VyIG11dGF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgQ3JlYXRlVXNlcklucHV0ID0ge1xuICAvKiogVXNlcidzIEFPTCBJTSBhY2NvdW50LiAqL1xuICBhaW0/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoaXMgaXMgYW4gSUQgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIGEgbXV0YXRpb24gYnkgdGhlIGNsaWVudCB0byB0cmFjayB0aGUgcHJvZ3Jlc3Mgb2YgbXV0YXRpb25zIGFuZCBjYXRjaCBwb3NzaWJsZSBkdXBsaWNhdGUgbXV0YXRpb24gc3VibWlzc2lvbnMuICovXG4gIGNsaWVudE11dGF0aW9uSWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEEgc3RyaW5nIGNvbnRhaW5pbmcgY29udGVudCBhYm91dCB0aGUgdXNlci4gKi9cbiAgZGVzY3JpcHRpb24/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEEgc3RyaW5nIHRoYXQgd2lsbCBiZSBzaG93biBvbiB0aGUgc2l0ZS4gRGVmYXVsdHMgdG8gdXNlcidzIHVzZXJuYW1lLiBJdCBpcyBsaWtlbHkgdGhhdCB5b3Ugd2lsbCB3YW50IHRvIGNoYW5nZSB0aGlzLCBmb3IgYm90aCBhcHBlYXJhbmNlIGFuZCBzZWN1cml0eSB0aHJvdWdoIG9ic2N1cml0eSAodGhhdCBpcyBpZiB5b3UgZG9udCB1c2UgYW5kIGRlbGV0ZSB0aGUgZGVmYXVsdCBhZG1pbiB1c2VyKS4gKi9cbiAgZGlzcGxheU5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIHVzZXIncyBlbWFpbCBhZGRyZXNzLiAqL1xuICBlbWFpbD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogXHRUaGUgdXNlcidzIGZpcnN0IG5hbWUuICovXG4gIGZpcnN0TmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVXNlcidzIEphYmJlciBhY2NvdW50LiAqL1xuICBqYWJiZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSB1c2VyJ3MgbGFzdCBuYW1lLiAqL1xuICBsYXN0TmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVXNlcidzIGxvY2FsZS4gKi9cbiAgbG9jYWxlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBIHN0cmluZyB0aGF0IGNvbnRhaW5zIGEgVVJMLWZyaWVuZGx5IG5hbWUgZm9yIHRoZSB1c2VyLiBUaGUgZGVmYXVsdCBpcyB0aGUgdXNlcidzIHVzZXJuYW1lLiAqL1xuICBuaWNlbmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIHVzZXIncyBuaWNrbmFtZSwgZGVmYXVsdHMgdG8gdGhlIHVzZXIncyB1c2VybmFtZS4gKi9cbiAgbmlja25hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEEgc3RyaW5nIHRoYXQgY29udGFpbnMgdGhlIHBsYWluIHRleHQgcGFzc3dvcmQgZm9yIHRoZSB1c2VyLiAqL1xuICBwYXNzd29yZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIGRhdGUgdGhlIHVzZXIgcmVnaXN0ZXJlZC4gRm9ybWF0IGlzIFktbS1kIEg6aTpzLiAqL1xuICByZWdpc3RlcmVkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBIHN0cmluZyBmb3Igd2hldGhlciB0byBlbmFibGUgdGhlIHJpY2ggZWRpdG9yIG9yIG5vdC4gRmFsc2UgaWYgbm90IGVtcHR5LiAqL1xuICByaWNoRWRpdGluZz86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQW4gYXJyYXkgb2Ygcm9sZXMgdG8gYmUgYXNzaWduZWQgdG8gdGhlIHVzZXIuICovXG4gIHJvbGVzPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogQSBzdHJpbmcgdGhhdCBjb250YWlucyB0aGUgdXNlcidzIHVzZXJuYW1lIGZvciBsb2dnaW5nIGluLiAqL1xuICB1c2VybmFtZTogU2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J107XG4gIC8qKiBBIHN0cmluZyBjb250YWluaW5nIHRoZSB1c2VyJ3MgVVJMIGZvciB0aGUgdXNlcidzIHdlYiBzaXRlLiAqL1xuICB3ZWJzaXRlVXJsPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBVc2VyJ3MgWWFob28gSU0gYWNjb3VudC4gKi9cbiAgeWltPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG59O1xuXG4vKiogVGhlIHBheWxvYWQgZm9yIHRoZSBjcmVhdGVVc2VyIG11dGF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgQ3JlYXRlVXNlclBheWxvYWQgPSB7XG4gIF9fdHlwZW5hbWU/OiAnQ3JlYXRlVXNlclBheWxvYWQnO1xuICAvKiogSWYgYSAmIzAzOTtjbGllbnRNdXRhdGlvbklkJiMwMzk7IGlucHV0IGlzIHByb3ZpZGVkIHRvIHRoZSBtdXRhdGlvbiwgaXQgd2lsbCBiZSByZXR1cm5lZCBhcyBvdXRwdXQgb24gdGhlIG11dGF0aW9uLiBUaGlzIElEIGNhbiBiZSB1c2VkIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBVc2VyIG9iamVjdCBtdXRhdGlvbiB0eXBlLiAqL1xuICB1c2VyPzogTWF5YmU8VXNlcj47XG59O1xuXG4vKiogVGhlIHRlbXBsYXRlIGFzc2lnbmVkIHRvIHRoZSBub2RlICovXG5leHBvcnQgdHlwZSBDdXN0b21UZW1wbGF0ZSA9IENvbnRlbnRUZW1wbGF0ZSAmIHtcbiAgX190eXBlbmFtZT86ICdDdXN0b21UZW1wbGF0ZSc7XG4gIC8qKiBUaGUgbmFtZSBvZiB0aGUgdGVtcGxhdGUgKi9cbiAgdGVtcGxhdGVOYW1lPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBPYmplY3QgdGhhdCBjYW4gYmUgaWRlbnRpZmllZCB3aXRoIGEgRGF0YWJhc2UgSUQgKi9cbmV4cG9ydCB0eXBlIERhdGFiYXNlSWRlbnRpZmllciA9IHtcbiAgLyoqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBzdG9yZWQgaW4gdGhlIGRhdGFiYXNlICovXG4gIGRhdGFiYXNlSWQ6IFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXTtcbn07XG5cbi8qKiBEYXRlIHZhbHVlcyAqL1xuZXhwb3J0IHR5cGUgRGF0ZUlucHV0ID0ge1xuICAvKiogRGF5IG9mIHRoZSBtb250aCAoZnJvbSAxIHRvIDMxKSAqL1xuICBkYXk/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIE1vbnRoIG51bWJlciAoZnJvbSAxIHRvIDEyKSAqL1xuICBtb250aD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogNCBkaWdpdCB5ZWFyIChlLmcuIDIwMTcpICovXG4gIHllYXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbn07XG5cbi8qKiBGaWx0ZXIgdGhlIGNvbm5lY3Rpb24gYmFzZWQgb24gaW5wdXQgKi9cbmV4cG9ydCB0eXBlIERhdGVRdWVyeUlucHV0ID0ge1xuICAvKiogTm9kZXMgc2hvdWxkIGJlIHJldHVybmVkIGFmdGVyIHRoaXMgZGF0ZSAqL1xuICBhZnRlcj86IElucHV0TWF5YmU8RGF0ZUlucHV0PjtcbiAgLyoqIE5vZGVzIHNob3VsZCBiZSByZXR1cm5lZCBiZWZvcmUgdGhpcyBkYXRlICovXG4gIGJlZm9yZT86IElucHV0TWF5YmU8RGF0ZUlucHV0PjtcbiAgLyoqIENvbHVtbiB0byBxdWVyeSBhZ2FpbnN0ICovXG4gIGNvbHVtbj86IElucHV0TWF5YmU8UG9zdE9iamVjdHNDb25uZWN0aW9uRGF0ZUNvbHVtbkVudW0+O1xuICAvKiogRm9yIGFmdGVyL2JlZm9yZSwgd2hldGhlciBleGFjdCB2YWx1ZSBzaG91bGQgYmUgbWF0Y2hlZCBvciBub3QgKi9cbiAgY29tcGFyZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogRGF5IG9mIHRoZSBtb250aCAoZnJvbSAxIHRvIDMxKSAqL1xuICBkYXk/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIEhvdXIgKGZyb20gMCB0byAyMykgKi9cbiAgaG91cj86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogRm9yIGFmdGVyL2JlZm9yZSwgd2hldGhlciBleGFjdCB2YWx1ZSBzaG91bGQgYmUgbWF0Y2hlZCBvciBub3QgKi9cbiAgaW5jbHVzaXZlPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogTWludXRlIChmcm9tIDAgdG8gNTkpICovXG4gIG1pbnV0ZT86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogTW9udGggbnVtYmVyIChmcm9tIDEgdG8gMTIpICovXG4gIG1vbnRoPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBPUiBvciBBTkQsIGhvdyB0aGUgc3ViLWFycmF5cyBzaG91bGQgYmUgY29tcGFyZWQgKi9cbiAgcmVsYXRpb24/OiBJbnB1dE1heWJlPFJlbGF0aW9uRW51bT47XG4gIC8qKiBTZWNvbmQgKDAgdG8gNTkpICovXG4gIHNlY29uZD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogV2VlayBvZiB0aGUgeWVhciAoZnJvbSAwIHRvIDUzKSAqL1xuICB3ZWVrPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiA0IGRpZ2l0IHllYXIgKGUuZy4gMjAxNykgKi9cbiAgeWVhcj86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xufTtcblxuLyoqIFRoZSB0ZW1wbGF0ZSBhc3NpZ25lZCB0byB0aGUgbm9kZSAqL1xuZXhwb3J0IHR5cGUgRGVmYXVsdFRlbXBsYXRlID0gQ29udGVudFRlbXBsYXRlICYge1xuICBfX3R5cGVuYW1lPzogJ0RlZmF1bHRUZW1wbGF0ZSc7XG4gIC8qKiBUaGUgbmFtZSBvZiB0aGUgdGVtcGxhdGUgKi9cbiAgdGVtcGxhdGVOYW1lPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBJbnB1dCBmb3IgdGhlIGRlbGV0ZUNhdGVnb3J5IG11dGF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgRGVsZXRlQ2F0ZWdvcnlJbnB1dCA9IHtcbiAgLyoqIFRoaXMgaXMgYW4gSUQgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIGEgbXV0YXRpb24gYnkgdGhlIGNsaWVudCB0byB0cmFjayB0aGUgcHJvZ3Jlc3Mgb2YgbXV0YXRpb25zIGFuZCBjYXRjaCBwb3NzaWJsZSBkdXBsaWNhdGUgbXV0YXRpb24gc3VibWlzc2lvbnMuICovXG4gIGNsaWVudE11dGF0aW9uSWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBJRCBvZiB0aGUgY2F0ZWdvcnkgdG8gZGVsZXRlICovXG4gIGlkOiBTY2FsYXJzWydJRCddWydpbnB1dCddO1xufTtcblxuLyoqIFRoZSBwYXlsb2FkIGZvciB0aGUgZGVsZXRlQ2F0ZWdvcnkgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBEZWxldGVDYXRlZ29yeVBheWxvYWQgPSB7XG4gIF9fdHlwZW5hbWU/OiAnRGVsZXRlQ2F0ZWdvcnlQYXlsb2FkJztcbiAgLyoqIFRoZSBkZWxldGVkIHRlcm0gb2JqZWN0ICovXG4gIGNhdGVnb3J5PzogTWF5YmU8Q2F0ZWdvcnk+O1xuICAvKiogSWYgYSAmIzAzOTtjbGllbnRNdXRhdGlvbklkJiMwMzk7IGlucHV0IGlzIHByb3ZpZGVkIHRvIHRoZSBtdXRhdGlvbiwgaXQgd2lsbCBiZSByZXR1cm5lZCBhcyBvdXRwdXQgb24gdGhlIG11dGF0aW9uLiBUaGlzIElEIGNhbiBiZSB1c2VkIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBJRCBvZiB0aGUgZGVsZXRlZCBvYmplY3QgKi9cbiAgZGVsZXRlZElkPzogTWF5YmU8U2NhbGFyc1snSUQnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIElucHV0IGZvciB0aGUgZGVsZXRlQ29tbWVudCBtdXRhdGlvbi4gKi9cbmV4cG9ydCB0eXBlIERlbGV0ZUNvbW1lbnRJbnB1dCA9IHtcbiAgLyoqIFRoaXMgaXMgYW4gSUQgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIGEgbXV0YXRpb24gYnkgdGhlIGNsaWVudCB0byB0cmFjayB0aGUgcHJvZ3Jlc3Mgb2YgbXV0YXRpb25zIGFuZCBjYXRjaCBwb3NzaWJsZSBkdXBsaWNhdGUgbXV0YXRpb24gc3VibWlzc2lvbnMuICovXG4gIGNsaWVudE11dGF0aW9uSWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdGhlIGNvbW1lbnQgc2hvdWxkIGJlIGZvcmNlIGRlbGV0ZWQgaW5zdGVhZCBvZiBiZWluZyBtb3ZlZCB0byB0aGUgdHJhc2ggKi9cbiAgZm9yY2VEZWxldGU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgZGVsZXRlZCBjb21tZW50IElEICovXG4gIGlkOiBTY2FsYXJzWydJRCddWydpbnB1dCddO1xufTtcblxuLyoqIFRoZSBwYXlsb2FkIGZvciB0aGUgZGVsZXRlQ29tbWVudCBtdXRhdGlvbi4gKi9cbmV4cG9ydCB0eXBlIERlbGV0ZUNvbW1lbnRQYXlsb2FkID0ge1xuICBfX3R5cGVuYW1lPzogJ0RlbGV0ZUNvbW1lbnRQYXlsb2FkJztcbiAgLyoqIElmIGEgJiMwMzk7Y2xpZW50TXV0YXRpb25JZCYjMDM5OyBpbnB1dCBpcyBwcm92aWRlZCB0byB0aGUgbXV0YXRpb24sIGl0IHdpbGwgYmUgcmV0dXJuZWQgYXMgb3V0cHV0IG9uIHRoZSBtdXRhdGlvbi4gVGhpcyBJRCBjYW4gYmUgdXNlZCBieSB0aGUgY2xpZW50IHRvIHRyYWNrIHRoZSBwcm9ncmVzcyBvZiBtdXRhdGlvbnMgYW5kIGNhdGNoIHBvc3NpYmxlIGR1cGxpY2F0ZSBtdXRhdGlvbiBzdWJtaXNzaW9ucy4gKi9cbiAgY2xpZW50TXV0YXRpb25JZD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgZGVsZXRlZCBjb21tZW50IG9iamVjdCAqL1xuICBjb21tZW50PzogTWF5YmU8Q29tbWVudD47XG4gIC8qKiBUaGUgZGVsZXRlZCBjb21tZW50IElEICovXG4gIGRlbGV0ZWRJZD86IE1heWJlPFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBJbnB1dCBmb3IgdGhlIGRlbGV0ZU1lZGlhSXRlbSBtdXRhdGlvbi4gKi9cbmV4cG9ydCB0eXBlIERlbGV0ZU1lZGlhSXRlbUlucHV0ID0ge1xuICAvKiogVGhpcyBpcyBhbiBJRCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gYSBtdXRhdGlvbiBieSB0aGUgY2xpZW50IHRvIHRyYWNrIHRoZSBwcm9ncmVzcyBvZiBtdXRhdGlvbnMgYW5kIGNhdGNoIHBvc3NpYmxlIGR1cGxpY2F0ZSBtdXRhdGlvbiBzdWJtaXNzaW9ucy4gKi9cbiAgY2xpZW50TXV0YXRpb25JZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogV2hldGhlciB0aGUgbWVkaWFJdGVtIHNob3VsZCBiZSBmb3JjZSBkZWxldGVkIGluc3RlYWQgb2YgYmVpbmcgbW92ZWQgdG8gdGhlIHRyYXNoICovXG4gIGZvcmNlRGVsZXRlPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIElEIG9mIHRoZSBtZWRpYUl0ZW0gdG8gZGVsZXRlICovXG4gIGlkOiBTY2FsYXJzWydJRCddWydpbnB1dCddO1xufTtcblxuLyoqIFRoZSBwYXlsb2FkIGZvciB0aGUgZGVsZXRlTWVkaWFJdGVtIG11dGF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgRGVsZXRlTWVkaWFJdGVtUGF5bG9hZCA9IHtcbiAgX190eXBlbmFtZT86ICdEZWxldGVNZWRpYUl0ZW1QYXlsb2FkJztcbiAgLyoqIElmIGEgJiMwMzk7Y2xpZW50TXV0YXRpb25JZCYjMDM5OyBpbnB1dCBpcyBwcm92aWRlZCB0byB0aGUgbXV0YXRpb24sIGl0IHdpbGwgYmUgcmV0dXJuZWQgYXMgb3V0cHV0IG9uIHRoZSBtdXRhdGlvbi4gVGhpcyBJRCBjYW4gYmUgdXNlZCBieSB0aGUgY2xpZW50IHRvIHRyYWNrIHRoZSBwcm9ncmVzcyBvZiBtdXRhdGlvbnMgYW5kIGNhdGNoIHBvc3NpYmxlIGR1cGxpY2F0ZSBtdXRhdGlvbiBzdWJtaXNzaW9ucy4gKi9cbiAgY2xpZW50TXV0YXRpb25JZD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgSUQgb2YgdGhlIGRlbGV0ZWQgbWVkaWFJdGVtICovXG4gIGRlbGV0ZWRJZD86IE1heWJlPFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBtZWRpYUl0ZW0gYmVmb3JlIGl0IHdhcyBkZWxldGVkICovXG4gIG1lZGlhSXRlbT86IE1heWJlPE1lZGlhSXRlbT47XG59O1xuXG4vKiogSW5wdXQgZm9yIHRoZSBkZWxldGVQYWdlIG11dGF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgRGVsZXRlUGFnZUlucHV0ID0ge1xuICAvKiogVGhpcyBpcyBhbiBJRCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gYSBtdXRhdGlvbiBieSB0aGUgY2xpZW50IHRvIHRyYWNrIHRoZSBwcm9ncmVzcyBvZiBtdXRhdGlvbnMgYW5kIGNhdGNoIHBvc3NpYmxlIGR1cGxpY2F0ZSBtdXRhdGlvbiBzdWJtaXNzaW9ucy4gKi9cbiAgY2xpZW50TXV0YXRpb25JZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogV2hldGhlciB0aGUgb2JqZWN0IHNob3VsZCBiZSBmb3JjZSBkZWxldGVkIGluc3RlYWQgb2YgYmVpbmcgbW92ZWQgdG8gdGhlIHRyYXNoICovXG4gIGZvcmNlRGVsZXRlPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIElEIG9mIHRoZSBwYWdlIHRvIGRlbGV0ZSAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnaW5wdXQnXTtcbiAgLyoqIE92ZXJyaWRlIHRoZSBlZGl0IGxvY2sgd2hlbiBhbm90aGVyIHVzZXIgaXMgZWRpdGluZyB0aGUgcG9zdCAqL1xuICBpZ25vcmVFZGl0TG9jaz86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbn07XG5cbi8qKiBUaGUgcGF5bG9hZCBmb3IgdGhlIGRlbGV0ZVBhZ2UgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBEZWxldGVQYWdlUGF5bG9hZCA9IHtcbiAgX190eXBlbmFtZT86ICdEZWxldGVQYWdlUGF5bG9hZCc7XG4gIC8qKiBJZiBhICYjMDM5O2NsaWVudE11dGF0aW9uSWQmIzAzOTsgaW5wdXQgaXMgcHJvdmlkZWQgdG8gdGhlIG11dGF0aW9uLCBpdCB3aWxsIGJlIHJldHVybmVkIGFzIG91dHB1dCBvbiB0aGUgbXV0YXRpb24uIFRoaXMgSUQgY2FuIGJlIHVzZWQgYnkgdGhlIGNsaWVudCB0byB0cmFjayB0aGUgcHJvZ3Jlc3Mgb2YgbXV0YXRpb25zIGFuZCBjYXRjaCBwb3NzaWJsZSBkdXBsaWNhdGUgbXV0YXRpb24gc3VibWlzc2lvbnMuICovXG4gIGNsaWVudE11dGF0aW9uSWQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIElEIG9mIHRoZSBkZWxldGVkIG9iamVjdCAqL1xuICBkZWxldGVkSWQ/OiBNYXliZTxTY2FsYXJzWydJRCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgb2JqZWN0IGJlZm9yZSBpdCB3YXMgZGVsZXRlZCAqL1xuICBwYWdlPzogTWF5YmU8UGFnZT47XG59O1xuXG4vKiogSW5wdXQgZm9yIHRoZSBkZWxldGVQb3N0Rm9ybWF0IG11dGF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgRGVsZXRlUG9zdEZvcm1hdElucHV0ID0ge1xuICAvKiogVGhpcyBpcyBhbiBJRCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gYSBtdXRhdGlvbiBieSB0aGUgY2xpZW50IHRvIHRyYWNrIHRoZSBwcm9ncmVzcyBvZiBtdXRhdGlvbnMgYW5kIGNhdGNoIHBvc3NpYmxlIGR1cGxpY2F0ZSBtdXRhdGlvbiBzdWJtaXNzaW9ucy4gKi9cbiAgY2xpZW50TXV0YXRpb25JZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIElEIG9mIHRoZSBwb3N0Rm9ybWF0IHRvIGRlbGV0ZSAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnaW5wdXQnXTtcbn07XG5cbi8qKiBUaGUgcGF5bG9hZCBmb3IgdGhlIGRlbGV0ZVBvc3RGb3JtYXQgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBEZWxldGVQb3N0Rm9ybWF0UGF5bG9hZCA9IHtcbiAgX190eXBlbmFtZT86ICdEZWxldGVQb3N0Rm9ybWF0UGF5bG9hZCc7XG4gIC8qKiBJZiBhICYjMDM5O2NsaWVudE11dGF0aW9uSWQmIzAzOTsgaW5wdXQgaXMgcHJvdmlkZWQgdG8gdGhlIG11dGF0aW9uLCBpdCB3aWxsIGJlIHJldHVybmVkIGFzIG91dHB1dCBvbiB0aGUgbXV0YXRpb24uIFRoaXMgSUQgY2FuIGJlIHVzZWQgYnkgdGhlIGNsaWVudCB0byB0cmFjayB0aGUgcHJvZ3Jlc3Mgb2YgbXV0YXRpb25zIGFuZCBjYXRjaCBwb3NzaWJsZSBkdXBsaWNhdGUgbXV0YXRpb24gc3VibWlzc2lvbnMuICovXG4gIGNsaWVudE11dGF0aW9uSWQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIElEIG9mIHRoZSBkZWxldGVkIG9iamVjdCAqL1xuICBkZWxldGVkSWQ/OiBNYXliZTxTY2FsYXJzWydJRCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgZGVsZXRlZCB0ZXJtIG9iamVjdCAqL1xuICBwb3N0Rm9ybWF0PzogTWF5YmU8UG9zdEZvcm1hdD47XG59O1xuXG4vKiogSW5wdXQgZm9yIHRoZSBkZWxldGVQb3N0IG11dGF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgRGVsZXRlUG9zdElucHV0ID0ge1xuICAvKiogVGhpcyBpcyBhbiBJRCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gYSBtdXRhdGlvbiBieSB0aGUgY2xpZW50IHRvIHRyYWNrIHRoZSBwcm9ncmVzcyBvZiBtdXRhdGlvbnMgYW5kIGNhdGNoIHBvc3NpYmxlIGR1cGxpY2F0ZSBtdXRhdGlvbiBzdWJtaXNzaW9ucy4gKi9cbiAgY2xpZW50TXV0YXRpb25JZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogV2hldGhlciB0aGUgb2JqZWN0IHNob3VsZCBiZSBmb3JjZSBkZWxldGVkIGluc3RlYWQgb2YgYmVpbmcgbW92ZWQgdG8gdGhlIHRyYXNoICovXG4gIGZvcmNlRGVsZXRlPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIElEIG9mIHRoZSBwb3N0IHRvIGRlbGV0ZSAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnaW5wdXQnXTtcbiAgLyoqIE92ZXJyaWRlIHRoZSBlZGl0IGxvY2sgd2hlbiBhbm90aGVyIHVzZXIgaXMgZWRpdGluZyB0aGUgcG9zdCAqL1xuICBpZ25vcmVFZGl0TG9jaz86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbn07XG5cbi8qKiBUaGUgcGF5bG9hZCBmb3IgdGhlIGRlbGV0ZVBvc3QgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBEZWxldGVQb3N0UGF5bG9hZCA9IHtcbiAgX190eXBlbmFtZT86ICdEZWxldGVQb3N0UGF5bG9hZCc7XG4gIC8qKiBJZiBhICYjMDM5O2NsaWVudE11dGF0aW9uSWQmIzAzOTsgaW5wdXQgaXMgcHJvdmlkZWQgdG8gdGhlIG11dGF0aW9uLCBpdCB3aWxsIGJlIHJldHVybmVkIGFzIG91dHB1dCBvbiB0aGUgbXV0YXRpb24uIFRoaXMgSUQgY2FuIGJlIHVzZWQgYnkgdGhlIGNsaWVudCB0byB0cmFjayB0aGUgcHJvZ3Jlc3Mgb2YgbXV0YXRpb25zIGFuZCBjYXRjaCBwb3NzaWJsZSBkdXBsaWNhdGUgbXV0YXRpb24gc3VibWlzc2lvbnMuICovXG4gIGNsaWVudE11dGF0aW9uSWQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIElEIG9mIHRoZSBkZWxldGVkIG9iamVjdCAqL1xuICBkZWxldGVkSWQ/OiBNYXliZTxTY2FsYXJzWydJRCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgb2JqZWN0IGJlZm9yZSBpdCB3YXMgZGVsZXRlZCAqL1xuICBwb3N0PzogTWF5YmU8UG9zdD47XG59O1xuXG4vKiogSW5wdXQgZm9yIHRoZSBkZWxldGVUYWcgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBEZWxldGVUYWdJbnB1dCA9IHtcbiAgLyoqIFRoaXMgaXMgYW4gSUQgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIGEgbXV0YXRpb24gYnkgdGhlIGNsaWVudCB0byB0cmFjayB0aGUgcHJvZ3Jlc3Mgb2YgbXV0YXRpb25zIGFuZCBjYXRjaCBwb3NzaWJsZSBkdXBsaWNhdGUgbXV0YXRpb24gc3VibWlzc2lvbnMuICovXG4gIGNsaWVudE11dGF0aW9uSWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBJRCBvZiB0aGUgdGFnIHRvIGRlbGV0ZSAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnaW5wdXQnXTtcbn07XG5cbi8qKiBUaGUgcGF5bG9hZCBmb3IgdGhlIGRlbGV0ZVRhZyBtdXRhdGlvbi4gKi9cbmV4cG9ydCB0eXBlIERlbGV0ZVRhZ1BheWxvYWQgPSB7XG4gIF9fdHlwZW5hbWU/OiAnRGVsZXRlVGFnUGF5bG9hZCc7XG4gIC8qKiBJZiBhICYjMDM5O2NsaWVudE11dGF0aW9uSWQmIzAzOTsgaW5wdXQgaXMgcHJvdmlkZWQgdG8gdGhlIG11dGF0aW9uLCBpdCB3aWxsIGJlIHJldHVybmVkIGFzIG91dHB1dCBvbiB0aGUgbXV0YXRpb24uIFRoaXMgSUQgY2FuIGJlIHVzZWQgYnkgdGhlIGNsaWVudCB0byB0cmFjayB0aGUgcHJvZ3Jlc3Mgb2YgbXV0YXRpb25zIGFuZCBjYXRjaCBwb3NzaWJsZSBkdXBsaWNhdGUgbXV0YXRpb24gc3VibWlzc2lvbnMuICovXG4gIGNsaWVudE11dGF0aW9uSWQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIElEIG9mIHRoZSBkZWxldGVkIG9iamVjdCAqL1xuICBkZWxldGVkSWQ/OiBNYXliZTxTY2FsYXJzWydJRCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgZGVsZXRlZCB0ZXJtIG9iamVjdCAqL1xuICB0YWc/OiBNYXliZTxUYWc+O1xufTtcblxuLyoqIElucHV0IGZvciB0aGUgZGVsZXRlVXNlciBtdXRhdGlvbi4gKi9cbmV4cG9ydCB0eXBlIERlbGV0ZVVzZXJJbnB1dCA9IHtcbiAgLyoqIFRoaXMgaXMgYW4gSUQgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIGEgbXV0YXRpb24gYnkgdGhlIGNsaWVudCB0byB0cmFjayB0aGUgcHJvZ3Jlc3Mgb2YgbXV0YXRpb25zIGFuZCBjYXRjaCBwb3NzaWJsZSBkdXBsaWNhdGUgbXV0YXRpb24gc3VibWlzc2lvbnMuICovXG4gIGNsaWVudE11dGF0aW9uSWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBJRCBvZiB0aGUgdXNlciB5b3Ugd2FudCB0byBkZWxldGUgKi9cbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ2lucHV0J107XG4gIC8qKiBSZWFzc2lnbiBwb3N0cyBhbmQgbGlua3MgdG8gbmV3IFVzZXIgSUQuICovXG4gIHJlYXNzaWduSWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIFRoZSBwYXlsb2FkIGZvciB0aGUgZGVsZXRlVXNlciBtdXRhdGlvbi4gKi9cbmV4cG9ydCB0eXBlIERlbGV0ZVVzZXJQYXlsb2FkID0ge1xuICBfX3R5cGVuYW1lPzogJ0RlbGV0ZVVzZXJQYXlsb2FkJztcbiAgLyoqIElmIGEgJiMwMzk7Y2xpZW50TXV0YXRpb25JZCYjMDM5OyBpbnB1dCBpcyBwcm92aWRlZCB0byB0aGUgbXV0YXRpb24sIGl0IHdpbGwgYmUgcmV0dXJuZWQgYXMgb3V0cHV0IG9uIHRoZSBtdXRhdGlvbi4gVGhpcyBJRCBjYW4gYmUgdXNlZCBieSB0aGUgY2xpZW50IHRvIHRyYWNrIHRoZSBwcm9ncmVzcyBvZiBtdXRhdGlvbnMgYW5kIGNhdGNoIHBvc3NpYmxlIGR1cGxpY2F0ZSBtdXRhdGlvbiBzdWJtaXNzaW9ucy4gKi9cbiAgY2xpZW50TXV0YXRpb25JZD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgSUQgb2YgdGhlIHVzZXIgdGhhdCB5b3UganVzdCBkZWxldGVkICovXG4gIGRlbGV0ZWRJZD86IE1heWJlPFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBkZWxldGVkIHVzZXIgb2JqZWN0ICovXG4gIHVzZXI/OiBNYXliZTxVc2VyPjtcbn07XG5cbi8qKiBUaGUgZGlzY3Vzc2lvbiBzZXR0aW5nIHR5cGUgKi9cbmV4cG9ydCB0eXBlIERpc2N1c3Npb25TZXR0aW5ncyA9IHtcbiAgX190eXBlbmFtZT86ICdEaXNjdXNzaW9uU2V0dGluZ3MnO1xuICAvKiogQWxsb3cgcGVvcGxlIHRvIHN1Ym1pdCBjb21tZW50cyBvbiBuZXcgcG9zdHMuICovXG4gIGRlZmF1bHRDb21tZW50U3RhdHVzPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIEFsbG93IGxpbmsgbm90aWZpY2F0aW9ucyBmcm9tIG90aGVyIGJsb2dzIChwaW5nYmFja3MgYW5kIHRyYWNrYmFja3MpIG9uIG5ldyBhcnRpY2xlcy4gKi9cbiAgZGVmYXVsdFBpbmdTdGF0dXM/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIFJlbGF0aW9uYWwgY29udGV4dCBiZXR3ZWVuIGNvbm5lY3RlZCBub2RlcyAqL1xuZXhwb3J0IHR5cGUgRWRnZSA9IHtcbiAgLyoqIE9wYXF1ZSByZWZlcmVuY2UgdG8gdGhlIG5vZGVzIHBvc2l0aW9uIGluIHRoZSBjb25uZWN0aW9uLiBWYWx1ZSBjYW4gYmUgdXNlZCB3aXRoIHBhZ2luYXRpb24gYXJncy4gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBjb25uZWN0ZWQgbm9kZSAqL1xuICBub2RlOiBOb2RlO1xufTtcblxuLyoqIEFzc2V0IGVucXVldWVkIGJ5IHRoZSBDTVMgKi9cbmV4cG9ydCB0eXBlIEVucXVldWVkQXNzZXQgPSB7XG4gIC8qKiBUaGUgaW5saW5lIGNvZGUgdG8gYmUgcnVuIGFmdGVyIHRoZSBhc3NldCBpcyBsb2FkZWQuICovXG4gIGFmdGVyPzogTWF5YmU8QXJyYXk8TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPj4+O1xuICAvKipcbiAgICogRGVwcmVjYXRlZFxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYEVucXVldWVkQXNzZXQubWVkaWFgIGluc3RlYWQuXG4gICAqL1xuICBhcmdzPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaW5saW5lIGNvZGUgdG8gYmUgcnVuIGJlZm9yZSB0aGUgYXNzZXQgaXMgbG9hZGVkLiAqL1xuICBiZWZvcmU/OiBNYXliZTxBcnJheTxNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+Pj47XG4gIC8qKiBUaGUgSFRNTCBjb25kaXRpb25hbCBjb21tZW50IGZvciB0aGUgZW5xdWV1ZWQgYXNzZXQuIEUuZy4gSUUgNiwgbHRlIElFIDcsIGV0YyAqL1xuICBjb25kaXRpb25hbD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBEZXBlbmRlbmNpZXMgbmVlZGVkIHRvIHVzZSB0aGlzIGFzc2V0ICovXG4gIGRlcGVuZGVuY2llcz86IE1heWJlPEFycmF5PE1heWJlPEVucXVldWVkQXNzZXQ+Pj47XG4gIC8qKlxuICAgKiBFeHRyYSBpbmZvcm1hdGlvbiBuZWVkZWQgZm9yIHRoZSBzY3JpcHRcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBFbnF1ZXVlZFNjcmlwdC5leHRyYURhdGFgIGluc3RlYWQuXG4gICAqL1xuICBleHRyYT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaGFuZGxlIG9mIHRoZSBlbnF1ZXVlZCBhc3NldCAqL1xuICBoYW5kbGU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIElEIG9mIHRoZSBlbnF1ZXVlZCBhc3NldCAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnb3V0cHV0J107XG4gIC8qKiBUaGUgc291cmNlIG9mIHRoZSBhc3NldCAqL1xuICBzcmM/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIHZlcnNpb24gb2YgdGhlIGVucXVldWVkIGFzc2V0ICovXG4gIHZlcnNpb24/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIFNjcmlwdCBlbnF1ZXVlZCBieSB0aGUgQ01TICovXG5leHBvcnQgdHlwZSBFbnF1ZXVlZFNjcmlwdCA9IEVucXVldWVkQXNzZXQgJiBOb2RlICYge1xuICBfX3R5cGVuYW1lPzogJ0VucXVldWVkU2NyaXB0JztcbiAgLyoqIFRoZSBpbmxpbmUgY29kZSB0byBiZSBydW4gYWZ0ZXIgdGhlIGFzc2V0IGlzIGxvYWRlZC4gKi9cbiAgYWZ0ZXI/OiBNYXliZTxBcnJheTxNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+Pj47XG4gIC8qKlxuICAgKiBEZXByZWNhdGVkXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgRW5xdWV1ZWRBc3NldC5tZWRpYWAgaW5zdGVhZC5cbiAgICovXG4gIGFyZ3M/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpbmxpbmUgY29kZSB0byBiZSBydW4gYmVmb3JlIHRoZSBhc3NldCBpcyBsb2FkZWQuICovXG4gIGJlZm9yZT86IE1heWJlPEFycmF5PE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT4+PjtcbiAgLyoqIFRoZSBIVE1MIGNvbmRpdGlvbmFsIGNvbW1lbnQgZm9yIHRoZSBlbnF1ZXVlZCBhc3NldC4gRS5nLiBJRSA2LCBsdGUgSUUgNywgZXRjICovXG4gIGNvbmRpdGlvbmFsPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIERlcGVuZGVuY2llcyBuZWVkZWQgdG8gdXNlIHRoaXMgYXNzZXQgKi9cbiAgZGVwZW5kZW5jaWVzPzogTWF5YmU8QXJyYXk8TWF5YmU8RW5xdWV1ZWRTY3JpcHQ+Pj47XG4gIC8qKlxuICAgKiBFeHRyYSBpbmZvcm1hdGlvbiBuZWVkZWQgZm9yIHRoZSBzY3JpcHRcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBFbnF1ZXVlZFNjcmlwdC5leHRyYURhdGFgIGluc3RlYWQuXG4gICAqL1xuICBleHRyYT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBFeHRyYSBkYXRhIHN1cHBsaWVkIHRvIHRoZSBlbnF1ZXVlZCBzY3JpcHQgKi9cbiAgZXh0cmFEYXRhPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBoYW5kbGUgb2YgdGhlIGVucXVldWVkIGFzc2V0ICovXG4gIGhhbmRsZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgZ2xvYmFsIElEIG9mIHRoZSBlbnF1ZXVlZCBzY3JpcHQgKi9cbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddO1xuICAvKiogVGhlIHNvdXJjZSBvZiB0aGUgYXNzZXQgKi9cbiAgc3JjPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBsb2FkaW5nIHN0cmF0ZWd5IHRvIHVzZSBvbiB0aGUgc2NyaXB0IHRhZyAqL1xuICBzdHJhdGVneT86IE1heWJlPFNjcmlwdExvYWRpbmdTdHJhdGVneUVudW0+O1xuICAvKiogVGhlIHZlcnNpb24gb2YgdGhlIGVucXVldWVkIHNjcmlwdCAqL1xuICB2ZXJzaW9uPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIHRvIEVucXVldWVkU2NyaXB0IE5vZGVzICovXG5leHBvcnQgdHlwZSBFbnF1ZXVlZFNjcmlwdENvbm5lY3Rpb24gPSB7XG4gIC8qKiBBIGxpc3Qgb2YgZWRnZXMgKHJlbGF0aW9uYWwgY29udGV4dCkgYmV0d2VlbiBDb250ZW50Tm9kZSBhbmQgY29ubmVjdGVkIEVucXVldWVkU2NyaXB0IE5vZGVzICovXG4gIGVkZ2VzOiBBcnJheTxFbnF1ZXVlZFNjcmlwdENvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIEEgbGlzdCBvZiBjb25uZWN0ZWQgRW5xdWV1ZWRTY3JpcHQgTm9kZXMgKi9cbiAgbm9kZXM6IEFycmF5PEVucXVldWVkU2NyaXB0PjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogRWRnZSBiZXR3ZWVuIGEgTm9kZSBhbmQgYSBjb25uZWN0ZWQgRW5xdWV1ZWRTY3JpcHQgKi9cbmV4cG9ydCB0eXBlIEVucXVldWVkU2NyaXB0Q29ubmVjdGlvbkVkZ2UgPSB7XG4gIC8qKiBPcGFxdWUgcmVmZXJlbmNlIHRvIHRoZSBub2RlcyBwb3NpdGlvbiBpbiB0aGUgY29ubmVjdGlvbi4gVmFsdWUgY2FuIGJlIHVzZWQgd2l0aCBwYWdpbmF0aW9uIGFyZ3MuICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgY29ubmVjdGVkIEVucXVldWVkU2NyaXB0IE5vZGUgKi9cbiAgbm9kZTogRW5xdWV1ZWRTY3JpcHQ7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSBjb25uZWN0ZWQgRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uRWRnZSAqL1xuZXhwb3J0IHR5cGUgRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uUGFnZUluZm8gPSB7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogU3R5bGVzaGVldCBlbnF1ZXVlZCBieSB0aGUgQ01TICovXG5leHBvcnQgdHlwZSBFbnF1ZXVlZFN0eWxlc2hlZXQgPSBFbnF1ZXVlZEFzc2V0ICYgTm9kZSAmIHtcbiAgX190eXBlbmFtZT86ICdFbnF1ZXVlZFN0eWxlc2hlZXQnO1xuICAvKiogVGhlIGlubGluZSBjb2RlIHRvIGJlIHJ1biBhZnRlciB0aGUgYXNzZXQgaXMgbG9hZGVkLiAqL1xuICBhZnRlcj86IE1heWJlPEFycmF5PE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT4+PjtcbiAgLyoqXG4gICAqIERlcHJlY2F0ZWRcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBFbnF1ZXVlZEFzc2V0Lm1lZGlhYCBpbnN0ZWFkLlxuICAgKi9cbiAgYXJncz86IE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGlubGluZSBjb2RlIHRvIGJlIHJ1biBiZWZvcmUgdGhlIGFzc2V0IGlzIGxvYWRlZC4gKi9cbiAgYmVmb3JlPzogTWF5YmU8QXJyYXk8TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPj4+O1xuICAvKiogVGhlIEhUTUwgY29uZGl0aW9uYWwgY29tbWVudCBmb3IgdGhlIGVucXVldWVkIGFzc2V0LiBFLmcuIElFIDYsIGx0ZSBJRSA3LCBldGMgKi9cbiAgY29uZGl0aW9uYWw/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogRGVwZW5kZW5jaWVzIG5lZWRlZCB0byB1c2UgdGhpcyBhc3NldCAqL1xuICBkZXBlbmRlbmNpZXM/OiBNYXliZTxBcnJheTxNYXliZTxFbnF1ZXVlZFN0eWxlc2hlZXQ+Pj47XG4gIC8qKlxuICAgKiBFeHRyYSBpbmZvcm1hdGlvbiBuZWVkZWQgZm9yIHRoZSBzY3JpcHRcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBFbnF1ZXVlZFNjcmlwdC5leHRyYURhdGFgIGluc3RlYWQuXG4gICAqL1xuICBleHRyYT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaGFuZGxlIG9mIHRoZSBlbnF1ZXVlZCBhc3NldCAqL1xuICBoYW5kbGU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGdsb2JhbCBJRCBvZiB0aGUgZW5xdWV1ZWQgc3R5bGVzaGVldCAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnb3V0cHV0J107XG4gIC8qKiBXaGV0aGVyIHRoZSBlbnF1ZXVlZCBzdHlsZSBpcyBSVEwgb3Igbm90ICovXG4gIGlzUnRsPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgbWVkaWEgYXR0cmlidXRlIHRvIHVzZSBmb3IgdGhlIGxpbmsgKi9cbiAgbWVkaWE/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGFic29sdXRlIHBhdGggdG8gdGhlIGVucXVldWVkIHN0eWxlLiBTZXQgd2hlbiB0aGUgc3R5bGVzaGVldCBpcyBtZWFudCB0byBsb2FkIGlubGluZS4gKi9cbiAgcGF0aD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgYHJlbGAgYXR0cmlidXRlIHRvIHVzZSBmb3IgdGhlIGxpbmsgKi9cbiAgcmVsPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBzb3VyY2Ugb2YgdGhlIGFzc2V0ICovXG4gIHNyYz86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBPcHRpb25hbCBzdWZmaXgsIHVzZWQgaW4gY29tYmluYXRpb24gd2l0aCBSVEwgKi9cbiAgc3VmZml4PzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSB0aXRsZSBvZiB0aGUgZW5xdWV1ZWQgc3R5bGUuIFVzZWQgZm9yIHByZWZlcnJlZC9hbHRlcm5hdGUgc3R5bGVzaGVldHMuICovXG4gIHRpdGxlPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSB2ZXJzaW9uIG9mIHRoZSBlbnF1ZXVlZCBzdHlsZSAqL1xuICB2ZXJzaW9uPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIHRvIEVucXVldWVkU3R5bGVzaGVldCBOb2RlcyAqL1xuZXhwb3J0IHR5cGUgRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvbiA9IHtcbiAgLyoqIEEgbGlzdCBvZiBlZGdlcyAocmVsYXRpb25hbCBjb250ZXh0KSBiZXR3ZWVuIENvbnRlbnROb2RlIGFuZCBjb25uZWN0ZWQgRW5xdWV1ZWRTdHlsZXNoZWV0IE5vZGVzICovXG4gIGVkZ2VzOiBBcnJheTxFbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBBIGxpc3Qgb2YgY29ubmVjdGVkIEVucXVldWVkU3R5bGVzaGVldCBOb2RlcyAqL1xuICBub2RlczogQXJyYXk8RW5xdWV1ZWRTdHlsZXNoZWV0PjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEVkZ2UgYmV0d2VlbiBhIE5vZGUgYW5kIGEgY29ubmVjdGVkIEVucXVldWVkU3R5bGVzaGVldCAqL1xuZXhwb3J0IHR5cGUgRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvbkVkZ2UgPSB7XG4gIC8qKiBPcGFxdWUgcmVmZXJlbmNlIHRvIHRoZSBub2RlcyBwb3NpdGlvbiBpbiB0aGUgY29ubmVjdGlvbi4gVmFsdWUgY2FuIGJlIHVzZWQgd2l0aCBwYWdpbmF0aW9uIGFyZ3MuICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgY29ubmVjdGVkIEVucXVldWVkU3R5bGVzaGVldCBOb2RlICovXG4gIG5vZGU6IEVucXVldWVkU3R5bGVzaGVldDtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlIGNvbm5lY3RlZCBFbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uRWRnZSAqL1xuZXhwb3J0IHR5cGUgRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvblBhZ2VJbmZvID0ge1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIFRoZSB0ZW1wbGF0ZSBhc3NpZ25lZCB0byB0aGUgbm9kZSAqL1xuZXhwb3J0IHR5cGUgRnVsbHdpZHRoVGVtcGxhdGUgPSBDb250ZW50VGVtcGxhdGUgJiB7XG4gIF9fdHlwZW5hbWU/OiAnRnVsbHdpZHRoVGVtcGxhdGUnO1xuICAvKiogVGhlIG5hbWUgb2YgdGhlIHRlbXBsYXRlICovXG4gIHRlbXBsYXRlTmFtZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogVGhlIGdlbmVyYWwgc2V0dGluZyB0eXBlICovXG5leHBvcnQgdHlwZSBHZW5lcmFsU2V0dGluZ3MgPSB7XG4gIF9fdHlwZW5hbWU/OiAnR2VuZXJhbFNldHRpbmdzJztcbiAgLyoqIEEgZGF0ZSBmb3JtYXQgZm9yIGFsbCBkYXRlIHN0cmluZ3MuICovXG4gIGRhdGVGb3JtYXQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogU2l0ZSB0YWdsaW5lLiAqL1xuICBkZXNjcmlwdGlvbj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGlzIGFkZHJlc3MgaXMgdXNlZCBmb3IgYWRtaW4gcHVycG9zZXMsIGxpa2UgbmV3IHVzZXIgbm90aWZpY2F0aW9uLiAqL1xuICBlbWFpbD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXb3JkUHJlc3MgbG9jYWxlIGNvZGUuICovXG4gIGxhbmd1YWdlPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIEEgZGF5IG51bWJlciBvZiB0aGUgd2VlayB0aGF0IHRoZSB3ZWVrIHNob3VsZCBzdGFydCBvbi4gKi9cbiAgc3RhcnRPZldlZWs/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogQSB0aW1lIGZvcm1hdCBmb3IgYWxsIHRpbWUgc3RyaW5ncy4gKi9cbiAgdGltZUZvcm1hdD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBBIGNpdHkgaW4gdGhlIHNhbWUgdGltZXpvbmUgYXMgeW91LiAqL1xuICB0aW1lem9uZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBTaXRlIHRpdGxlLiAqL1xuICB0aXRsZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBTaXRlIFVSTC4gKi9cbiAgdXJsPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBDb250ZW50IG5vZGUgd2l0aCBoaWVyYXJjaGljYWwgKHBhcmVudC9jaGlsZCkgcmVsYXRpb25zaGlwcyAqL1xuZXhwb3J0IHR5cGUgSGllcmFyY2hpY2FsQ29udGVudE5vZGUgPSB7XG4gIC8qKiBSZXR1cm5zIGFuY2VzdG9ycyBvZiB0aGUgbm9kZS4gRGVmYXVsdCBvcmRlcmVkIGFzIGxvd2VzdCAoY2xvc2VzdCB0byB0aGUgY2hpbGQpIHRvIGhpZ2hlc3QgKGNsb3Nlc3QgdG8gdGhlIHJvb3QpLiAqL1xuICBhbmNlc3RvcnM/OiBNYXliZTxIaWVyYXJjaGljYWxDb250ZW50Tm9kZVRvQ29udGVudE5vZGVBbmNlc3RvcnNDb25uZWN0aW9uPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgSGllcmFyY2hpY2FsQ29udGVudE5vZGUgdHlwZSBhbmQgdGhlIENvbnRlbnROb2RlIHR5cGUgKi9cbiAgY2hpbGRyZW4/OiBNYXliZTxIaWVyYXJjaGljYWxDb250ZW50Tm9kZVRvQ29udGVudE5vZGVDaGlsZHJlbkNvbm5lY3Rpb24+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBDb250ZW50Tm9kZSB0eXBlIGFuZCB0aGUgQ29udGVudFR5cGUgdHlwZSAqL1xuICBjb250ZW50VHlwZT86IE1heWJlPENvbnRlbnROb2RlVG9Db250ZW50VHlwZUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBuYW1lIG9mIHRoZSBDb250ZW50IFR5cGUgdGhlIG5vZGUgYmVsb25ncyB0byAqL1xuICBjb250ZW50VHlwZU5hbWU6IFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXTtcbiAgLyoqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBzdG9yZWQgaW4gdGhlIGRhdGFiYXNlICovXG4gIGRhdGFiYXNlSWQ6IFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXTtcbiAgLyoqIFBvc3QgcHVibGlzaGluZyBkYXRlLiAqL1xuICBkYXRlPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBwdWJsaXNoaW5nIGRhdGUgc2V0IGluIEdNVC4gKi9cbiAgZGF0ZUdtdD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgZGVzaXJlZCBzbHVnIG9mIHRoZSBwb3N0ICovXG4gIGRlc2lyZWRTbHVnPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIElmIGEgdXNlciBoYXMgZWRpdGVkIHRoZSBub2RlIHdpdGhpbiB0aGUgcGFzdCAxNSBzZWNvbmRzLCB0aGlzIHdpbGwgcmV0dXJuIHRoZSB1c2VyIHRoYXQgbGFzdCBlZGl0ZWQuIE51bGwgaWYgdGhlIGVkaXQgbG9jayBkb2VzbiYjMDM5O3QgZXhpc3Qgb3IgaXMgZ3JlYXRlciB0aGFuIDE1IHNlY29uZHMgKi9cbiAgZWRpdGluZ0xvY2tlZEJ5PzogTWF5YmU8Q29udGVudE5vZGVUb0VkaXRMb2NrQ29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIFJTUyBlbmNsb3N1cmUgZm9yIHRoZSBvYmplY3QgKi9cbiAgZW5jbG9zdXJlPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgQ29udGVudE5vZGUgdHlwZSBhbmQgdGhlIEVucXVldWVkU2NyaXB0IHR5cGUgKi9cbiAgZW5xdWV1ZWRTY3JpcHRzPzogTWF5YmU8Q29udGVudE5vZGVUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvbj47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIENvbnRlbnROb2RlIHR5cGUgYW5kIHRoZSBFbnF1ZXVlZFN0eWxlc2hlZXQgdHlwZSAqL1xuICBlbnF1ZXVlZFN0eWxlc2hlZXRzPzogTWF5YmU8Q29udGVudE5vZGVUb0VucXVldWVkU3R5bGVzaGVldENvbm5lY3Rpb24+O1xuICAvKiogVGhlIGdsb2JhbCB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBwb3N0LiBUaGlzIGN1cnJlbnRseSBtYXRjaGVzIHRoZSB2YWx1ZSBzdG9yZWQgaW4gV1BfUG9zdC0mZ3Q7Z3VpZCBhbmQgdGhlIGd1aWQgY29sdW1uIGluIHRoZSAmcXVvdDtwb3N0X29iamVjdHMmcXVvdDsgZGF0YWJhc2UgdGFibGUuICovXG4gIGd1aWQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGdsb2JhbGx5IHVuaXF1ZSBJRCBmb3IgdGhlIG9iamVjdCAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnb3V0cHV0J107XG4gIC8qKiBXaGV0aGVyIHRoZSBub2RlIGlzIGEgQ29udGVudCBOb2RlICovXG4gIGlzQ29udGVudE5vZGU6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGV0aGVyIHRoZSBvYmplY3QgaXMgYSBub2RlIGluIHRoZSBwcmV2aWV3IHN0YXRlICovXG4gIGlzUHJldmlldz86IE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J10+O1xuICAvKiogV2hldGhlciB0aGUgb2JqZWN0IGlzIHJlc3RyaWN0ZWQgZnJvbSB0aGUgY3VycmVudCB2aWV3ZXIgKi9cbiAgaXNSZXN0cmljdGVkPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBXaGV0aGVyIHRoZSBub2RlIGlzIGEgVGVybSAqL1xuICBpc1Rlcm1Ob2RlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogVGhlIHVzZXIgdGhhdCBtb3N0IHJlY2VudGx5IGVkaXRlZCB0aGUgbm9kZSAqL1xuICBsYXN0RWRpdGVkQnk/OiBNYXliZTxDb250ZW50Tm9kZVRvRWRpdExhc3RDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgcGVybWFsaW5rIG9mIHRoZSBwb3N0ICovXG4gIGxpbms/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGxvY2FsIG1vZGlmaWVkIHRpbWUgZm9yIGEgcG9zdC4gSWYgYSBwb3N0IHdhcyByZWNlbnRseSB1cGRhdGVkIHRoZSBtb2RpZmllZCBmaWVsZCB3aWxsIGNoYW5nZSB0byBtYXRjaCB0aGUgY29ycmVzcG9uZGluZyB0aW1lLiAqL1xuICBtb2RpZmllZD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgR01UIG1vZGlmaWVkIHRpbWUgZm9yIGEgcG9zdC4gSWYgYSBwb3N0IHdhcyByZWNlbnRseSB1cGRhdGVkIHRoZSBtb2RpZmllZCBmaWVsZCB3aWxsIGNoYW5nZSB0byBtYXRjaCB0aGUgY29ycmVzcG9uZGluZyB0aW1lIGluIEdNVC4gKi9cbiAgbW9kaWZpZWRHbXQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIHBhcmVudCBvZiB0aGUgbm9kZS4gVGhlIHBhcmVudCBvYmplY3QgY2FuIGJlIG9mIHZhcmlvdXMgdHlwZXMgKi9cbiAgcGFyZW50PzogTWF5YmU8SGllcmFyY2hpY2FsQ29udGVudE5vZGVUb1BhcmVudENvbnRlbnROb2RlQ29ubmVjdGlvbkVkZ2U+O1xuICAvKiogRGF0YWJhc2UgaWQgb2YgdGhlIHBhcmVudCBub2RlICovXG4gIHBhcmVudERhdGFiYXNlSWQ/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBwYXJlbnQgbm9kZS4gKi9cbiAgcGFyZW50SWQ/OiBNYXliZTxTY2FsYXJzWydJRCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgZGF0YWJhc2UgaWQgb2YgdGhlIHByZXZpZXcgbm9kZSAqL1xuICBwcmV2aWV3UmV2aXNpb25EYXRhYmFzZUlkPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdGhlIG9iamVjdCBpcyBhIG5vZGUgaW4gdGhlIHByZXZpZXcgc3RhdGUgKi9cbiAgcHJldmlld1JldmlzaW9uSWQ/OiBNYXliZTxTY2FsYXJzWydJRCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgdXJpIHNsdWcgZm9yIHRoZSBwb3N0LiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gdGhlIFdQX1Bvc3QtJmd0O3Bvc3RfbmFtZSBmaWVsZCBhbmQgdGhlIHBvc3RfbmFtZSBjb2x1bW4gaW4gdGhlIGRhdGFiYXNlIGZvciB0aGUgJnF1b3Q7cG9zdF9vYmplY3RzJnF1b3Q7IHRhYmxlLiAqL1xuICBzbHVnPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBjdXJyZW50IHN0YXR1cyBvZiB0aGUgb2JqZWN0ICovXG4gIHN0YXR1cz86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgdGVtcGxhdGUgYXNzaWduZWQgdG8gYSBub2RlIG9mIGNvbnRlbnQgKi9cbiAgdGVtcGxhdGU/OiBNYXliZTxDb250ZW50VGVtcGxhdGU+O1xuICAvKiogVGhlIHVuaXF1ZSByZXNvdXJjZSBpZGVudGlmaWVyIHBhdGggKi9cbiAgdXJpPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cblxuLyoqIENvbnRlbnQgbm9kZSB3aXRoIGhpZXJhcmNoaWNhbCAocGFyZW50L2NoaWxkKSByZWxhdGlvbnNoaXBzICovXG5leHBvcnQgdHlwZSBIaWVyYXJjaGljYWxDb250ZW50Tm9kZUFuY2VzdG9yc0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIHdoZXJlPzogSW5wdXRNYXliZTxIaWVyYXJjaGljYWxDb250ZW50Tm9kZVRvQ29udGVudE5vZGVBbmNlc3RvcnNDb25uZWN0aW9uV2hlcmVBcmdzPjtcbn07XG5cblxuLyoqIENvbnRlbnQgbm9kZSB3aXRoIGhpZXJhcmNoaWNhbCAocGFyZW50L2NoaWxkKSByZWxhdGlvbnNoaXBzICovXG5leHBvcnQgdHlwZSBIaWVyYXJjaGljYWxDb250ZW50Tm9kZUNoaWxkcmVuQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPEhpZXJhcmNoaWNhbENvbnRlbnROb2RlVG9Db250ZW50Tm9kZUNoaWxkcmVuQ29ubmVjdGlvbldoZXJlQXJncz47XG59O1xuXG5cbi8qKiBDb250ZW50IG5vZGUgd2l0aCBoaWVyYXJjaGljYWwgKHBhcmVudC9jaGlsZCkgcmVsYXRpb25zaGlwcyAqL1xuZXhwb3J0IHR5cGUgSGllcmFyY2hpY2FsQ29udGVudE5vZGVFbnF1ZXVlZFNjcmlwdHNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xufTtcblxuXG4vKiogQ29udGVudCBub2RlIHdpdGggaGllcmFyY2hpY2FsIChwYXJlbnQvY2hpbGQpIHJlbGF0aW9uc2hpcHMgKi9cbmV4cG9ydCB0eXBlIEhpZXJhcmNoaWNhbENvbnRlbnROb2RlRW5xdWV1ZWRTdHlsZXNoZWV0c0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBIaWVyYXJjaGljYWxDb250ZW50Tm9kZSB0eXBlIGFuZCB0aGUgQ29udGVudE5vZGUgdHlwZSAqL1xuZXhwb3J0IHR5cGUgSGllcmFyY2hpY2FsQ29udGVudE5vZGVUb0NvbnRlbnROb2RlQW5jZXN0b3JzQ29ubmVjdGlvbiA9IENvbm5lY3Rpb24gJiBDb250ZW50Tm9kZUNvbm5lY3Rpb24gJiB7XG4gIF9fdHlwZW5hbWU/OiAnSGllcmFyY2hpY2FsQ29udGVudE5vZGVUb0NvbnRlbnROb2RlQW5jZXN0b3JzQ29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIEhpZXJhcmNoaWNhbENvbnRlbnROb2RlVG9Db250ZW50Tm9kZUFuY2VzdG9yc0Nvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8SGllcmFyY2hpY2FsQ29udGVudE5vZGVUb0NvbnRlbnROb2RlQW5jZXN0b3JzQ29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIG5vZGVzIG9mIHRoZSBjb25uZWN0aW9uLCB3aXRob3V0IHRoZSBlZGdlcyAqL1xuICBub2RlczogQXJyYXk8Q29udGVudE5vZGU+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBIaWVyYXJjaGljYWxDb250ZW50Tm9kZVRvQ29udGVudE5vZGVBbmNlc3RvcnNDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIEhpZXJhcmNoaWNhbENvbnRlbnROb2RlVG9Db250ZW50Tm9kZUFuY2VzdG9yc0Nvbm5lY3Rpb25FZGdlID0gQ29udGVudE5vZGVDb25uZWN0aW9uRWRnZSAmIEVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnSGllcmFyY2hpY2FsQ29udGVudE5vZGVUb0NvbnRlbnROb2RlQW5jZXN0b3JzQ29ubmVjdGlvbkVkZ2UnO1xuICAvKiogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaXRlbSBhdCB0aGUgZW5kIG9mIHRoZSBlZGdlICovXG4gIG5vZGU6IENvbnRlbnROb2RlO1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgJnF1b3Q7SGllcmFyY2hpY2FsQ29udGVudE5vZGVUb0NvbnRlbnROb2RlQW5jZXN0b3JzQ29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgSGllcmFyY2hpY2FsQ29udGVudE5vZGVUb0NvbnRlbnROb2RlQW5jZXN0b3JzQ29ubmVjdGlvblBhZ2VJbmZvID0gQ29udGVudE5vZGVDb25uZWN0aW9uUGFnZUluZm8gJiBQYWdlSW5mbyAmIFdwUGFnZUluZm8gJiB7XG4gIF9fdHlwZW5hbWU/OiAnSGllcmFyY2hpY2FsQ29udGVudE5vZGVUb0NvbnRlbnROb2RlQW5jZXN0b3JzQ29ubmVjdGlvblBhZ2VJbmZvJztcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBBcmd1bWVudHMgZm9yIGZpbHRlcmluZyB0aGUgSGllcmFyY2hpY2FsQ29udGVudE5vZGVUb0NvbnRlbnROb2RlQW5jZXN0b3JzQ29ubmVjdGlvbiBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBIaWVyYXJjaGljYWxDb250ZW50Tm9kZVRvQ29udGVudE5vZGVBbmNlc3RvcnNDb25uZWN0aW9uV2hlcmVBcmdzID0ge1xuICAvKiogVGhlIFR5cGVzIG9mIGNvbnRlbnQgdG8gZmlsdGVyICovXG4gIGNvbnRlbnRUeXBlcz86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxDb250ZW50VHlwZUVudW0+Pj47XG4gIC8qKiBGaWx0ZXIgdGhlIGNvbm5lY3Rpb24gYmFzZWQgb24gZGF0ZXMgKi9cbiAgZGF0ZVF1ZXJ5PzogSW5wdXRNYXliZTxEYXRlUXVlcnlJbnB1dD47XG4gIC8qKiBUcnVlIGZvciBvYmplY3RzIHdpdGggcGFzc3dvcmRzOyBGYWxzZSBmb3Igb2JqZWN0cyB3aXRob3V0IHBhc3N3b3JkczsgbnVsbCBmb3IgYWxsIG9iamVjdHMgd2l0aCBvciB3aXRob3V0IHBhc3N3b3JkcyAqL1xuICBoYXNQYXNzd29yZD86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIFNwZWNpZmljIGRhdGFiYXNlIElEIG9mIHRoZSBvYmplY3QgKi9cbiAgaWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIElEcyBmb3IgdGhlIG9iamVjdHMgdG8gcmV0cmlldmUgKi9cbiAgaW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEdldCBvYmplY3RzIHdpdGggYSBzcGVjaWZpYyBtaW1lVHlwZSBwcm9wZXJ0eSAqL1xuICBtaW1lVHlwZT86IElucHV0TWF5YmU8TWltZVR5cGVFbnVtPjtcbiAgLyoqIFNsdWcgLyBwb3N0X25hbWUgb2YgdGhlIG9iamVjdCAqL1xuICBuYW1lPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBTcGVjaWZ5IG9iamVjdHMgdG8gcmV0cmlldmUuIFVzZSBzbHVncyAqL1xuICBuYW1lSW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTcGVjaWZ5IElEcyBOT1QgdG8gcmV0cmlldmUuIElmIHRoaXMgaXMgdXNlZCBpbiB0aGUgc2FtZSBxdWVyeSBhcyBcImluXCIsIGl0IHdpbGwgYmUgaWdub3JlZCAqL1xuICBub3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogV2hhdCBwYXJhbWV0ZXIgdG8gdXNlIHRvIG9yZGVyIHRoZSBvYmplY3RzIGJ5LiAqL1xuICBvcmRlcmJ5PzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFBvc3RPYmplY3RzQ29ubmVjdGlvbk9yZGVyYnlJbnB1dD4+PjtcbiAgLyoqIFVzZSBJRCB0byByZXR1cm4gb25seSBjaGlsZHJlbi4gVXNlIDAgdG8gcmV0dXJuIG9ubHkgdG9wLWxldmVsIGl0ZW1zICovXG4gIHBhcmVudD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG4gIC8qKiBTcGVjaWZ5IG9iamVjdHMgd2hvc2UgcGFyZW50IGlzIGluIGFuIGFycmF5ICovXG4gIHBhcmVudEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTcGVjaWZ5IHBvc3RzIHdob3NlIHBhcmVudCBpcyBub3QgaW4gYW4gYXJyYXkgKi9cbiAgcGFyZW50Tm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNob3cgcG9zdHMgd2l0aCBhIHNwZWNpZmljIHBhc3N3b3JkLiAqL1xuICBwYXNzd29yZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogU2hvdyBQb3N0cyBiYXNlZCBvbiBhIGtleXdvcmQgc2VhcmNoICovXG4gIHNlYXJjaD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogUmV0cmlldmUgcG9zdHMgd2hlcmUgcG9zdCBzdGF0dXMgaXMgaW4gYW4gYXJyYXkuICovXG4gIHN0YXRpPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFBvc3RTdGF0dXNFbnVtPj4+O1xuICAvKiogU2hvdyBwb3N0cyB3aXRoIGEgc3BlY2lmaWMgc3RhdHVzLiAqL1xuICBzdGF0dXM/OiBJbnB1dE1heWJlPFBvc3RTdGF0dXNFbnVtPjtcbiAgLyoqIFRpdGxlIG9mIHRoZSBvYmplY3QgKi9cbiAgdGl0bGU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIEhpZXJhcmNoaWNhbENvbnRlbnROb2RlIHR5cGUgYW5kIHRoZSBDb250ZW50Tm9kZSB0eXBlICovXG5leHBvcnQgdHlwZSBIaWVyYXJjaGljYWxDb250ZW50Tm9kZVRvQ29udGVudE5vZGVDaGlsZHJlbkNvbm5lY3Rpb24gPSBDb25uZWN0aW9uICYgQ29udGVudE5vZGVDb25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ0hpZXJhcmNoaWNhbENvbnRlbnROb2RlVG9Db250ZW50Tm9kZUNoaWxkcmVuQ29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIEhpZXJhcmNoaWNhbENvbnRlbnROb2RlVG9Db250ZW50Tm9kZUNoaWxkcmVuQ29ubmVjdGlvbiBjb25uZWN0aW9uICovXG4gIGVkZ2VzOiBBcnJheTxIaWVyYXJjaGljYWxDb250ZW50Tm9kZVRvQ29udGVudE5vZGVDaGlsZHJlbkNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBub2RlcyBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZXM6IEFycmF5PENvbnRlbnROb2RlPjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogSGllcmFyY2hpY2FsQ29udGVudE5vZGVUb0NvbnRlbnROb2RlQ2hpbGRyZW5Db25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIEhpZXJhcmNoaWNhbENvbnRlbnROb2RlVG9Db250ZW50Tm9kZUNoaWxkcmVuQ29ubmVjdGlvbkVkZ2UgPSBDb250ZW50Tm9kZUNvbm5lY3Rpb25FZGdlICYgRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdIaWVyYXJjaGljYWxDb250ZW50Tm9kZVRvQ29udGVudE5vZGVDaGlsZHJlbkNvbm5lY3Rpb25FZGdlJztcbiAgLyoqIEEgY3Vyc29yIGZvciB1c2UgaW4gcGFnaW5hdGlvbiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGl0ZW0gYXQgdGhlIGVuZCBvZiB0aGUgZWRnZSAqL1xuICBub2RlOiBDb250ZW50Tm9kZTtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlICZxdW90O0hpZXJhcmNoaWNhbENvbnRlbnROb2RlVG9Db250ZW50Tm9kZUNoaWxkcmVuQ29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgSGllcmFyY2hpY2FsQ29udGVudE5vZGVUb0NvbnRlbnROb2RlQ2hpbGRyZW5Db25uZWN0aW9uUGFnZUluZm8gPSBDb250ZW50Tm9kZUNvbm5lY3Rpb25QYWdlSW5mbyAmIFBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdIaWVyYXJjaGljYWxDb250ZW50Tm9kZVRvQ29udGVudE5vZGVDaGlsZHJlbkNvbm5lY3Rpb25QYWdlSW5mbyc7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogQXJndW1lbnRzIGZvciBmaWx0ZXJpbmcgdGhlIEhpZXJhcmNoaWNhbENvbnRlbnROb2RlVG9Db250ZW50Tm9kZUNoaWxkcmVuQ29ubmVjdGlvbiBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBIaWVyYXJjaGljYWxDb250ZW50Tm9kZVRvQ29udGVudE5vZGVDaGlsZHJlbkNvbm5lY3Rpb25XaGVyZUFyZ3MgPSB7XG4gIC8qKiBUaGUgVHlwZXMgb2YgY29udGVudCB0byBmaWx0ZXIgKi9cbiAgY29udGVudFR5cGVzPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPENvbnRlbnRUeXBlRW51bT4+PjtcbiAgLyoqIEZpbHRlciB0aGUgY29ubmVjdGlvbiBiYXNlZCBvbiBkYXRlcyAqL1xuICBkYXRlUXVlcnk/OiBJbnB1dE1heWJlPERhdGVRdWVyeUlucHV0PjtcbiAgLyoqIFRydWUgZm9yIG9iamVjdHMgd2l0aCBwYXNzd29yZHM7IEZhbHNlIGZvciBvYmplY3RzIHdpdGhvdXQgcGFzc3dvcmRzOyBudWxsIGZvciBhbGwgb2JqZWN0cyB3aXRoIG9yIHdpdGhvdXQgcGFzc3dvcmRzICovXG4gIGhhc1Bhc3N3b3JkPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmaWMgZGF0YWJhc2UgSUQgb2YgdGhlIG9iamVjdCAqL1xuICBpZD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgSURzIGZvciB0aGUgb2JqZWN0cyB0byByZXRyaWV2ZSAqL1xuICBpbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogR2V0IG9iamVjdHMgd2l0aCBhIHNwZWNpZmljIG1pbWVUeXBlIHByb3BlcnR5ICovXG4gIG1pbWVUeXBlPzogSW5wdXRNYXliZTxNaW1lVHlwZUVudW0+O1xuICAvKiogU2x1ZyAvIHBvc3RfbmFtZSBvZiB0aGUgb2JqZWN0ICovXG4gIG5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFNwZWNpZnkgb2JqZWN0cyB0byByZXRyaWV2ZS4gVXNlIHNsdWdzICovXG4gIG5hbWVJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNwZWNpZnkgSURzIE5PVCB0byByZXRyaWV2ZS4gSWYgdGhpcyBpcyB1c2VkIGluIHRoZSBzYW1lIHF1ZXJ5IGFzIFwiaW5cIiwgaXQgd2lsbCBiZSBpZ25vcmVkICovXG4gIG5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBXaGF0IHBhcmFtZXRlciB0byB1c2UgdG8gb3JkZXIgdGhlIG9iamVjdHMgYnkuICovXG4gIG9yZGVyYnk/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8UG9zdE9iamVjdHNDb25uZWN0aW9uT3JkZXJieUlucHV0Pj4+O1xuICAvKiogVXNlIElEIHRvIHJldHVybiBvbmx5IGNoaWxkcmVuLiBVc2UgMCB0byByZXR1cm4gb25seSB0b3AtbGV2ZWwgaXRlbXMgKi9cbiAgcGFyZW50PzogSW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPjtcbiAgLyoqIFNwZWNpZnkgb2JqZWN0cyB3aG9zZSBwYXJlbnQgaXMgaW4gYW4gYXJyYXkgKi9cbiAgcGFyZW50SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNwZWNpZnkgcG9zdHMgd2hvc2UgcGFyZW50IGlzIG5vdCBpbiBhbiBhcnJheSAqL1xuICBwYXJlbnROb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogU2hvdyBwb3N0cyB3aXRoIGEgc3BlY2lmaWMgcGFzc3dvcmQuICovXG4gIHBhc3N3b3JkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBTaG93IFBvc3RzIGJhc2VkIG9uIGEga2V5d29yZCBzZWFyY2ggKi9cbiAgc2VhcmNoPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBSZXRyaWV2ZSBwb3N0cyB3aGVyZSBwb3N0IHN0YXR1cyBpcyBpbiBhbiBhcnJheS4gKi9cbiAgc3RhdGk/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+Pj47XG4gIC8qKiBTaG93IHBvc3RzIHdpdGggYSBzcGVjaWZpYyBzdGF0dXMuICovXG4gIHN0YXR1cz86IElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+O1xuICAvKiogVGl0bGUgb2YgdGhlIG9iamVjdCAqL1xuICB0aXRsZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgSGllcmFyY2hpY2FsQ29udGVudE5vZGUgdHlwZSBhbmQgdGhlIENvbnRlbnROb2RlIHR5cGUgKi9cbmV4cG9ydCB0eXBlIEhpZXJhcmNoaWNhbENvbnRlbnROb2RlVG9QYXJlbnRDb250ZW50Tm9kZUNvbm5lY3Rpb25FZGdlID0gQ29udGVudE5vZGVDb25uZWN0aW9uRWRnZSAmIEVkZ2UgJiBPbmVUb09uZUNvbm5lY3Rpb24gJiB7XG4gIF9fdHlwZW5hbWU/OiAnSGllcmFyY2hpY2FsQ29udGVudE5vZGVUb1BhcmVudENvbnRlbnROb2RlQ29ubmVjdGlvbkVkZ2UnO1xuICAvKiogT3BhcXVlIHJlZmVyZW5jZSB0byB0aGUgbm9kZXMgcG9zaXRpb24gaW4gdGhlIGNvbm5lY3Rpb24uIFZhbHVlIGNhbiBiZSB1c2VkIHdpdGggcGFnaW5hdGlvbiBhcmdzLiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIG5vZGUgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGU6IENvbnRlbnROb2RlO1xufTtcblxuLyoqIE5vZGUgd2l0aCBoaWVyYXJjaGljYWwgKHBhcmVudC9jaGlsZCkgcmVsYXRpb25zaGlwcyAqL1xuZXhwb3J0IHR5cGUgSGllcmFyY2hpY2FsTm9kZSA9IHtcbiAgLyoqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBzdG9yZWQgaW4gdGhlIGRhdGFiYXNlICovXG4gIGRhdGFiYXNlSWQ6IFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXTtcbiAgLyoqIFRoZSBnbG9iYWxseSB1bmlxdWUgSUQgZm9yIHRoZSBvYmplY3QgKi9cbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddO1xuICAvKiogRGF0YWJhc2UgaWQgb2YgdGhlIHBhcmVudCBub2RlICovXG4gIHBhcmVudERhdGFiYXNlSWQ/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBwYXJlbnQgbm9kZS4gKi9cbiAgcGFyZW50SWQ/OiBNYXliZTxTY2FsYXJzWydJRCddWydvdXRwdXQnXT47XG59O1xuXG4vKiogVGVybSBub2RlIHdpdGggaGllcmFyY2hpY2FsIChwYXJlbnQvY2hpbGQpIHJlbGF0aW9uc2hpcHMgKi9cbmV4cG9ydCB0eXBlIEhpZXJhcmNoaWNhbFRlcm1Ob2RlID0ge1xuICAvKiogVGhlIG51bWJlciBvZiBvYmplY3RzIGNvbm5lY3RlZCB0byB0aGUgb2JqZWN0ICovXG4gIGNvdW50PzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBzdG9yZWQgaW4gdGhlIGRhdGFiYXNlICovXG4gIGRhdGFiYXNlSWQ6IFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXTtcbiAgLyoqIFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgb2JqZWN0ICovXG4gIGRlc2NyaXB0aW9uPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgVGVybU5vZGUgdHlwZSBhbmQgdGhlIEVucXVldWVkU2NyaXB0IHR5cGUgKi9cbiAgZW5xdWV1ZWRTY3JpcHRzPzogTWF5YmU8VGVybU5vZGVUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvbj47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFRlcm1Ob2RlIHR5cGUgYW5kIHRoZSBFbnF1ZXVlZFN0eWxlc2hlZXQgdHlwZSAqL1xuICBlbnF1ZXVlZFN0eWxlc2hlZXRzPzogTWF5YmU8VGVybU5vZGVUb0VucXVldWVkU3R5bGVzaGVldENvbm5lY3Rpb24+O1xuICAvKiogVGhlIGdsb2JhbGx5IHVuaXF1ZSBJRCBmb3IgdGhlIG9iamVjdCAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnb3V0cHV0J107XG4gIC8qKiBXaGV0aGVyIHRoZSBub2RlIGlzIGEgQ29udGVudCBOb2RlICovXG4gIGlzQ29udGVudE5vZGU6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGV0aGVyIHRoZSBvYmplY3QgaXMgcmVzdHJpY3RlZCBmcm9tIHRoZSBjdXJyZW50IHZpZXdlciAqL1xuICBpc1Jlc3RyaWN0ZWQ/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdGhlIG5vZGUgaXMgYSBUZXJtICovXG4gIGlzVGVybU5vZGU6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBUaGUgbGluayB0byB0aGUgdGVybSAqL1xuICBsaW5rPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBodW1hbiBmcmllbmRseSBuYW1lIG9mIHRoZSBvYmplY3QuICovXG4gIG5hbWU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogRGF0YWJhc2UgaWQgb2YgdGhlIHBhcmVudCBub2RlICovXG4gIHBhcmVudERhdGFiYXNlSWQ/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBwYXJlbnQgbm9kZS4gKi9cbiAgcGFyZW50SWQ/OiBNYXliZTxTY2FsYXJzWydJRCddWydvdXRwdXQnXT47XG4gIC8qKiBBbiBhbHBoYW51bWVyaWMgaWRlbnRpZmllciBmb3IgdGhlIG9iamVjdCB1bmlxdWUgdG8gaXRzIHR5cGUuICovXG4gIHNsdWc/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIG5hbWUgb2YgdGhlIHRheG9ub215IHRoYXQgdGhlIG9iamVjdCBpcyBhc3NvY2lhdGVkIHdpdGggKi9cbiAgdGF4b25vbXlOYW1lPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBJRCBvZiB0aGUgdGVybSBncm91cCB0aGF0IHRoaXMgdGVybSBvYmplY3QgYmVsb25ncyB0byAqL1xuICB0ZXJtR3JvdXBJZD86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgdGF4b25vbXkgSUQgdGhhdCB0aGUgb2JqZWN0IGlzIGFzc29jaWF0ZWQgd2l0aCAqL1xuICB0ZXJtVGF4b25vbXlJZD86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgdW5pcXVlIHJlc291cmNlIGlkZW50aWZpZXIgcGF0aCAqL1xuICB1cmk/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuXG4vKiogVGVybSBub2RlIHdpdGggaGllcmFyY2hpY2FsIChwYXJlbnQvY2hpbGQpIHJlbGF0aW9uc2hpcHMgKi9cbmV4cG9ydCB0eXBlIEhpZXJhcmNoaWNhbFRlcm1Ob2RlRW5xdWV1ZWRTY3JpcHRzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbn07XG5cblxuLyoqIFRlcm0gbm9kZSB3aXRoIGhpZXJhcmNoaWNhbCAocGFyZW50L2NoaWxkKSByZWxhdGlvbnNoaXBzICovXG5leHBvcnQgdHlwZSBIaWVyYXJjaGljYWxUZXJtTm9kZUVucXVldWVkU3R5bGVzaGVldHNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xufTtcblxuLyoqIEZpbGUgZGV0YWlscyBmb3IgYSBNZWRpYSBJdGVtICovXG5leHBvcnQgdHlwZSBNZWRpYURldGFpbHMgPSB7XG4gIF9fdHlwZW5hbWU/OiAnTWVkaWFEZXRhaWxzJztcbiAgLyoqIFRoZSBmaWxlbmFtZSBvZiB0aGUgbWVkaWFJdGVtICovXG4gIGZpbGU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGhlaWdodCBvZiB0aGUgbWVkaWFJdGVtICovXG4gIGhlaWdodD86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBNZXRhIGluZm9ybWF0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgbWVkaWFJdGVtICovXG4gIG1ldGE/OiBNYXliZTxNZWRpYUl0ZW1NZXRhPjtcbiAgLyoqIFRoZSBhdmFpbGFibGUgc2l6ZXMgb2YgdGhlIG1lZGlhSXRlbSAqL1xuICBzaXplcz86IE1heWJlPEFycmF5PE1heWJlPE1lZGlhU2l6ZT4+PjtcbiAgLyoqIFRoZSB3aWR0aCBvZiB0aGUgbWVkaWFJdGVtICovXG4gIHdpZHRoPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbn07XG5cblxuLyoqIEZpbGUgZGV0YWlscyBmb3IgYSBNZWRpYSBJdGVtICovXG5leHBvcnQgdHlwZSBNZWRpYURldGFpbHNTaXplc0FyZ3MgPSB7XG4gIGV4Y2x1ZGU/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8TWVkaWFJdGVtU2l6ZUVudW0+Pj47XG4gIGluY2x1ZGU/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8TWVkaWFJdGVtU2l6ZUVudW0+Pj47XG59O1xuXG4vKiogVGhlIG1lZGlhSXRlbSB0eXBlICovXG5leHBvcnQgdHlwZSBNZWRpYUl0ZW0gPSBDb250ZW50Tm9kZSAmIERhdGFiYXNlSWRlbnRpZmllciAmIEhpZXJhcmNoaWNhbENvbnRlbnROb2RlICYgSGllcmFyY2hpY2FsTm9kZSAmIE5vZGUgJiBOb2RlV2l0aEF1dGhvciAmIE5vZGVXaXRoQ29tbWVudHMgJiBOb2RlV2l0aFRlbXBsYXRlICYgTm9kZVdpdGhUaXRsZSAmIFVuaWZvcm1SZXNvdXJjZUlkZW50aWZpYWJsZSAmIHtcbiAgX190eXBlbmFtZT86ICdNZWRpYUl0ZW0nO1xuICAvKiogQWx0ZXJuYXRpdmUgdGV4dCB0byBkaXNwbGF5IHdoZW4gcmVzb3VyY2UgaXMgbm90IGRpc3BsYXllZCAqL1xuICBhbHRUZXh0PzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFJldHVybnMgYW5jZXN0b3JzIG9mIHRoZSBub2RlLiBEZWZhdWx0IG9yZGVyZWQgYXMgbG93ZXN0IChjbG9zZXN0IHRvIHRoZSBjaGlsZCkgdG8gaGlnaGVzdCAoY2xvc2VzdCB0byB0aGUgcm9vdCkuICovXG4gIGFuY2VzdG9ycz86IE1heWJlPEhpZXJhcmNoaWNhbENvbnRlbnROb2RlVG9Db250ZW50Tm9kZUFuY2VzdG9yc0Nvbm5lY3Rpb24+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBOb2RlV2l0aEF1dGhvciB0eXBlIGFuZCB0aGUgVXNlciB0eXBlICovXG4gIGF1dGhvcj86IE1heWJlPE5vZGVXaXRoQXV0aG9yVG9Vc2VyQ29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIGRhdGFiYXNlIGlkZW50aWZpZXIgb2YgdGhlIGF1dGhvciBvZiB0aGUgbm9kZSAqL1xuICBhdXRob3JEYXRhYmFzZUlkPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgYXV0aG9yIG9mIHRoZSBub2RlICovXG4gIGF1dGhvcklkPzogTWF5YmU8U2NhbGFyc1snSUQnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGNhcHRpb24gZm9yIHRoZSByZXNvdXJjZSAqL1xuICBjYXB0aW9uPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgSGllcmFyY2hpY2FsQ29udGVudE5vZGUgdHlwZSBhbmQgdGhlIENvbnRlbnROb2RlIHR5cGUgKi9cbiAgY2hpbGRyZW4/OiBNYXliZTxIaWVyYXJjaGljYWxDb250ZW50Tm9kZVRvQ29udGVudE5vZGVDaGlsZHJlbkNvbm5lY3Rpb24+O1xuICAvKiogVGhlIG51bWJlciBvZiBjb21tZW50cy4gRXZlbiB0aG91Z2ggV1BHcmFwaFFMIGRlbm90ZXMgdGhpcyBmaWVsZCBhcyBhbiBpbnRlZ2VyLCBpbiBXb3JkUHJlc3MgdGhpcyBmaWVsZCBzaG91bGQgYmUgc2F2ZWQgYXMgYSBudW1lcmljIHN0cmluZyBmb3IgY29tcGF0aWJpbGl0eS4gKi9cbiAgY29tbWVudENvdW50PzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdGhlIGNvbW1lbnRzIGFyZSBvcGVuIG9yIGNsb3NlZCBmb3IgdGhpcyBwYXJ0aWN1bGFyIHBvc3QuICovXG4gIGNvbW1lbnRTdGF0dXM/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBNZWRpYUl0ZW0gdHlwZSBhbmQgdGhlIENvbW1lbnQgdHlwZSAqL1xuICBjb21tZW50cz86IE1heWJlPE1lZGlhSXRlbVRvQ29tbWVudENvbm5lY3Rpb24+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBDb250ZW50Tm9kZSB0eXBlIGFuZCB0aGUgQ29udGVudFR5cGUgdHlwZSAqL1xuICBjb250ZW50VHlwZT86IE1heWJlPENvbnRlbnROb2RlVG9Db250ZW50VHlwZUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBuYW1lIG9mIHRoZSBDb250ZW50IFR5cGUgdGhlIG5vZGUgYmVsb25ncyB0byAqL1xuICBjb250ZW50VHlwZU5hbWU6IFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXTtcbiAgLyoqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBzdG9yZWQgaW4gdGhlIGRhdGFiYXNlICovXG4gIGRhdGFiYXNlSWQ6IFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXTtcbiAgLyoqIFBvc3QgcHVibGlzaGluZyBkYXRlLiAqL1xuICBkYXRlPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBwdWJsaXNoaW5nIGRhdGUgc2V0IGluIEdNVC4gKi9cbiAgZGF0ZUdtdD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBEZXNjcmlwdGlvbiBvZiB0aGUgaW1hZ2UgKHN0b3JlZCBhcyBwb3N0X2NvbnRlbnQpICovXG4gIGRlc2NyaXB0aW9uPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBkZXNpcmVkIHNsdWcgb2YgdGhlIHBvc3QgKi9cbiAgZGVzaXJlZFNsdWc/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogSWYgYSB1c2VyIGhhcyBlZGl0ZWQgdGhlIG5vZGUgd2l0aGluIHRoZSBwYXN0IDE1IHNlY29uZHMsIHRoaXMgd2lsbCByZXR1cm4gdGhlIHVzZXIgdGhhdCBsYXN0IGVkaXRlZC4gTnVsbCBpZiB0aGUgZWRpdCBsb2NrIGRvZXNuJiMwMzk7dCBleGlzdCBvciBpcyBncmVhdGVyIHRoYW4gMTUgc2Vjb25kcyAqL1xuICBlZGl0aW5nTG9ja2VkQnk/OiBNYXliZTxDb250ZW50Tm9kZVRvRWRpdExvY2tDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgUlNTIGVuY2xvc3VyZSBmb3IgdGhlIG9iamVjdCAqL1xuICBlbmNsb3N1cmU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBDb250ZW50Tm9kZSB0eXBlIGFuZCB0aGUgRW5xdWV1ZWRTY3JpcHQgdHlwZSAqL1xuICBlbnF1ZXVlZFNjcmlwdHM/OiBNYXliZTxDb250ZW50Tm9kZVRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgQ29udGVudE5vZGUgdHlwZSBhbmQgdGhlIEVucXVldWVkU3R5bGVzaGVldCB0eXBlICovXG4gIGVucXVldWVkU3R5bGVzaGVldHM/OiBNYXliZTxDb250ZW50Tm9kZVRvRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvbj47XG4gIC8qKiBUaGUgZmlsZXNpemUgaW4gYnl0ZXMgb2YgdGhlIHJlc291cmNlICovXG4gIGZpbGVTaXplPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBnbG9iYWwgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgcG9zdC4gVGhpcyBjdXJyZW50bHkgbWF0Y2hlcyB0aGUgdmFsdWUgc3RvcmVkIGluIFdQX1Bvc3QtJmd0O2d1aWQgYW5kIHRoZSBndWlkIGNvbHVtbiBpbiB0aGUgJnF1b3Q7cG9zdF9vYmplY3RzJnF1b3Q7IGRhdGFiYXNlIHRhYmxlLiAqL1xuICBndWlkPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgYXR0YWNobWVudCBvYmplY3QuICovXG4gIGlkOiBTY2FsYXJzWydJRCddWydvdXRwdXQnXTtcbiAgLyoqIFdoZXRoZXIgdGhlIG5vZGUgaXMgYSBDb250ZW50IE5vZGUgKi9cbiAgaXNDb250ZW50Tm9kZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZXRoZXIgdGhlIG9iamVjdCBpcyBhIG5vZGUgaW4gdGhlIHByZXZpZXcgc3RhdGUgKi9cbiAgaXNQcmV2aWV3PzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBXaGV0aGVyIHRoZSBvYmplY3QgaXMgcmVzdHJpY3RlZCBmcm9tIHRoZSBjdXJyZW50IHZpZXdlciAqL1xuICBpc1Jlc3RyaWN0ZWQ/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdGhlIG5vZGUgaXMgYSBUZXJtICovXG4gIGlzVGVybU5vZGU6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBUaGUgdXNlciB0aGF0IG1vc3QgcmVjZW50bHkgZWRpdGVkIHRoZSBub2RlICovXG4gIGxhc3RFZGl0ZWRCeT86IE1heWJlPENvbnRlbnROb2RlVG9FZGl0TGFzdENvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBwZXJtYWxpbmsgb2YgdGhlIHBvc3QgKi9cbiAgbGluaz86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBEZXRhaWxzIGFib3V0IHRoZSBtZWRpYUl0ZW0gKi9cbiAgbWVkaWFEZXRhaWxzPzogTWF5YmU8TWVkaWFEZXRhaWxzPjtcbiAgLyoqXG4gICAqIFRoZSBpZCBmaWVsZCBtYXRjaGVzIHRoZSBXUF9Qb3N0LSZndDtJRCBmaWVsZC5cbiAgICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgZGF0YWJhc2VJZCBmaWVsZFxuICAgKi9cbiAgbWVkaWFJdGVtSWQ6IFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXTtcbiAgLyoqIFVybCBvZiB0aGUgbWVkaWFJdGVtICovXG4gIG1lZGlhSXRlbVVybD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUeXBlIG9mIHJlc291cmNlICovXG4gIG1lZGlhVHlwZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgbWltZSB0eXBlIG9mIHRoZSBtZWRpYUl0ZW0gKi9cbiAgbWltZVR5cGU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGxvY2FsIG1vZGlmaWVkIHRpbWUgZm9yIGEgcG9zdC4gSWYgYSBwb3N0IHdhcyByZWNlbnRseSB1cGRhdGVkIHRoZSBtb2RpZmllZCBmaWVsZCB3aWxsIGNoYW5nZSB0byBtYXRjaCB0aGUgY29ycmVzcG9uZGluZyB0aW1lLiAqL1xuICBtb2RpZmllZD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgR01UIG1vZGlmaWVkIHRpbWUgZm9yIGEgcG9zdC4gSWYgYSBwb3N0IHdhcyByZWNlbnRseSB1cGRhdGVkIHRoZSBtb2RpZmllZCBmaWVsZCB3aWxsIGNoYW5nZSB0byBtYXRjaCB0aGUgY29ycmVzcG9uZGluZyB0aW1lIGluIEdNVC4gKi9cbiAgbW9kaWZpZWRHbXQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIHBhcmVudCBvZiB0aGUgbm9kZS4gVGhlIHBhcmVudCBvYmplY3QgY2FuIGJlIG9mIHZhcmlvdXMgdHlwZXMgKi9cbiAgcGFyZW50PzogTWF5YmU8SGllcmFyY2hpY2FsQ29udGVudE5vZGVUb1BhcmVudENvbnRlbnROb2RlQ29ubmVjdGlvbkVkZ2U+O1xuICAvKiogRGF0YWJhc2UgaWQgb2YgdGhlIHBhcmVudCBub2RlICovXG4gIHBhcmVudERhdGFiYXNlSWQ/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBwYXJlbnQgbm9kZS4gKi9cbiAgcGFyZW50SWQ/OiBNYXliZTxTY2FsYXJzWydJRCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgZGF0YWJhc2UgaWQgb2YgdGhlIHByZXZpZXcgbm9kZSAqL1xuICBwcmV2aWV3UmV2aXNpb25EYXRhYmFzZUlkPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdGhlIG9iamVjdCBpcyBhIG5vZGUgaW4gdGhlIHByZXZpZXcgc3RhdGUgKi9cbiAgcHJldmlld1JldmlzaW9uSWQ/OiBNYXliZTxTY2FsYXJzWydJRCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgc2l6ZXMgYXR0cmlidXRlIHZhbHVlIGZvciBhbiBpbWFnZS4gKi9cbiAgc2l6ZXM/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIHVyaSBzbHVnIGZvciB0aGUgcG9zdC4gVGhpcyBpcyBlcXVpdmFsZW50IHRvIHRoZSBXUF9Qb3N0LSZndDtwb3N0X25hbWUgZmllbGQgYW5kIHRoZSBwb3N0X25hbWUgY29sdW1uIGluIHRoZSBkYXRhYmFzZSBmb3IgdGhlICZxdW90O3Bvc3Rfb2JqZWN0cyZxdW90OyB0YWJsZS4gKi9cbiAgc2x1Zz86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBVcmwgb2YgdGhlIG1lZGlhSXRlbSAqL1xuICBzb3VyY2VVcmw/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIHNyY3NldCBhdHRyaWJ1dGUgc3BlY2lmaWVzIHRoZSBVUkwgb2YgdGhlIGltYWdlIHRvIHVzZSBpbiBkaWZmZXJlbnQgc2l0dWF0aW9ucy4gSXQgaXMgYSBjb21tYSBzZXBhcmF0ZWQgc3RyaW5nIG9mIHVybHMgYW5kIHRoZWlyIHdpZHRocy4gKi9cbiAgc3JjU2V0PzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBjdXJyZW50IHN0YXR1cyBvZiB0aGUgb2JqZWN0ICovXG4gIHN0YXR1cz86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgdGVtcGxhdGUgYXNzaWduZWQgdG8gYSBub2RlIG9mIGNvbnRlbnQgKi9cbiAgdGVtcGxhdGU/OiBNYXliZTxDb250ZW50VGVtcGxhdGU+O1xuICAvKiogVGhlIHRpdGxlIG9mIHRoZSBwb3N0LiBUaGlzIGlzIGN1cnJlbnRseSBqdXN0IHRoZSByYXcgdGl0bGUuIEFuIGFtZW5kbWVudCB0byBzdXBwb3J0IHJlbmRlcmVkIHRpdGxlIG5lZWRzIHRvIGJlIG1hZGUuICovXG4gIHRpdGxlPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSB1bmlxdWUgcmVzb3VyY2UgaWRlbnRpZmllciBwYXRoICovXG4gIHVyaT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG5cbi8qKiBUaGUgbWVkaWFJdGVtIHR5cGUgKi9cbmV4cG9ydCB0eXBlIE1lZGlhSXRlbUFuY2VzdG9yc0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIHdoZXJlPzogSW5wdXRNYXliZTxIaWVyYXJjaGljYWxDb250ZW50Tm9kZVRvQ29udGVudE5vZGVBbmNlc3RvcnNDb25uZWN0aW9uV2hlcmVBcmdzPjtcbn07XG5cblxuLyoqIFRoZSBtZWRpYUl0ZW0gdHlwZSAqL1xuZXhwb3J0IHR5cGUgTWVkaWFJdGVtQ2FwdGlvbkFyZ3MgPSB7XG4gIGZvcm1hdD86IElucHV0TWF5YmU8UG9zdE9iamVjdEZpZWxkRm9ybWF0RW51bT47XG59O1xuXG5cbi8qKiBUaGUgbWVkaWFJdGVtIHR5cGUgKi9cbmV4cG9ydCB0eXBlIE1lZGlhSXRlbUNoaWxkcmVuQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPEhpZXJhcmNoaWNhbENvbnRlbnROb2RlVG9Db250ZW50Tm9kZUNoaWxkcmVuQ29ubmVjdGlvbldoZXJlQXJncz47XG59O1xuXG5cbi8qKiBUaGUgbWVkaWFJdGVtIHR5cGUgKi9cbmV4cG9ydCB0eXBlIE1lZGlhSXRlbUNvbW1lbnRzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPE1lZGlhSXRlbVRvQ29tbWVudENvbm5lY3Rpb25XaGVyZUFyZ3M+O1xufTtcblxuXG4vKiogVGhlIG1lZGlhSXRlbSB0eXBlICovXG5leHBvcnQgdHlwZSBNZWRpYUl0ZW1EZXNjcmlwdGlvbkFyZ3MgPSB7XG4gIGZvcm1hdD86IElucHV0TWF5YmU8UG9zdE9iamVjdEZpZWxkRm9ybWF0RW51bT47XG59O1xuXG5cbi8qKiBUaGUgbWVkaWFJdGVtIHR5cGUgKi9cbmV4cG9ydCB0eXBlIE1lZGlhSXRlbUVucXVldWVkU2NyaXB0c0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG59O1xuXG5cbi8qKiBUaGUgbWVkaWFJdGVtIHR5cGUgKi9cbmV4cG9ydCB0eXBlIE1lZGlhSXRlbUVucXVldWVkU3R5bGVzaGVldHNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xufTtcblxuXG4vKiogVGhlIG1lZGlhSXRlbSB0eXBlICovXG5leHBvcnQgdHlwZSBNZWRpYUl0ZW1GaWxlU2l6ZUFyZ3MgPSB7XG4gIHNpemU/OiBJbnB1dE1heWJlPE1lZGlhSXRlbVNpemVFbnVtPjtcbn07XG5cblxuLyoqIFRoZSBtZWRpYUl0ZW0gdHlwZSAqL1xuZXhwb3J0IHR5cGUgTWVkaWFJdGVtU2l6ZXNBcmdzID0ge1xuICBzaXplPzogSW5wdXRNYXliZTxNZWRpYUl0ZW1TaXplRW51bT47XG59O1xuXG5cbi8qKiBUaGUgbWVkaWFJdGVtIHR5cGUgKi9cbmV4cG9ydCB0eXBlIE1lZGlhSXRlbVNvdXJjZVVybEFyZ3MgPSB7XG4gIHNpemU/OiBJbnB1dE1heWJlPE1lZGlhSXRlbVNpemVFbnVtPjtcbn07XG5cblxuLyoqIFRoZSBtZWRpYUl0ZW0gdHlwZSAqL1xuZXhwb3J0IHR5cGUgTWVkaWFJdGVtU3JjU2V0QXJncyA9IHtcbiAgc2l6ZT86IElucHV0TWF5YmU8TWVkaWFJdGVtU2l6ZUVudW0+O1xufTtcblxuXG4vKiogVGhlIG1lZGlhSXRlbSB0eXBlICovXG5leHBvcnQgdHlwZSBNZWRpYUl0ZW1UaXRsZUFyZ3MgPSB7XG4gIGZvcm1hdD86IElucHV0TWF5YmU8UG9zdE9iamVjdEZpZWxkRm9ybWF0RW51bT47XG59O1xuXG4vKiogQ29ubmVjdGlvbiB0byBtZWRpYUl0ZW0gTm9kZXMgKi9cbmV4cG9ydCB0eXBlIE1lZGlhSXRlbUNvbm5lY3Rpb24gPSB7XG4gIC8qKiBBIGxpc3Qgb2YgZWRnZXMgKHJlbGF0aW9uYWwgY29udGV4dCkgYmV0d2VlbiBSb290UXVlcnkgYW5kIGNvbm5lY3RlZCBtZWRpYUl0ZW0gTm9kZXMgKi9cbiAgZWRnZXM6IEFycmF5PE1lZGlhSXRlbUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIEEgbGlzdCBvZiBjb25uZWN0ZWQgbWVkaWFJdGVtIE5vZGVzICovXG4gIG5vZGVzOiBBcnJheTxNZWRpYUl0ZW0+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBNZWRpYUl0ZW1Db25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogRWRnZSBiZXR3ZWVuIGEgTm9kZSBhbmQgYSBjb25uZWN0ZWQgbWVkaWFJdGVtICovXG5leHBvcnQgdHlwZSBNZWRpYUl0ZW1Db25uZWN0aW9uRWRnZSA9IHtcbiAgLyoqIE9wYXF1ZSByZWZlcmVuY2UgdG8gdGhlIG5vZGVzIHBvc2l0aW9uIGluIHRoZSBjb25uZWN0aW9uLiBWYWx1ZSBjYW4gYmUgdXNlZCB3aXRoIHBhZ2luYXRpb24gYXJncy4gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBjb25uZWN0ZWQgbWVkaWFJdGVtIE5vZGUgKi9cbiAgbm9kZTogTWVkaWFJdGVtO1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgY29ubmVjdGVkIE1lZGlhSXRlbUNvbm5lY3Rpb25FZGdlICovXG5leHBvcnQgdHlwZSBNZWRpYUl0ZW1Db25uZWN0aW9uUGFnZUluZm8gPSB7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogVGhlIFR5cGUgb2YgSWRlbnRpZmllciB1c2VkIHRvIGZldGNoIGEgc2luZ2xlIHJlc291cmNlLiBEZWZhdWx0IGlzIElELiAqL1xuZXhwb3J0IGVudW0gTWVkaWFJdGVtSWRUeXBlIHtcbiAgLyoqIElkZW50aWZ5IGEgcmVzb3VyY2UgYnkgdGhlIERhdGFiYXNlIElELiAqL1xuICBEYXRhYmFzZUlkID0gJ0RBVEFCQVNFX0lEJyxcbiAgLyoqIElkZW50aWZ5IGEgcmVzb3VyY2UgYnkgdGhlIChoYXNoZWQpIEdsb2JhbCBJRC4gKi9cbiAgSWQgPSAnSUQnLFxuICAvKiogSWRlbnRpZnkgYSByZXNvdXJjZSBieSB0aGUgc2x1Zy4gQXZhaWxhYmxlIHRvIG5vbi1oaWVyYXJjaGNpYWwgVHlwZXMgd2hlcmUgdGhlIHNsdWcgaXMgYSB1bmlxdWUgaWRlbnRpZmllci4gKi9cbiAgU2x1ZyA9ICdTTFVHJyxcbiAgLyoqIElkZW50aWZ5IGEgbWVkaWEgaXRlbSBieSBpdHMgc291cmNlIHVybCAqL1xuICBTb3VyY2VVcmwgPSAnU09VUkNFX1VSTCcsXG4gIC8qKiBJZGVudGlmeSBhIHJlc291cmNlIGJ5IHRoZSBVUkkuICovXG4gIFVyaSA9ICdVUkknXG59XG5cbi8qKiBNZXRhIGNvbm5lY3RlZCB0byBhIE1lZGlhSXRlbSAqL1xuZXhwb3J0IHR5cGUgTWVkaWFJdGVtTWV0YSA9IHtcbiAgX190eXBlbmFtZT86ICdNZWRpYUl0ZW1NZXRhJztcbiAgLyoqIEFwZXJ0dXJlIG1lYXN1cmVtZW50IG9mIHRoZSBtZWRpYSBpdGVtLiAqL1xuICBhcGVydHVyZT86IE1heWJlPFNjYWxhcnNbJ0Zsb2F0J11bJ291dHB1dCddPjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHRoZSBjYW1lcmEgdXNlZCB0byBjcmVhdGUgdGhlIG1lZGlhIGl0ZW0uICovXG4gIGNhbWVyYT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgdGV4dCBzdHJpbmcgZGVzY3JpcHRpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBtZWRpYSBpdGVtLiAqL1xuICBjYXB0aW9uPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIENvcHlyaWdodCBpbmZvcm1hdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIG1lZGlhIGl0ZW0uICovXG4gIGNvcHlyaWdodD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgZGF0ZS90aW1lIHdoZW4gdGhlIG1lZGlhIHdhcyBjcmVhdGVkLiAqL1xuICBjcmVhdGVkVGltZXN0YW1wPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBvcmlnaW5hbCBjcmVhdG9yIG9mIHRoZSBtZWRpYSBpdGVtLiAqL1xuICBjcmVkaXQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGZvY2FsIGxlbmd0aCB2YWx1ZSBvZiB0aGUgbWVkaWEgaXRlbS4gKi9cbiAgZm9jYWxMZW5ndGg/OiBNYXliZTxTY2FsYXJzWydGbG9hdCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgSVNPIChJbnRlcm5hdGlvbmFsIE9yZ2FuaXphdGlvbiBmb3IgU3RhbmRhcmRpemF0aW9uKSB2YWx1ZSBvZiB0aGUgbWVkaWEgaXRlbS4gKi9cbiAgaXNvPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIExpc3Qgb2Yga2V5d29yZHMgdXNlZCB0byBkZXNjcmliZSBvciBpZGVudGZ5IHRoZSBtZWRpYSBpdGVtLiAqL1xuICBrZXl3b3Jkcz86IE1heWJlPEFycmF5PE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT4+PjtcbiAgLyoqIFRoZSB2ZXJ0aWNhbCBvciBob3Jpem9udGFsIGFzcGVjdCBvZiB0aGUgbWVkaWEgaXRlbS4gKi9cbiAgb3JpZW50YXRpb24/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIHNodXR0ZXIgc3BlZWQgaW5mb3JtYXRpb24gb2YgdGhlIG1lZGlhIGl0ZW0uICovXG4gIHNodXR0ZXJTcGVlZD86IE1heWJlPFNjYWxhcnNbJ0Zsb2F0J11bJ291dHB1dCddPjtcbiAgLyoqIEEgdXNlZnVsIHRpdGxlIGZvciB0aGUgbWVkaWEgaXRlbS4gKi9cbiAgdGl0bGU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIFRoZSBzaXplIG9mIHRoZSBtZWRpYSBpdGVtIG9iamVjdC4gKi9cbmV4cG9ydCBlbnVtIE1lZGlhSXRlbVNpemVFbnVtIHtcbiAgLyoqIE1lZGlhSXRlbSB3aXRoIHRoZSBhbG0tdGh1bWJuYWlsIHNpemUgKi9cbiAgQWxtVGh1bWJuYWlsID0gJ0FMTV9USFVNQk5BSUwnLFxuICAvKiogTWVkaWFJdGVtIHdpdGggdGhlIGF1dGhvcnNoaXAtYm94LWF2YXRhciBzaXplICovXG4gIEF1dGhvcnNoaXBCb3hBdmF0YXIgPSAnQVVUSE9SU0hJUF9CT1hfQVZBVEFSJyxcbiAgLyoqIE1lZGlhSXRlbSB3aXRoIHRoZSBhdXRob3JzaGlwLWJveC1yZWxhdGVkIHNpemUgKi9cbiAgQXV0aG9yc2hpcEJveFJlbGF0ZWQgPSAnQVVUSE9SU0hJUF9CT1hfUkVMQVRFRCcsXG4gIC8qKiBNZWRpYUl0ZW0gd2l0aCB0aGUgYXV0aG9yc2hpcC1wb3N0LWNhcmRzIHNpemUgKi9cbiAgQXV0aG9yc2hpcFBvc3RDYXJkcyA9ICdBVVRIT1JTSElQX1BPU1RfQ0FSRFMnLFxuICAvKiogTWVkaWFJdGVtIHdpdGggdGhlIGF1dGhvcnNoaXAtcG9zdC1mbGF0IHNpemUgKi9cbiAgQXV0aG9yc2hpcFBvc3RGbGF0ID0gJ0FVVEhPUlNISVBfUE9TVF9GTEFUJyxcbiAgLyoqIE1lZGlhSXRlbSB3aXRoIHRoZSBhdXRob3JzaGlwLXBvc3QtdGh1bWJzIHNpemUgKi9cbiAgQXV0aG9yc2hpcFBvc3RUaHVtYnMgPSAnQVVUSE9SU0hJUF9QT1NUX1RIVU1CUycsXG4gIC8qKiBNZWRpYUl0ZW0gd2l0aCB0aGUgYmxvZ190aHVtYm5haWwgc2l6ZSAqL1xuICBCbG9nVGh1bWJuYWlsID0gJ0JMT0dfVEhVTUJOQUlMJyxcbiAgLyoqIE1lZGlhSXRlbSB3aXRoIHRoZSBsYXJnZSBzaXplICovXG4gIExhcmdlID0gJ0xBUkdFJyxcbiAgLyoqIE1lZGlhSXRlbSB3aXRoIHRoZSBtYWlscG9ldF9uZXdzbGV0dGVyX21heCBzaXplICovXG4gIE1haWxwb2V0TmV3c2xldHRlck1heCA9ICdNQUlMUE9FVF9ORVdTTEVUVEVSX01BWCcsXG4gIC8qKiBNZWRpYUl0ZW0gd2l0aCB0aGUgbWVkaXVtIHNpemUgKi9cbiAgTWVkaXVtID0gJ01FRElVTScsXG4gIC8qKiBNZWRpYUl0ZW0gd2l0aCB0aGUgbWVkaXVtX2xhcmdlIHNpemUgKi9cbiAgTWVkaXVtTGFyZ2UgPSAnTUVESVVNX0xBUkdFJyxcbiAgLyoqIE1lZGlhSXRlbSB3aXRoIHRoZSB0aHVtYm5haWwgc2l6ZSAqL1xuICBUaHVtYm5haWwgPSAnVEhVTUJOQUlMJyxcbiAgLyoqIE1lZGlhSXRlbSB3aXRoIHRoZSAxNTM2eDE1MzYgc2l6ZSAqL1xuICAnMTUzNlgxNTM2JyA9ICdfMTUzNlgxNTM2JyxcbiAgLyoqIE1lZGlhSXRlbSB3aXRoIHRoZSAyMDQ4eDIwNDggc2l6ZSAqL1xuICAnMjA0OFgyMDQ4JyA9ICdfMjA0OFgyMDQ4J1xufVxuXG4vKiogVGhlIHN0YXR1cyBvZiB0aGUgbWVkaWEgaXRlbSBvYmplY3QuICovXG5leHBvcnQgZW51bSBNZWRpYUl0ZW1TdGF0dXNFbnVtIHtcbiAgLyoqIE9iamVjdHMgd2l0aCB0aGUgYXV0by1kcmFmdCBzdGF0dXMgKi9cbiAgQXV0b0RyYWZ0ID0gJ0FVVE9fRFJBRlQnLFxuICAvKiogT2JqZWN0cyB3aXRoIHRoZSBpbmhlcml0IHN0YXR1cyAqL1xuICBJbmhlcml0ID0gJ0lOSEVSSVQnLFxuICAvKiogT2JqZWN0cyB3aXRoIHRoZSBwcml2YXRlIHN0YXR1cyAqL1xuICBQcml2YXRlID0gJ1BSSVZBVEUnLFxuICAvKiogT2JqZWN0cyB3aXRoIHRoZSB0cmFzaCBzdGF0dXMgKi9cbiAgVHJhc2ggPSAnVFJBU0gnXG59XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIE1lZGlhSXRlbSB0eXBlIGFuZCB0aGUgQ29tbWVudCB0eXBlICovXG5leHBvcnQgdHlwZSBNZWRpYUl0ZW1Ub0NvbW1lbnRDb25uZWN0aW9uID0gQ29tbWVudENvbm5lY3Rpb24gJiBDb25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ01lZGlhSXRlbVRvQ29tbWVudENvbm5lY3Rpb24nO1xuICAvKiogRWRnZXMgZm9yIHRoZSBNZWRpYUl0ZW1Ub0NvbW1lbnRDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbiAgZWRnZXM6IEFycmF5PE1lZGlhSXRlbVRvQ29tbWVudENvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBub2RlcyBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZXM6IEFycmF5PENvbW1lbnQ+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBNZWRpYUl0ZW1Ub0NvbW1lbnRDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIE1lZGlhSXRlbVRvQ29tbWVudENvbm5lY3Rpb25FZGdlID0gQ29tbWVudENvbm5lY3Rpb25FZGdlICYgRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdNZWRpYUl0ZW1Ub0NvbW1lbnRDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogQ29tbWVudDtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlICZxdW90O01lZGlhSXRlbVRvQ29tbWVudENvbm5lY3Rpb24mcXVvdDsgKi9cbmV4cG9ydCB0eXBlIE1lZGlhSXRlbVRvQ29tbWVudENvbm5lY3Rpb25QYWdlSW5mbyA9IENvbW1lbnRDb25uZWN0aW9uUGFnZUluZm8gJiBQYWdlSW5mbyAmIFdwUGFnZUluZm8gJiB7XG4gIF9fdHlwZW5hbWU/OiAnTWVkaWFJdGVtVG9Db21tZW50Q29ubmVjdGlvblBhZ2VJbmZvJztcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBBcmd1bWVudHMgZm9yIGZpbHRlcmluZyB0aGUgTWVkaWFJdGVtVG9Db21tZW50Q29ubmVjdGlvbiBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBNZWRpYUl0ZW1Ub0NvbW1lbnRDb25uZWN0aW9uV2hlcmVBcmdzID0ge1xuICAvKiogQ29tbWVudCBhdXRob3IgZW1haWwgYWRkcmVzcy4gKi9cbiAgYXV0aG9yRW1haWw/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIGF1dGhvciBJRHMgdG8gaW5jbHVkZSBjb21tZW50cyBmb3IuICovXG4gIGF1dGhvckluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBhdXRob3IgSURzIHRvIGV4Y2x1ZGUgY29tbWVudHMgZm9yLiAqL1xuICBhdXRob3JOb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQ29tbWVudCBhdXRob3IgVVJMLiAqL1xuICBhdXRob3JVcmw/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIGNvbW1lbnQgSURzIHRvIGluY2x1ZGUuICovXG4gIGNvbW1lbnRJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgSURzIG9mIHVzZXJzIHdob3NlIHVuYXBwcm92ZWQgY29tbWVudHMgd2lsbCBiZSByZXR1cm5lZCBieSB0aGUgcXVlcnkgcmVnYXJkbGVzcyBvZiBzdGF0dXMuICovXG4gIGNvbW1lbnROb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogSW5jbHVkZSBjb21tZW50cyBvZiBhIGdpdmVuIHR5cGUuICovXG4gIGNvbW1lbnRUeXBlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBJbmNsdWRlIGNvbW1lbnRzIGZyb20gYSBnaXZlbiBhcnJheSBvZiBjb21tZW50IHR5cGVzLiAqL1xuICBjb21tZW50VHlwZUluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogRXhjbHVkZSBjb21tZW50cyBmcm9tIGEgZ2l2ZW4gYXJyYXkgb2YgY29tbWVudCB0eXBlcy4gKi9cbiAgY29tbWVudFR5cGVOb3RJbj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQ29udGVudCBvYmplY3QgYXV0aG9yIElEIHRvIGxpbWl0IHJlc3VsdHMgYnkuICovXG4gIGNvbnRlbnRBdXRob3I/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIGF1dGhvciBJRHMgdG8gcmV0cmlldmUgY29tbWVudHMgZm9yLiAqL1xuICBjb250ZW50QXV0aG9ySW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIGF1dGhvciBJRHMgKm5vdCogdG8gcmV0cmlldmUgY29tbWVudHMgZm9yLiAqL1xuICBjb250ZW50QXV0aG9yTm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIExpbWl0IHJlc3VsdHMgdG8gdGhvc2UgYWZmaWxpYXRlZCB3aXRoIGEgZ2l2ZW4gY29udGVudCBvYmplY3QgSUQuICovXG4gIGNvbnRlbnRJZD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBjb250ZW50IG9iamVjdCBJRHMgdG8gaW5jbHVkZSBhZmZpbGlhdGVkIGNvbW1lbnRzIGZvci4gKi9cbiAgY29udGVudElkSW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIGNvbnRlbnQgb2JqZWN0IElEcyB0byBleGNsdWRlIGFmZmlsaWF0ZWQgY29tbWVudHMgZm9yLiAqL1xuICBjb250ZW50SWROb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQ29udGVudCBvYmplY3QgbmFtZSAoaS5lLiBzbHVnICkgdG8gcmV0cmlldmUgYWZmaWxpYXRlZCBjb21tZW50cyBmb3IuICovXG4gIGNvbnRlbnROYW1lPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBDb250ZW50IE9iamVjdCBwYXJlbnQgSUQgdG8gcmV0cmlldmUgYWZmaWxpYXRlZCBjb21tZW50cyBmb3IuICovXG4gIGNvbnRlbnRQYXJlbnQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIGNvbnRlbnQgb2JqZWN0IHN0YXR1c2VzIHRvIHJldHJpZXZlIGFmZmlsaWF0ZWQgY29tbWVudHMgZm9yLiBQYXNzICdhbnknIHRvIG1hdGNoIGFueSB2YWx1ZS4gKi9cbiAgY29udGVudFN0YXR1cz86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxQb3N0U3RhdHVzRW51bT4+PjtcbiAgLyoqIENvbnRlbnQgb2JqZWN0IHR5cGUgb3IgYXJyYXkgb2YgdHlwZXMgdG8gcmV0cmlldmUgYWZmaWxpYXRlZCBjb21tZW50cyBmb3IuIFBhc3MgJ2FueScgdG8gbWF0Y2ggYW55IHZhbHVlLiAqL1xuICBjb250ZW50VHlwZT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxDb250ZW50VHlwZUVudW0+Pj47XG4gIC8qKiBBcnJheSBvZiBJRHMgb3IgZW1haWwgYWRkcmVzc2VzIG9mIHVzZXJzIHdob3NlIHVuYXBwcm92ZWQgY29tbWVudHMgd2lsbCBiZSByZXR1cm5lZCBieSB0aGUgcXVlcnkgcmVnYXJkbGVzcyBvZiAkc3RhdHVzLiBEZWZhdWx0IGVtcHR5ICovXG4gIGluY2x1ZGVVbmFwcHJvdmVkPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBLYXJtYSBzY29yZSB0byByZXRyaWV2ZSBtYXRjaGluZyBjb21tZW50cyBmb3IuICovXG4gIGthcm1hPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgY2FyZGluYWxpdHkgb2YgdGhlIG9yZGVyIG9mIHRoZSBjb25uZWN0aW9uICovXG4gIG9yZGVyPzogSW5wdXRNYXliZTxPcmRlckVudW0+O1xuICAvKiogRmllbGQgdG8gb3JkZXIgdGhlIGNvbW1lbnRzIGJ5LiAqL1xuICBvcmRlcmJ5PzogSW5wdXRNYXliZTxDb21tZW50c0Nvbm5lY3Rpb25PcmRlcmJ5RW51bT47XG4gIC8qKiBQYXJlbnQgSUQgb2YgY29tbWVudCB0byByZXRyaWV2ZSBjaGlsZHJlbiBvZi4gKi9cbiAgcGFyZW50PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBwYXJlbnQgSURzIG9mIGNvbW1lbnRzIHRvIHJldHJpZXZlIGNoaWxkcmVuIGZvci4gKi9cbiAgcGFyZW50SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIHBhcmVudCBJRHMgb2YgY29tbWVudHMgKm5vdCogdG8gcmV0cmlldmUgY2hpbGRyZW4gZm9yLiAqL1xuICBwYXJlbnROb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogU2VhcmNoIHRlcm0ocykgdG8gcmV0cmlldmUgbWF0Y2hpbmcgY29tbWVudHMgZm9yLiAqL1xuICBzZWFyY2g/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIENvbW1lbnQgc3RhdHVzIHRvIGxpbWl0IHJlc3VsdHMgYnkuICovXG4gIHN0YXR1cz86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogSW5jbHVkZSBjb21tZW50cyBmb3IgYSBzcGVjaWZpYyB1c2VyIElELiAqL1xuICB1c2VySWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIERldGFpbHMgb2YgYW4gYXZhaWxhYmxlIHNpemUgZm9yIGEgbWVkaWEgaXRlbSAqL1xuZXhwb3J0IHR5cGUgTWVkaWFTaXplID0ge1xuICBfX3R5cGVuYW1lPzogJ01lZGlhU2l6ZSc7XG4gIC8qKiBUaGUgZmlsZW5hbWUgb2YgdGhlIHJlZmVyZW5jZWQgc2l6ZSAqL1xuICBmaWxlPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBmaWxlc2l6ZSBvZiB0aGUgcmVzb3VyY2UgKi9cbiAgZmlsZVNpemU/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGhlaWdodCBvZiB0aGUgcmVmZXJlbmNlZCBzaXplICovXG4gIGhlaWdodD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgbWltZSB0eXBlIG9mIHRoZSByZWZlcmVuY2VkIHNpemUgKi9cbiAgbWltZVR5cGU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIHJlZmVyZW5jZWQgc2l6ZSBuYW1lICovXG4gIG5hbWU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIHVybCBvZiB0aGUgcmVmZXJlbmNlZCBzaXplICovXG4gIHNvdXJjZVVybD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgd2lkdGggb2YgdGhlIHJlZmVyZW5jZWQgc2l6ZSAqL1xuICB3aWR0aD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogTWVudXMgYXJlIHRoZSBjb250YWluZXJzIGZvciBuYXZpZ2F0aW9uIGl0ZW1zLiBNZW51cyBjYW4gYmUgYXNzaWduZWQgdG8gbWVudSBsb2NhdGlvbnMsIHdoaWNoIGFyZSB0eXBpY2FsbHkgcmVnaXN0ZXJlZCBieSB0aGUgYWN0aXZlIHRoZW1lLiAqL1xuZXhwb3J0IHR5cGUgTWVudSA9IERhdGFiYXNlSWRlbnRpZmllciAmIE5vZGUgJiB7XG4gIF9fdHlwZW5hbWU/OiAnTWVudSc7XG4gIC8qKiBUaGUgbnVtYmVyIG9mIGl0ZW1zIGluIHRoZSBtZW51ICovXG4gIGNvdW50PzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBzdG9yZWQgaW4gdGhlIGRhdGFiYXNlICovXG4gIGRhdGFiYXNlSWQ6IFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXTtcbiAgLyoqIFRoZSBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgbmF2IG1lbnUgb2JqZWN0LiAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnb3V0cHV0J107XG4gIC8qKiBXaGV0aGVyIHRoZSBvYmplY3QgaXMgcmVzdHJpY3RlZCBmcm9tIHRoZSBjdXJyZW50IHZpZXdlciAqL1xuICBpc1Jlc3RyaWN0ZWQ/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBsb2NhdGlvbnMgYSBtZW51IGlzIGFzc2lnbmVkIHRvICovXG4gIGxvY2F0aW9ucz86IE1heWJlPEFycmF5PE1heWJlPE1lbnVMb2NhdGlvbkVudW0+Pj47XG4gIC8qKlxuICAgKiBXUCBJRCBvZiB0aGUgbmF2IG1lbnUuXG4gICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgdGhlIGRhdGFiYXNlSWQgZmllbGRcbiAgICovXG4gIG1lbnVJZD86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIE1lbnUgdHlwZSBhbmQgdGhlIE1lbnVJdGVtIHR5cGUgKi9cbiAgbWVudUl0ZW1zPzogTWF5YmU8TWVudVRvTWVudUl0ZW1Db25uZWN0aW9uPjtcbiAgLyoqIERpc3BsYXkgbmFtZSBvZiB0aGUgbWVudS4gRXF1aXZhbGVudCB0byBXUF9UZXJtLSZndDtuYW1lLiAqL1xuICBuYW1lPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSB1cmwgZnJpZW5kbHkgbmFtZSBvZiB0aGUgbWVudS4gRXF1aXZhbGVudCB0byBXUF9UZXJtLSZndDtzbHVnICovXG4gIHNsdWc/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuXG4vKiogTWVudXMgYXJlIHRoZSBjb250YWluZXJzIGZvciBuYXZpZ2F0aW9uIGl0ZW1zLiBNZW51cyBjYW4gYmUgYXNzaWduZWQgdG8gbWVudSBsb2NhdGlvbnMsIHdoaWNoIGFyZSB0eXBpY2FsbHkgcmVnaXN0ZXJlZCBieSB0aGUgYWN0aXZlIHRoZW1lLiAqL1xuZXhwb3J0IHR5cGUgTWVudU1lbnVJdGVtc0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIHdoZXJlPzogSW5wdXRNYXliZTxNZW51VG9NZW51SXRlbUNvbm5lY3Rpb25XaGVyZUFyZ3M+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gdG8gTWVudSBOb2RlcyAqL1xuZXhwb3J0IHR5cGUgTWVudUNvbm5lY3Rpb24gPSB7XG4gIC8qKiBBIGxpc3Qgb2YgZWRnZXMgKHJlbGF0aW9uYWwgY29udGV4dCkgYmV0d2VlbiBSb290UXVlcnkgYW5kIGNvbm5lY3RlZCBNZW51IE5vZGVzICovXG4gIGVkZ2VzOiBBcnJheTxNZW51Q29ubmVjdGlvbkVkZ2U+O1xuICAvKiogQSBsaXN0IG9mIGNvbm5lY3RlZCBNZW51IE5vZGVzICovXG4gIG5vZGVzOiBBcnJheTxNZW51PjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogTWVudUNvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBFZGdlIGJldHdlZW4gYSBOb2RlIGFuZCBhIGNvbm5lY3RlZCBNZW51ICovXG5leHBvcnQgdHlwZSBNZW51Q29ubmVjdGlvbkVkZ2UgPSB7XG4gIC8qKiBPcGFxdWUgcmVmZXJlbmNlIHRvIHRoZSBub2RlcyBwb3NpdGlvbiBpbiB0aGUgY29ubmVjdGlvbi4gVmFsdWUgY2FuIGJlIHVzZWQgd2l0aCBwYWdpbmF0aW9uIGFyZ3MuICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgY29ubmVjdGVkIE1lbnUgTm9kZSAqL1xuICBub2RlOiBNZW51O1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgY29ubmVjdGVkIE1lbnVDb25uZWN0aW9uRWRnZSAqL1xuZXhwb3J0IHR5cGUgTWVudUNvbm5lY3Rpb25QYWdlSW5mbyA9IHtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBOYXZpZ2F0aW9uIG1lbnUgaXRlbXMgYXJlIHRoZSBpbmRpdmlkdWFsIGl0ZW1zIGFzc2lnbmVkIHRvIGEgbWVudS4gVGhlc2UgYXJlIHJlbmRlcmVkIGFzIHRoZSBsaW5rcyBpbiBhIG5hdmlnYXRpb24gbWVudS4gKi9cbmV4cG9ydCB0eXBlIE1lbnVJdGVtID0gRGF0YWJhc2VJZGVudGlmaWVyICYgTm9kZSAmIHtcbiAgX190eXBlbmFtZT86ICdNZW51SXRlbSc7XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIE1lbnVJdGVtIHR5cGUgYW5kIHRoZSBNZW51SXRlbSB0eXBlICovXG4gIGNoaWxkSXRlbXM/OiBNYXliZTxNZW51SXRlbVRvTWVudUl0ZW1Db25uZWN0aW9uPjtcbiAgLyoqIENvbm5lY3Rpb24gZnJvbSBNZW51SXRlbSB0byBpdCYjMDM5O3MgY29ubmVjdGVkIG5vZGUgKi9cbiAgY29ubmVjdGVkTm9kZT86IE1heWJlPE1lbnVJdGVtVG9NZW51SXRlbUxpbmthYmxlQ29ubmVjdGlvbkVkZ2U+O1xuICAvKipcbiAgICogVGhlIG9iamVjdCBjb25uZWN0ZWQgdG8gdGhpcyBtZW51IGl0ZW0uXG4gICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgdGhlIGNvbm5lY3RlZE5vZGUgZmllbGRcbiAgICovXG4gIGNvbm5lY3RlZE9iamVjdD86IE1heWJlPE1lbnVJdGVtT2JqZWN0VW5pb24+O1xuICAvKiogQ2xhc3MgYXR0cmlidXRlIGZvciB0aGUgbWVudSBpdGVtIGxpbmsgKi9cbiAgY3NzQ2xhc3Nlcz86IE1heWJlPEFycmF5PE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT4+PjtcbiAgLyoqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBzdG9yZWQgaW4gdGhlIGRhdGFiYXNlICovXG4gIGRhdGFiYXNlSWQ6IFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXTtcbiAgLyoqIERlc2NyaXB0aW9uIG9mIHRoZSBtZW51IGl0ZW0uICovXG4gIGRlc2NyaXB0aW9uPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgbmF2IG1lbnUgaXRlbSBvYmplY3QuICovXG4gIGlkOiBTY2FsYXJzWydJRCddWydvdXRwdXQnXTtcbiAgLyoqIFdoZXRoZXIgdGhlIG9iamVjdCBpcyByZXN0cmljdGVkIGZyb20gdGhlIGN1cnJlbnQgdmlld2VyICovXG4gIGlzUmVzdHJpY3RlZD86IE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J10+O1xuICAvKiogTGFiZWwgb3IgdGl0bGUgb2YgdGhlIG1lbnUgaXRlbS4gKi9cbiAgbGFiZWw/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogTGluayByZWxhdGlvbnNoaXAgKFhGTikgb2YgdGhlIG1lbnUgaXRlbS4gKi9cbiAgbGlua1JlbGF0aW9uc2hpcD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgbG9jYXRpb25zIHRoZSBtZW51IGl0ZW0mIzAzOTtzIE1lbnUgaXMgYXNzaWduZWQgdG8gKi9cbiAgbG9jYXRpb25zPzogTWF5YmU8QXJyYXk8TWF5YmU8TWVudUxvY2F0aW9uRW51bT4+PjtcbiAgLyoqIFRoZSBNZW51IGEgTWVudUl0ZW0gaXMgcGFydCBvZiAqL1xuICBtZW51PzogTWF5YmU8TWVudUl0ZW1Ub01lbnVDb25uZWN0aW9uRWRnZT47XG4gIC8qKlxuICAgKiBXUCBJRCBvZiB0aGUgbWVudSBpdGVtLlxuICAgKiBAZGVwcmVjYXRlZCBEZXByZWNhdGVkIGluIGZhdm9yIG9mIHRoZSBkYXRhYmFzZUlkIGZpZWxkXG4gICAqL1xuICBtZW51SXRlbUlkPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIE1lbnUgaXRlbSBvcmRlciAqL1xuICBvcmRlcj86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgZGF0YWJhc2UgaWQgb2YgdGhlIHBhcmVudCBtZW51IGl0ZW0gb3IgbnVsbCBpZiBpdCBpcyB0aGUgcm9vdCAqL1xuICBwYXJlbnREYXRhYmFzZUlkPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgcGFyZW50IG5hdiBtZW51IGl0ZW0gb2JqZWN0LiAqL1xuICBwYXJlbnRJZD86IE1heWJlPFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddPjtcbiAgLyoqIFBhdGggZm9yIHRoZSByZXNvdXJjZS4gUmVsYXRpdmUgcGF0aCBmb3IgaW50ZXJuYWwgcmVzb3VyY2VzLiBBYnNvbHV0ZSBwYXRoIGZvciBleHRlcm5hbCByZXNvdXJjZXMuICovXG4gIHBhdGg/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGFyZ2V0IGF0dHJpYnV0ZSBmb3IgdGhlIG1lbnUgaXRlbSBsaW5rLiAqL1xuICB0YXJnZXQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGl0bGUgYXR0cmlidXRlIGZvciB0aGUgbWVudSBpdGVtIGxpbmsgKi9cbiAgdGl0bGU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIHVyaSBvZiB0aGUgcmVzb3VyY2UgdGhlIG1lbnUgaXRlbSBsaW5rcyB0byAqL1xuICB1cmk/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVVJMIG9yIGRlc3RpbmF0aW9uIG9mIHRoZSBtZW51IGl0ZW0uICovXG4gIHVybD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG5cbi8qKiBOYXZpZ2F0aW9uIG1lbnUgaXRlbXMgYXJlIHRoZSBpbmRpdmlkdWFsIGl0ZW1zIGFzc2lnbmVkIHRvIGEgbWVudS4gVGhlc2UgYXJlIHJlbmRlcmVkIGFzIHRoZSBsaW5rcyBpbiBhIG5hdmlnYXRpb24gbWVudS4gKi9cbmV4cG9ydCB0eXBlIE1lbnVJdGVtQ2hpbGRJdGVtc0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIHdoZXJlPzogSW5wdXRNYXliZTxNZW51SXRlbVRvTWVudUl0ZW1Db25uZWN0aW9uV2hlcmVBcmdzPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIHRvIE1lbnVJdGVtIE5vZGVzICovXG5leHBvcnQgdHlwZSBNZW51SXRlbUNvbm5lY3Rpb24gPSB7XG4gIC8qKiBBIGxpc3Qgb2YgZWRnZXMgKHJlbGF0aW9uYWwgY29udGV4dCkgYmV0d2VlbiBSb290UXVlcnkgYW5kIGNvbm5lY3RlZCBNZW51SXRlbSBOb2RlcyAqL1xuICBlZGdlczogQXJyYXk8TWVudUl0ZW1Db25uZWN0aW9uRWRnZT47XG4gIC8qKiBBIGxpc3Qgb2YgY29ubmVjdGVkIE1lbnVJdGVtIE5vZGVzICovXG4gIG5vZGVzOiBBcnJheTxNZW51SXRlbT47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IE1lbnVJdGVtQ29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEVkZ2UgYmV0d2VlbiBhIE5vZGUgYW5kIGEgY29ubmVjdGVkIE1lbnVJdGVtICovXG5leHBvcnQgdHlwZSBNZW51SXRlbUNvbm5lY3Rpb25FZGdlID0ge1xuICAvKiogT3BhcXVlIHJlZmVyZW5jZSB0byB0aGUgbm9kZXMgcG9zaXRpb24gaW4gdGhlIGNvbm5lY3Rpb24uIFZhbHVlIGNhbiBiZSB1c2VkIHdpdGggcGFnaW5hdGlvbiBhcmdzLiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGNvbm5lY3RlZCBNZW51SXRlbSBOb2RlICovXG4gIG5vZGU6IE1lbnVJdGVtO1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgY29ubmVjdGVkIE1lbnVJdGVtQ29ubmVjdGlvbkVkZ2UgKi9cbmV4cG9ydCB0eXBlIE1lbnVJdGVtQ29ubmVjdGlvblBhZ2VJbmZvID0ge1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIE5vZGVzIHRoYXQgY2FuIGJlIGxpbmtlZCB0byBhcyBNZW51IEl0ZW1zICovXG5leHBvcnQgdHlwZSBNZW51SXRlbUxpbmthYmxlID0ge1xuICAvKiogVGhlIHVuaXF1ZSBpZGVudGlmaWVyIHN0b3JlZCBpbiB0aGUgZGF0YWJhc2UgKi9cbiAgZGF0YWJhc2VJZDogU2NhbGFyc1snSW50J11bJ291dHB1dCddO1xuICAvKiogVGhlIHVuaXF1ZSByZXNvdXJjZSBpZGVudGlmaWVyIHBhdGggKi9cbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddO1xuICAvKiogV2hldGhlciB0aGUgbm9kZSBpcyBhIENvbnRlbnQgTm9kZSAqL1xuICBpc0NvbnRlbnROb2RlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hldGhlciB0aGUgbm9kZSBpcyBhIFRlcm0gKi9cbiAgaXNUZXJtTm9kZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFRoZSB1bmlxdWUgcmVzb3VyY2UgaWRlbnRpZmllciBwYXRoICovXG4gIHVyaT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogRWRnZSBiZXR3ZWVuIGEgTm9kZSBhbmQgYSBjb25uZWN0ZWQgTWVudUl0ZW1MaW5rYWJsZSAqL1xuZXhwb3J0IHR5cGUgTWVudUl0ZW1MaW5rYWJsZUNvbm5lY3Rpb25FZGdlID0ge1xuICAvKiogT3BhcXVlIHJlZmVyZW5jZSB0byB0aGUgbm9kZXMgcG9zaXRpb24gaW4gdGhlIGNvbm5lY3Rpb24uIFZhbHVlIGNhbiBiZSB1c2VkIHdpdGggcGFnaW5hdGlvbiBhcmdzLiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGNvbm5lY3RlZCBNZW51SXRlbUxpbmthYmxlIE5vZGUgKi9cbiAgbm9kZTogTWVudUl0ZW1MaW5rYWJsZTtcbn07XG5cbi8qKiBUaGUgVHlwZSBvZiBJZGVudGlmaWVyIHVzZWQgdG8gZmV0Y2ggYSBzaW5nbGUgbm9kZS4gRGVmYXVsdCBpcyBcIklEXCIuIFRvIGJlIHVzZWQgYWxvbmcgd2l0aCB0aGUgXCJpZFwiIGZpZWxkLiAqL1xuZXhwb3J0IGVudW0gTWVudUl0ZW1Ob2RlSWRUeXBlRW51bSB7XG4gIC8qKiBJZGVudGlmeSBhIHJlc291cmNlIGJ5IHRoZSBEYXRhYmFzZSBJRC4gKi9cbiAgRGF0YWJhc2VJZCA9ICdEQVRBQkFTRV9JRCcsXG4gIC8qKiBJZGVudGlmeSBhIHJlc291cmNlIGJ5IHRoZSAoaGFzaGVkKSBHbG9iYWwgSUQuICovXG4gIElkID0gJ0lEJ1xufVxuXG4vKiogRGVwcmVjYXRlZCBpbiBmYXZvciBvZiBNZW51SXRlbUxpbmtlYWJsZSBJbnRlcmZhY2UgKi9cbmV4cG9ydCB0eXBlIE1lbnVJdGVtT2JqZWN0VW5pb24gPSBDYXRlZ29yeSB8IFBhZ2UgfCBQb3N0IHwgUG9zdEZvcm1hdCB8IFRhZztcblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgTWVudUl0ZW0gdHlwZSBhbmQgdGhlIE1lbnUgdHlwZSAqL1xuZXhwb3J0IHR5cGUgTWVudUl0ZW1Ub01lbnVDb25uZWN0aW9uRWRnZSA9IEVkZ2UgJiBNZW51Q29ubmVjdGlvbkVkZ2UgJiBPbmVUb09uZUNvbm5lY3Rpb24gJiB7XG4gIF9fdHlwZW5hbWU/OiAnTWVudUl0ZW1Ub01lbnVDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBPcGFxdWUgcmVmZXJlbmNlIHRvIHRoZSBub2RlcyBwb3NpdGlvbiBpbiB0aGUgY29ubmVjdGlvbi4gVmFsdWUgY2FuIGJlIHVzZWQgd2l0aCBwYWdpbmF0aW9uIGFyZ3MuICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgbm9kZSBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZTogTWVudTtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIE1lbnVJdGVtIHR5cGUgYW5kIHRoZSBNZW51SXRlbSB0eXBlICovXG5leHBvcnQgdHlwZSBNZW51SXRlbVRvTWVudUl0ZW1Db25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIE1lbnVJdGVtQ29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdNZW51SXRlbVRvTWVudUl0ZW1Db25uZWN0aW9uJztcbiAgLyoqIEVkZ2VzIGZvciB0aGUgTWVudUl0ZW1Ub01lbnVJdGVtQ29ubmVjdGlvbiBjb25uZWN0aW9uICovXG4gIGVkZ2VzOiBBcnJheTxNZW51SXRlbVRvTWVudUl0ZW1Db25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxNZW51SXRlbT47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IE1lbnVJdGVtVG9NZW51SXRlbUNvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBBbiBlZGdlIGluIGEgY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgTWVudUl0ZW1Ub01lbnVJdGVtQ29ubmVjdGlvbkVkZ2UgPSBFZGdlICYgTWVudUl0ZW1Db25uZWN0aW9uRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdNZW51SXRlbVRvTWVudUl0ZW1Db25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogTWVudUl0ZW07XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtNZW51SXRlbVRvTWVudUl0ZW1Db25uZWN0aW9uJnF1b3Q7ICovXG5leHBvcnQgdHlwZSBNZW51SXRlbVRvTWVudUl0ZW1Db25uZWN0aW9uUGFnZUluZm8gPSBNZW51SXRlbUNvbm5lY3Rpb25QYWdlSW5mbyAmIFBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdNZW51SXRlbVRvTWVudUl0ZW1Db25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIEFyZ3VtZW50cyBmb3IgZmlsdGVyaW5nIHRoZSBNZW51SXRlbVRvTWVudUl0ZW1Db25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIE1lbnVJdGVtVG9NZW51SXRlbUNvbm5lY3Rpb25XaGVyZUFyZ3MgPSB7XG4gIC8qKiBUaGUgZGF0YWJhc2UgSUQgb2YgdGhlIG9iamVjdCAqL1xuICBpZD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogVGhlIG1lbnUgbG9jYXRpb24gZm9yIHRoZSBtZW51IGJlaW5nIHF1ZXJpZWQgKi9cbiAgbG9jYXRpb24/OiBJbnB1dE1heWJlPE1lbnVMb2NhdGlvbkVudW0+O1xuICAvKiogVGhlIGRhdGFiYXNlIElEIG9mIHRoZSBwYXJlbnQgbWVudSBvYmplY3QgKi9cbiAgcGFyZW50RGF0YWJhc2VJZD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogVGhlIElEIG9mIHRoZSBwYXJlbnQgbWVudSBvYmplY3QgKi9cbiAgcGFyZW50SWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgTWVudUl0ZW0gdHlwZSBhbmQgdGhlIE1lbnVJdGVtTGlua2FibGUgdHlwZSAqL1xuZXhwb3J0IHR5cGUgTWVudUl0ZW1Ub01lbnVJdGVtTGlua2FibGVDb25uZWN0aW9uRWRnZSA9IEVkZ2UgJiBNZW51SXRlbUxpbmthYmxlQ29ubmVjdGlvbkVkZ2UgJiBPbmVUb09uZUNvbm5lY3Rpb24gJiB7XG4gIF9fdHlwZW5hbWU/OiAnTWVudUl0ZW1Ub01lbnVJdGVtTGlua2FibGVDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBPcGFxdWUgcmVmZXJlbmNlIHRvIHRoZSBub2RlcyBwb3NpdGlvbiBpbiB0aGUgY29ubmVjdGlvbi4gVmFsdWUgY2FuIGJlIHVzZWQgd2l0aCBwYWdpbmF0aW9uIGFyZ3MuICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgbm9kZSBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZTogTWVudUl0ZW1MaW5rYWJsZTtcbn07XG5cbi8qKiBSZWdpc3RlcmVkIG1lbnUgbG9jYXRpb25zICovXG5leHBvcnQgZW51bSBNZW51TG9jYXRpb25FbnVtIHtcbiAgLyoqIFB1dCB0aGUgbWVudSBpbiB0aGUgZm9vdGVyX25hdmkgbG9jYXRpb24gKi9cbiAgRm9vdGVyTmF2aSA9ICdGT09URVJfTkFWSScsXG4gIC8qKiBQdXQgdGhlIG1lbnUgaW4gdGhlIGxhbmdfbmF2aSBsb2NhdGlvbiAqL1xuICBMYW5nTmF2aSA9ICdMQU5HX05BVkknLFxuICAvKiogUHV0IHRoZSBtZW51IGluIHRoZSBwcmltYXJ5X25hdmkgbG9jYXRpb24gKi9cbiAgUHJpbWFyeU5hdmkgPSAnUFJJTUFSWV9OQVZJJ1xufVxuXG4vKiogVGhlIFR5cGUgb2YgSWRlbnRpZmllciB1c2VkIHRvIGZldGNoIGEgc2luZ2xlIG5vZGUuIERlZmF1bHQgaXMgXCJJRFwiLiBUbyBiZSB1c2VkIGFsb25nIHdpdGggdGhlIFwiaWRcIiBmaWVsZC4gKi9cbmV4cG9ydCBlbnVtIE1lbnVOb2RlSWRUeXBlRW51bSB7XG4gIC8qKiBJZGVudGlmeSBhIG1lbnUgbm9kZSBieSB0aGUgRGF0YWJhc2UgSUQuICovXG4gIERhdGFiYXNlSWQgPSAnREFUQUJBU0VfSUQnLFxuICAvKiogSWRlbnRpZnkgYSBtZW51IG5vZGUgYnkgdGhlIChoYXNoZWQpIEdsb2JhbCBJRC4gKi9cbiAgSWQgPSAnSUQnLFxuICAvKiogSWRlbnRpZnkgYSBtZW51IG5vZGUgYnkgdGhlIHNsdWcgb2YgbWVudSBsb2NhdGlvbiB0byB3aGljaCBpdCBpcyBhc3NpZ25lZCAqL1xuICBMb2NhdGlvbiA9ICdMT0NBVElPTicsXG4gIC8qKiBJZGVudGlmeSBhIG1lbnUgbm9kZSBieSBpdHMgbmFtZSAqL1xuICBOYW1lID0gJ05BTUUnLFxuICAvKiogSWRlbnRpZnkgYSBtZW51IG5vZGUgYnkgaXRzIHNsdWcgKi9cbiAgU2x1ZyA9ICdTTFVHJ1xufVxuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBNZW51IHR5cGUgYW5kIHRoZSBNZW51SXRlbSB0eXBlICovXG5leHBvcnQgdHlwZSBNZW51VG9NZW51SXRlbUNvbm5lY3Rpb24gPSBDb25uZWN0aW9uICYgTWVudUl0ZW1Db25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ01lbnVUb01lbnVJdGVtQ29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIE1lbnVUb01lbnVJdGVtQ29ubmVjdGlvbiBjb25uZWN0aW9uICovXG4gIGVkZ2VzOiBBcnJheTxNZW51VG9NZW51SXRlbUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBub2RlcyBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZXM6IEFycmF5PE1lbnVJdGVtPjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogTWVudVRvTWVudUl0ZW1Db25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIE1lbnVUb01lbnVJdGVtQ29ubmVjdGlvbkVkZ2UgPSBFZGdlICYgTWVudUl0ZW1Db25uZWN0aW9uRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdNZW51VG9NZW51SXRlbUNvbm5lY3Rpb25FZGdlJztcbiAgLyoqIEEgY3Vyc29yIGZvciB1c2UgaW4gcGFnaW5hdGlvbiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGl0ZW0gYXQgdGhlIGVuZCBvZiB0aGUgZWRnZSAqL1xuICBub2RlOiBNZW51SXRlbTtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlICZxdW90O01lbnVUb01lbnVJdGVtQ29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgTWVudVRvTWVudUl0ZW1Db25uZWN0aW9uUGFnZUluZm8gPSBNZW51SXRlbUNvbm5lY3Rpb25QYWdlSW5mbyAmIFBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdNZW51VG9NZW51SXRlbUNvbm5lY3Rpb25QYWdlSW5mbyc7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogQXJndW1lbnRzIGZvciBmaWx0ZXJpbmcgdGhlIE1lbnVUb01lbnVJdGVtQ29ubmVjdGlvbiBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBNZW51VG9NZW51SXRlbUNvbm5lY3Rpb25XaGVyZUFyZ3MgPSB7XG4gIC8qKiBUaGUgZGF0YWJhc2UgSUQgb2YgdGhlIG9iamVjdCAqL1xuICBpZD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogVGhlIG1lbnUgbG9jYXRpb24gZm9yIHRoZSBtZW51IGJlaW5nIHF1ZXJpZWQgKi9cbiAgbG9jYXRpb24/OiBJbnB1dE1heWJlPE1lbnVMb2NhdGlvbkVudW0+O1xuICAvKiogVGhlIGRhdGFiYXNlIElEIG9mIHRoZSBwYXJlbnQgbWVudSBvYmplY3QgKi9cbiAgcGFyZW50RGF0YWJhc2VJZD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogVGhlIElEIG9mIHRoZSBwYXJlbnQgbWVudSBvYmplY3QgKi9cbiAgcGFyZW50SWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIFRoZSBNaW1lVHlwZSBvZiB0aGUgb2JqZWN0ICovXG5leHBvcnQgZW51bSBNaW1lVHlwZUVudW0ge1xuICAvKiogYXBwbGljYXRpb24vamF2YSBtaW1lIHR5cGUuICovXG4gIEFwcGxpY2F0aW9uSmF2YSA9ICdBUFBMSUNBVElPTl9KQVZBJyxcbiAgLyoqIGFwcGxpY2F0aW9uL21zd29yZCBtaW1lIHR5cGUuICovXG4gIEFwcGxpY2F0aW9uTXN3b3JkID0gJ0FQUExJQ0FUSU9OX01TV09SRCcsXG4gIC8qKiBhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0gbWltZSB0eXBlLiAqL1xuICBBcHBsaWNhdGlvbk9jdGV0U3RyZWFtID0gJ0FQUExJQ0FUSU9OX09DVEVUX1NUUkVBTScsXG4gIC8qKiBhcHBsaWNhdGlvbi9vbmVub3RlIG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25PbmVub3RlID0gJ0FQUExJQ0FUSU9OX09ORU5PVEUnLFxuICAvKiogYXBwbGljYXRpb24vb3hwcyBtaW1lIHR5cGUuICovXG4gIEFwcGxpY2F0aW9uT3hwcyA9ICdBUFBMSUNBVElPTl9PWFBTJyxcbiAgLyoqIGFwcGxpY2F0aW9uL3BkZiBtaW1lIHR5cGUuICovXG4gIEFwcGxpY2F0aW9uUGRmID0gJ0FQUExJQ0FUSU9OX1BERicsXG4gIC8qKiBhcHBsaWNhdGlvbi9yYXIgbWltZSB0eXBlLiAqL1xuICBBcHBsaWNhdGlvblJhciA9ICdBUFBMSUNBVElPTl9SQVInLFxuICAvKiogYXBwbGljYXRpb24vcnRmIG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25SdGYgPSAnQVBQTElDQVRJT05fUlRGJyxcbiAgLyoqIGFwcGxpY2F0aW9uL3R0YWYreG1sIG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25UdGFmWG1sID0gJ0FQUExJQ0FUSU9OX1RUQUZfWE1MJyxcbiAgLyoqIGFwcGxpY2F0aW9uL3ZuZC5hcHBsZS5rZXlub3RlIG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25WbmRBcHBsZUtleW5vdGUgPSAnQVBQTElDQVRJT05fVk5EX0FQUExFX0tFWU5PVEUnLFxuICAvKiogYXBwbGljYXRpb24vdm5kLmFwcGxlLm51bWJlcnMgbWltZSB0eXBlLiAqL1xuICBBcHBsaWNhdGlvblZuZEFwcGxlTnVtYmVycyA9ICdBUFBMSUNBVElPTl9WTkRfQVBQTEVfTlVNQkVSUycsXG4gIC8qKiBhcHBsaWNhdGlvbi92bmQuYXBwbGUucGFnZXMgbWltZSB0eXBlLiAqL1xuICBBcHBsaWNhdGlvblZuZEFwcGxlUGFnZXMgPSAnQVBQTElDQVRJT05fVk5EX0FQUExFX1BBR0VTJyxcbiAgLyoqIGFwcGxpY2F0aW9uL3ZuZC5tcy1hY2Nlc3MgbWltZSB0eXBlLiAqL1xuICBBcHBsaWNhdGlvblZuZE1zQWNjZXNzID0gJ0FQUExJQ0FUSU9OX1ZORF9NU19BQ0NFU1MnLFxuICAvKiogYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsIG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25WbmRNc0V4Y2VsID0gJ0FQUExJQ0FUSU9OX1ZORF9NU19FWENFTCcsXG4gIC8qKiBhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuYWRkaW4ubWFjcm9FbmFibGVkLjEyIG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25WbmRNc0V4Y2VsQWRkaW5NYWNyb2VuYWJsZWRfMTIgPSAnQVBQTElDQVRJT05fVk5EX01TX0VYQ0VMX0FERElOX01BQ1JPRU5BQkxFRF8xMicsXG4gIC8qKiBhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuc2hlZXQuYmluYXJ5Lm1hY3JvRW5hYmxlZC4xMiBtaW1lIHR5cGUuICovXG4gIEFwcGxpY2F0aW9uVm5kTXNFeGNlbFNoZWV0QmluYXJ5TWFjcm9lbmFibGVkXzEyID0gJ0FQUExJQ0FUSU9OX1ZORF9NU19FWENFTF9TSEVFVF9CSU5BUllfTUFDUk9FTkFCTEVEXzEyJyxcbiAgLyoqIGFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5zaGVldC5tYWNyb0VuYWJsZWQuMTIgbWltZSB0eXBlLiAqL1xuICBBcHBsaWNhdGlvblZuZE1zRXhjZWxTaGVldE1hY3JvZW5hYmxlZF8xMiA9ICdBUFBMSUNBVElPTl9WTkRfTVNfRVhDRUxfU0hFRVRfTUFDUk9FTkFCTEVEXzEyJyxcbiAgLyoqIGFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC50ZW1wbGF0ZS5tYWNyb0VuYWJsZWQuMTIgbWltZSB0eXBlLiAqL1xuICBBcHBsaWNhdGlvblZuZE1zRXhjZWxUZW1wbGF0ZU1hY3JvZW5hYmxlZF8xMiA9ICdBUFBMSUNBVElPTl9WTkRfTVNfRVhDRUxfVEVNUExBVEVfTUFDUk9FTkFCTEVEXzEyJyxcbiAgLyoqIGFwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50IG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25WbmRNc1Bvd2VycG9pbnQgPSAnQVBQTElDQVRJT05fVk5EX01TX1BPV0VSUE9JTlQnLFxuICAvKiogYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQuYWRkaW4ubWFjcm9FbmFibGVkLjEyIG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25WbmRNc1Bvd2VycG9pbnRBZGRpbk1hY3JvZW5hYmxlZF8xMiA9ICdBUFBMSUNBVElPTl9WTkRfTVNfUE9XRVJQT0lOVF9BRERJTl9NQUNST0VOQUJMRURfMTInLFxuICAvKiogYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQucHJlc2VudGF0aW9uLm1hY3JvRW5hYmxlZC4xMiBtaW1lIHR5cGUuICovXG4gIEFwcGxpY2F0aW9uVm5kTXNQb3dlcnBvaW50UHJlc2VudGF0aW9uTWFjcm9lbmFibGVkXzEyID0gJ0FQUExJQ0FUSU9OX1ZORF9NU19QT1dFUlBPSU5UX1BSRVNFTlRBVElPTl9NQUNST0VOQUJMRURfMTInLFxuICAvKiogYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQuc2xpZGVzaG93Lm1hY3JvRW5hYmxlZC4xMiBtaW1lIHR5cGUuICovXG4gIEFwcGxpY2F0aW9uVm5kTXNQb3dlcnBvaW50U2xpZGVzaG93TWFjcm9lbmFibGVkXzEyID0gJ0FQUExJQ0FUSU9OX1ZORF9NU19QT1dFUlBPSU5UX1NMSURFU0hPV19NQUNST0VOQUJMRURfMTInLFxuICAvKiogYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQuc2xpZGUubWFjcm9FbmFibGVkLjEyIG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25WbmRNc1Bvd2VycG9pbnRTbGlkZU1hY3JvZW5hYmxlZF8xMiA9ICdBUFBMSUNBVElPTl9WTkRfTVNfUE9XRVJQT0lOVF9TTElERV9NQUNST0VOQUJMRURfMTInLFxuICAvKiogYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQudGVtcGxhdGUubWFjcm9FbmFibGVkLjEyIG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25WbmRNc1Bvd2VycG9pbnRUZW1wbGF0ZU1hY3JvZW5hYmxlZF8xMiA9ICdBUFBMSUNBVElPTl9WTkRfTVNfUE9XRVJQT0lOVF9URU1QTEFURV9NQUNST0VOQUJMRURfMTInLFxuICAvKiogYXBwbGljYXRpb24vdm5kLm1zLXByb2plY3QgbWltZSB0eXBlLiAqL1xuICBBcHBsaWNhdGlvblZuZE1zUHJvamVjdCA9ICdBUFBMSUNBVElPTl9WTkRfTVNfUFJPSkVDVCcsXG4gIC8qKiBhcHBsaWNhdGlvbi92bmQubXMtd29yZC5kb2N1bWVudC5tYWNyb0VuYWJsZWQuMTIgbWltZSB0eXBlLiAqL1xuICBBcHBsaWNhdGlvblZuZE1zV29yZERvY3VtZW50TWFjcm9lbmFibGVkXzEyID0gJ0FQUExJQ0FUSU9OX1ZORF9NU19XT1JEX0RPQ1VNRU5UX01BQ1JPRU5BQkxFRF8xMicsXG4gIC8qKiBhcHBsaWNhdGlvbi92bmQubXMtd29yZC50ZW1wbGF0ZS5tYWNyb0VuYWJsZWQuMTIgbWltZSB0eXBlLiAqL1xuICBBcHBsaWNhdGlvblZuZE1zV29yZFRlbXBsYXRlTWFjcm9lbmFibGVkXzEyID0gJ0FQUExJQ0FUSU9OX1ZORF9NU19XT1JEX1RFTVBMQVRFX01BQ1JPRU5BQkxFRF8xMicsXG4gIC8qKiBhcHBsaWNhdGlvbi92bmQubXMtd3JpdGUgbWltZSB0eXBlLiAqL1xuICBBcHBsaWNhdGlvblZuZE1zV3JpdGUgPSAnQVBQTElDQVRJT05fVk5EX01TX1dSSVRFJyxcbiAgLyoqIGFwcGxpY2F0aW9uL3ZuZC5tcy14cHNkb2N1bWVudCBtaW1lIHR5cGUuICovXG4gIEFwcGxpY2F0aW9uVm5kTXNYcHNkb2N1bWVudCA9ICdBUFBMSUNBVElPTl9WTkRfTVNfWFBTRE9DVU1FTlQnLFxuICAvKiogYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5jaGFydCBtaW1lIHR5cGUuICovXG4gIEFwcGxpY2F0aW9uVm5kT2FzaXNPcGVuZG9jdW1lbnRDaGFydCA9ICdBUFBMSUNBVElPTl9WTkRfT0FTSVNfT1BFTkRPQ1VNRU5UX0NIQVJUJyxcbiAgLyoqIGFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZGF0YWJhc2UgbWltZSB0eXBlLiAqL1xuICBBcHBsaWNhdGlvblZuZE9hc2lzT3BlbmRvY3VtZW50RGF0YWJhc2UgPSAnQVBQTElDQVRJT05fVk5EX09BU0lTX09QRU5ET0NVTUVOVF9EQVRBQkFTRScsXG4gIC8qKiBhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmZvcm11bGEgbWltZSB0eXBlLiAqL1xuICBBcHBsaWNhdGlvblZuZE9hc2lzT3BlbmRvY3VtZW50Rm9ybXVsYSA9ICdBUFBMSUNBVElPTl9WTkRfT0FTSVNfT1BFTkRPQ1VNRU5UX0ZPUk1VTEEnLFxuICAvKiogYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5ncmFwaGljcyBtaW1lIHR5cGUuICovXG4gIEFwcGxpY2F0aW9uVm5kT2FzaXNPcGVuZG9jdW1lbnRHcmFwaGljcyA9ICdBUFBMSUNBVElPTl9WTkRfT0FTSVNfT1BFTkRPQ1VNRU5UX0dSQVBISUNTJyxcbiAgLyoqIGFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQucHJlc2VudGF0aW9uIG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25WbmRPYXNpc09wZW5kb2N1bWVudFByZXNlbnRhdGlvbiA9ICdBUFBMSUNBVElPTl9WTkRfT0FTSVNfT1BFTkRPQ1VNRU5UX1BSRVNFTlRBVElPTicsXG4gIC8qKiBhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnNwcmVhZHNoZWV0IG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25WbmRPYXNpc09wZW5kb2N1bWVudFNwcmVhZHNoZWV0ID0gJ0FQUExJQ0FUSU9OX1ZORF9PQVNJU19PUEVORE9DVU1FTlRfU1BSRUFEU0hFRVQnLFxuICAvKiogYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC50ZXh0IG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25WbmRPYXNpc09wZW5kb2N1bWVudFRleHQgPSAnQVBQTElDQVRJT05fVk5EX09BU0lTX09QRU5ET0NVTUVOVF9URVhUJyxcbiAgLyoqIGFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5wcmVzZW50YXRpb24gbWltZSB0eXBlLiAqL1xuICBBcHBsaWNhdGlvblZuZE9wZW54bWxmb3JtYXRzT2ZmaWNlZG9jdW1lbnRQcmVzZW50YXRpb25tbFByZXNlbnRhdGlvbiA9ICdBUFBMSUNBVElPTl9WTkRfT1BFTlhNTEZPUk1BVFNfT0ZGSUNFRE9DVU1FTlRfUFJFU0VOVEFUSU9OTUxfUFJFU0VOVEFUSU9OJyxcbiAgLyoqIGFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5zbGlkZSBtaW1lIHR5cGUuICovXG4gIEFwcGxpY2F0aW9uVm5kT3BlbnhtbGZvcm1hdHNPZmZpY2Vkb2N1bWVudFByZXNlbnRhdGlvbm1sU2xpZGUgPSAnQVBQTElDQVRJT05fVk5EX09QRU5YTUxGT1JNQVRTX09GRklDRURPQ1VNRU5UX1BSRVNFTlRBVElPTk1MX1NMSURFJyxcbiAgLyoqIGFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5zbGlkZXNob3cgbWltZSB0eXBlLiAqL1xuICBBcHBsaWNhdGlvblZuZE9wZW54bWxmb3JtYXRzT2ZmaWNlZG9jdW1lbnRQcmVzZW50YXRpb25tbFNsaWRlc2hvdyA9ICdBUFBMSUNBVElPTl9WTkRfT1BFTlhNTEZPUk1BVFNfT0ZGSUNFRE9DVU1FTlRfUFJFU0VOVEFUSU9OTUxfU0xJREVTSE9XJyxcbiAgLyoqIGFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC50ZW1wbGF0ZSBtaW1lIHR5cGUuICovXG4gIEFwcGxpY2F0aW9uVm5kT3BlbnhtbGZvcm1hdHNPZmZpY2Vkb2N1bWVudFByZXNlbnRhdGlvbm1sVGVtcGxhdGUgPSAnQVBQTElDQVRJT05fVk5EX09QRU5YTUxGT1JNQVRTX09GRklDRURPQ1VNRU5UX1BSRVNFTlRBVElPTk1MX1RFTVBMQVRFJyxcbiAgLyoqIGFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0IG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25WbmRPcGVueG1sZm9ybWF0c09mZmljZWRvY3VtZW50U3ByZWFkc2hlZXRtbFNoZWV0ID0gJ0FQUExJQ0FUSU9OX1ZORF9PUEVOWE1MRk9STUFUU19PRkZJQ0VET0NVTUVOVF9TUFJFQURTSEVFVE1MX1NIRUVUJyxcbiAgLyoqIGFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnRlbXBsYXRlIG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25WbmRPcGVueG1sZm9ybWF0c09mZmljZWRvY3VtZW50U3ByZWFkc2hlZXRtbFRlbXBsYXRlID0gJ0FQUExJQ0FUSU9OX1ZORF9PUEVOWE1MRk9STUFUU19PRkZJQ0VET0NVTUVOVF9TUFJFQURTSEVFVE1MX1RFTVBMQVRFJyxcbiAgLyoqIGFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmRvY3VtZW50IG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25WbmRPcGVueG1sZm9ybWF0c09mZmljZWRvY3VtZW50V29yZHByb2Nlc3NpbmdtbERvY3VtZW50ID0gJ0FQUExJQ0FUSU9OX1ZORF9PUEVOWE1MRk9STUFUU19PRkZJQ0VET0NVTUVOVF9XT1JEUFJPQ0VTU0lOR01MX0RPQ1VNRU5UJyxcbiAgLyoqIGFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLnRlbXBsYXRlIG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25WbmRPcGVueG1sZm9ybWF0c09mZmljZWRvY3VtZW50V29yZHByb2Nlc3NpbmdtbFRlbXBsYXRlID0gJ0FQUExJQ0FUSU9OX1ZORF9PUEVOWE1MRk9STUFUU19PRkZJQ0VET0NVTUVOVF9XT1JEUFJPQ0VTU0lOR01MX1RFTVBMQVRFJyxcbiAgLyoqIGFwcGxpY2F0aW9uL3dvcmRwZXJmZWN0IG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25Xb3JkcGVyZmVjdCA9ICdBUFBMSUNBVElPTl9XT1JEUEVSRkVDVCcsXG4gIC8qKiBhcHBsaWNhdGlvbi94LTd6LWNvbXByZXNzZWQgbWltZSB0eXBlLiAqL1xuICBBcHBsaWNhdGlvblhfN1pDb21wcmVzc2VkID0gJ0FQUExJQ0FUSU9OX1hfN1pfQ09NUFJFU1NFRCcsXG4gIC8qKiBhcHBsaWNhdGlvbi94LWZvbnQtdHRmIG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25YRm9udFR0ZiA9ICdBUFBMSUNBVElPTl9YX0ZPTlRfVFRGJyxcbiAgLyoqIGFwcGxpY2F0aW9uL3gtZm9udC13b2ZmIG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25YRm9udFdvZmYgPSAnQVBQTElDQVRJT05fWF9GT05UX1dPRkYnLFxuICAvKiogYXBwbGljYXRpb24veC1mb250LXdvZmYyIG1pbWUgdHlwZS4gKi9cbiAgQXBwbGljYXRpb25YRm9udFdvZmYyID0gJ0FQUExJQ0FUSU9OX1hfRk9OVF9XT0ZGMicsXG4gIC8qKiBhcHBsaWNhdGlvbi94LWd6aXAgbWltZSB0eXBlLiAqL1xuICBBcHBsaWNhdGlvblhHemlwID0gJ0FQUExJQ0FUSU9OX1hfR1pJUCcsXG4gIC8qKiBhcHBsaWNhdGlvbi94LXRhciBtaW1lIHR5cGUuICovXG4gIEFwcGxpY2F0aW9uWFRhciA9ICdBUFBMSUNBVElPTl9YX1RBUicsXG4gIC8qKiBhcHBsaWNhdGlvbi96aXAgbWltZSB0eXBlLiAqL1xuICBBcHBsaWNhdGlvblppcCA9ICdBUFBMSUNBVElPTl9aSVAnLFxuICAvKiogYXVkaW8vYWFjIG1pbWUgdHlwZS4gKi9cbiAgQXVkaW9BYWMgPSAnQVVESU9fQUFDJyxcbiAgLyoqIGF1ZGlvL2ZsYWMgbWltZSB0eXBlLiAqL1xuICBBdWRpb0ZsYWMgPSAnQVVESU9fRkxBQycsXG4gIC8qKiBhdWRpby9taWRpIG1pbWUgdHlwZS4gKi9cbiAgQXVkaW9NaWRpID0gJ0FVRElPX01JREknLFxuICAvKiogYXVkaW8vbXBlZyBtaW1lIHR5cGUuICovXG4gIEF1ZGlvTXBlZyA9ICdBVURJT19NUEVHJyxcbiAgLyoqIGF1ZGlvL29nZyBtaW1lIHR5cGUuICovXG4gIEF1ZGlvT2dnID0gJ0FVRElPX09HRycsXG4gIC8qKiBhdWRpby93YXYgbWltZSB0eXBlLiAqL1xuICBBdWRpb1dhdiA9ICdBVURJT19XQVYnLFxuICAvKiogYXVkaW8veC1tYXRyb3NrYSBtaW1lIHR5cGUuICovXG4gIEF1ZGlvWE1hdHJvc2thID0gJ0FVRElPX1hfTUFUUk9TS0EnLFxuICAvKiogYXVkaW8veC1tcy13YXggbWltZSB0eXBlLiAqL1xuICBBdWRpb1hNc1dheCA9ICdBVURJT19YX01TX1dBWCcsXG4gIC8qKiBhdWRpby94LW1zLXdtYSBtaW1lIHR5cGUuICovXG4gIEF1ZGlvWE1zV21hID0gJ0FVRElPX1hfTVNfV01BJyxcbiAgLyoqIGF1ZGlvL3gtcmVhbGF1ZGlvIG1pbWUgdHlwZS4gKi9cbiAgQXVkaW9YUmVhbGF1ZGlvID0gJ0FVRElPX1hfUkVBTEFVRElPJyxcbiAgLyoqIGZvbnQvb3RmIG1pbWUgdHlwZS4gKi9cbiAgRm9udE90ZiA9ICdGT05UX09URicsXG4gIC8qKiBpbWFnZS9ibXAgbWltZSB0eXBlLiAqL1xuICBJbWFnZUJtcCA9ICdJTUFHRV9CTVAnLFxuICAvKiogaW1hZ2UvZ2lmIG1pbWUgdHlwZS4gKi9cbiAgSW1hZ2VHaWYgPSAnSU1BR0VfR0lGJyxcbiAgLyoqIGltYWdlL2hlaWMgbWltZSB0eXBlLiAqL1xuICBJbWFnZUhlaWMgPSAnSU1BR0VfSEVJQycsXG4gIC8qKiBpbWFnZS9qcGVnIG1pbWUgdHlwZS4gKi9cbiAgSW1hZ2VKcGVnID0gJ0lNQUdFX0pQRUcnLFxuICAvKiogaW1hZ2UvcG5nIG1pbWUgdHlwZS4gKi9cbiAgSW1hZ2VQbmcgPSAnSU1BR0VfUE5HJyxcbiAgLyoqIGltYWdlL3RpZmYgbWltZSB0eXBlLiAqL1xuICBJbWFnZVRpZmYgPSAnSU1BR0VfVElGRicsXG4gIC8qKiBpbWFnZS93ZWJwIG1pbWUgdHlwZS4gKi9cbiAgSW1hZ2VXZWJwID0gJ0lNQUdFX1dFQlAnLFxuICAvKiogaW1hZ2UveC1pY29uIG1pbWUgdHlwZS4gKi9cbiAgSW1hZ2VYSWNvbiA9ICdJTUFHRV9YX0lDT04nLFxuICAvKiogdGV4dC9jYWxlbmRhciBtaW1lIHR5cGUuICovXG4gIFRleHRDYWxlbmRhciA9ICdURVhUX0NBTEVOREFSJyxcbiAgLyoqIHRleHQvY3NzIG1pbWUgdHlwZS4gKi9cbiAgVGV4dENzcyA9ICdURVhUX0NTUycsXG4gIC8qKiB0ZXh0L2NzdiBtaW1lIHR5cGUuICovXG4gIFRleHRDc3YgPSAnVEVYVF9DU1YnLFxuICAvKiogdGV4dC9wbGFpbiBtaW1lIHR5cGUuICovXG4gIFRleHRQbGFpbiA9ICdURVhUX1BMQUlOJyxcbiAgLyoqIHRleHQvcmljaHRleHQgbWltZSB0eXBlLiAqL1xuICBUZXh0UmljaHRleHQgPSAnVEVYVF9SSUNIVEVYVCcsXG4gIC8qKiB0ZXh0L3RhYi1zZXBhcmF0ZWQtdmFsdWVzIG1pbWUgdHlwZS4gKi9cbiAgVGV4dFRhYlNlcGFyYXRlZFZhbHVlcyA9ICdURVhUX1RBQl9TRVBBUkFURURfVkFMVUVTJyxcbiAgLyoqIHRleHQvdnR0IG1pbWUgdHlwZS4gKi9cbiAgVGV4dFZ0dCA9ICdURVhUX1ZUVCcsXG4gIC8qKiB2aWRlby8zZ3BwIG1pbWUgdHlwZS4gKi9cbiAgVmlkZW9fM0dwcCA9ICdWSURFT18zR1BQJyxcbiAgLyoqIHZpZGVvLzNncHAyIG1pbWUgdHlwZS4gKi9cbiAgVmlkZW9fM0dwcDIgPSAnVklERU9fM0dQUDInLFxuICAvKiogdmlkZW8vYXZpIG1pbWUgdHlwZS4gKi9cbiAgVmlkZW9BdmkgPSAnVklERU9fQVZJJyxcbiAgLyoqIHZpZGVvL2RpdnggbWltZSB0eXBlLiAqL1xuICBWaWRlb0RpdnggPSAnVklERU9fRElWWCcsXG4gIC8qKiB2aWRlby9tcDQgbWltZSB0eXBlLiAqL1xuICBWaWRlb01wNCA9ICdWSURFT19NUDQnLFxuICAvKiogdmlkZW8vbXBlZyBtaW1lIHR5cGUuICovXG4gIFZpZGVvTXBlZyA9ICdWSURFT19NUEVHJyxcbiAgLyoqIHZpZGVvL29nZyBtaW1lIHR5cGUuICovXG4gIFZpZGVvT2dnID0gJ1ZJREVPX09HRycsXG4gIC8qKiB2aWRlby9xdWlja3RpbWUgbWltZSB0eXBlLiAqL1xuICBWaWRlb1F1aWNrdGltZSA9ICdWSURFT19RVUlDS1RJTUUnLFxuICAvKiogdmlkZW8vd2VibSBtaW1lIHR5cGUuICovXG4gIFZpZGVvV2VibSA9ICdWSURFT19XRUJNJyxcbiAgLyoqIHZpZGVvL3gtZmx2IG1pbWUgdHlwZS4gKi9cbiAgVmlkZW9YRmx2ID0gJ1ZJREVPX1hfRkxWJyxcbiAgLyoqIHZpZGVvL3gtbWF0cm9za2EgbWltZSB0eXBlLiAqL1xuICBWaWRlb1hNYXRyb3NrYSA9ICdWSURFT19YX01BVFJPU0tBJyxcbiAgLyoqIHZpZGVvL3gtbXMtYXNmIG1pbWUgdHlwZS4gKi9cbiAgVmlkZW9YTXNBc2YgPSAnVklERU9fWF9NU19BU0YnLFxuICAvKiogdmlkZW8veC1tcy13bSBtaW1lIHR5cGUuICovXG4gIFZpZGVvWE1zV20gPSAnVklERU9fWF9NU19XTScsXG4gIC8qKiB2aWRlby94LW1zLXdtdiBtaW1lIHR5cGUuICovXG4gIFZpZGVvWE1zV212ID0gJ1ZJREVPX1hfTVNfV01WJyxcbiAgLyoqIHZpZGVvL3gtbXMtd214IG1pbWUgdHlwZS4gKi9cbiAgVmlkZW9YTXNXbXggPSAnVklERU9fWF9NU19XTVgnXG59XG5cbi8qKiBBbiBvYmplY3Qgd2l0aCBhbiBJRCAqL1xuZXhwb3J0IHR5cGUgTm9kZSA9IHtcbiAgLyoqIFRoZSBnbG9iYWxseSB1bmlxdWUgSUQgZm9yIHRoZSBvYmplY3QgKi9cbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddO1xufTtcblxuLyoqIEEgbm9kZSB0aGF0IGNhbiBoYXZlIGFuIGF1dGhvciBhc3NpZ25lZCB0byBpdCAqL1xuZXhwb3J0IHR5cGUgTm9kZVdpdGhBdXRob3IgPSB7XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIE5vZGVXaXRoQXV0aG9yIHR5cGUgYW5kIHRoZSBVc2VyIHR5cGUgKi9cbiAgYXV0aG9yPzogTWF5YmU8Tm9kZVdpdGhBdXRob3JUb1VzZXJDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgZGF0YWJhc2UgaWRlbnRpZmllciBvZiB0aGUgYXV0aG9yIG9mIHRoZSBub2RlICovXG4gIGF1dGhvckRhdGFiYXNlSWQ/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBhdXRob3Igb2YgdGhlIG5vZGUgKi9cbiAgYXV0aG9ySWQ/OiBNYXliZTxTY2FsYXJzWydJRCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgZ2xvYmFsbHkgdW5pcXVlIElEIGZvciB0aGUgb2JqZWN0ICovXG4gIGlkOiBTY2FsYXJzWydJRCddWydvdXRwdXQnXTtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIE5vZGVXaXRoQXV0aG9yIHR5cGUgYW5kIHRoZSBVc2VyIHR5cGUgKi9cbmV4cG9ydCB0eXBlIE5vZGVXaXRoQXV0aG9yVG9Vc2VyQ29ubmVjdGlvbkVkZ2UgPSBFZGdlICYgT25lVG9PbmVDb25uZWN0aW9uICYgVXNlckNvbm5lY3Rpb25FZGdlICYge1xuICBfX3R5cGVuYW1lPzogJ05vZGVXaXRoQXV0aG9yVG9Vc2VyQ29ubmVjdGlvbkVkZ2UnO1xuICAvKiogT3BhcXVlIHJlZmVyZW5jZSB0byB0aGUgbm9kZXMgcG9zaXRpb24gaW4gdGhlIGNvbm5lY3Rpb24uIFZhbHVlIGNhbiBiZSB1c2VkIHdpdGggcGFnaW5hdGlvbiBhcmdzLiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIG5vZGUgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGU6IFVzZXI7XG59O1xuXG4vKiogQSBub2RlIHRoYXQgY2FuIGhhdmUgY29tbWVudHMgYXNzb2NpYXRlZCB3aXRoIGl0ICovXG5leHBvcnQgdHlwZSBOb2RlV2l0aENvbW1lbnRzID0ge1xuICAvKiogVGhlIG51bWJlciBvZiBjb21tZW50cy4gRXZlbiB0aG91Z2ggV1BHcmFwaFFMIGRlbm90ZXMgdGhpcyBmaWVsZCBhcyBhbiBpbnRlZ2VyLCBpbiBXb3JkUHJlc3MgdGhpcyBmaWVsZCBzaG91bGQgYmUgc2F2ZWQgYXMgYSBudW1lcmljIHN0cmluZyBmb3IgY29tcGF0aWJpbGl0eS4gKi9cbiAgY29tbWVudENvdW50PzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdGhlIGNvbW1lbnRzIGFyZSBvcGVuIG9yIGNsb3NlZCBmb3IgdGhpcyBwYXJ0aWN1bGFyIHBvc3QuICovXG4gIGNvbW1lbnRTdGF0dXM/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGdsb2JhbGx5IHVuaXF1ZSBJRCBmb3IgdGhlIG9iamVjdCAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnb3V0cHV0J107XG59O1xuXG4vKiogQSBub2RlIHRoYXQgc3VwcG9ydHMgdGhlIGNvbnRlbnQgZWRpdG9yICovXG5leHBvcnQgdHlwZSBOb2RlV2l0aENvbnRlbnRFZGl0b3IgPSB7XG4gIC8qKiBUaGUgY29udGVudCBvZiB0aGUgcG9zdC4gKi9cbiAgY29udGVudD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgZ2xvYmFsbHkgdW5pcXVlIElEIGZvciB0aGUgb2JqZWN0ICovXG4gIGlkOiBTY2FsYXJzWydJRCddWydvdXRwdXQnXTtcbn07XG5cblxuLyoqIEEgbm9kZSB0aGF0IHN1cHBvcnRzIHRoZSBjb250ZW50IGVkaXRvciAqL1xuZXhwb3J0IHR5cGUgTm9kZVdpdGhDb250ZW50RWRpdG9yQ29udGVudEFyZ3MgPSB7XG4gIGZvcm1hdD86IElucHV0TWF5YmU8UG9zdE9iamVjdEZpZWxkRm9ybWF0RW51bT47XG59O1xuXG4vKiogQSBub2RlIHRoYXQgY2FuIGhhdmUgYW4gZXhjZXJwdCAqL1xuZXhwb3J0IHR5cGUgTm9kZVdpdGhFeGNlcnB0ID0ge1xuICAvKiogVGhlIGV4Y2VycHQgb2YgdGhlIHBvc3QuICovXG4gIGV4Y2VycHQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGdsb2JhbGx5IHVuaXF1ZSBJRCBmb3IgdGhlIG9iamVjdCAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnb3V0cHV0J107XG59O1xuXG5cbi8qKiBBIG5vZGUgdGhhdCBjYW4gaGF2ZSBhbiBleGNlcnB0ICovXG5leHBvcnQgdHlwZSBOb2RlV2l0aEV4Y2VycHRFeGNlcnB0QXJncyA9IHtcbiAgZm9ybWF0PzogSW5wdXRNYXliZTxQb3N0T2JqZWN0RmllbGRGb3JtYXRFbnVtPjtcbn07XG5cbi8qKiBBIG5vZGUgdGhhdCBjYW4gaGF2ZSBhIGZlYXR1cmVkIGltYWdlIHNldCAqL1xuZXhwb3J0IHR5cGUgTm9kZVdpdGhGZWF0dXJlZEltYWdlID0ge1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBOb2RlV2l0aEZlYXR1cmVkSW1hZ2UgdHlwZSBhbmQgdGhlIE1lZGlhSXRlbSB0eXBlICovXG4gIGZlYXR1cmVkSW1hZ2U/OiBNYXliZTxOb2RlV2l0aEZlYXR1cmVkSW1hZ2VUb01lZGlhSXRlbUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBkYXRhYmFzZSBpZGVudGlmaWVyIGZvciB0aGUgZmVhdHVyZWQgaW1hZ2Ugbm9kZSBhc3NpZ25lZCB0byB0aGUgY29udGVudCBub2RlICovXG4gIGZlYXR1cmVkSW1hZ2VEYXRhYmFzZUlkPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIEdsb2JhbGx5IHVuaXF1ZSBJRCBvZiB0aGUgZmVhdHVyZWQgaW1hZ2UgYXNzaWduZWQgdG8gdGhlIG5vZGUgKi9cbiAgZmVhdHVyZWRJbWFnZUlkPzogTWF5YmU8U2NhbGFyc1snSUQnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGdsb2JhbGx5IHVuaXF1ZSBJRCBmb3IgdGhlIG9iamVjdCAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnb3V0cHV0J107XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBOb2RlV2l0aEZlYXR1cmVkSW1hZ2UgdHlwZSBhbmQgdGhlIE1lZGlhSXRlbSB0eXBlICovXG5leHBvcnQgdHlwZSBOb2RlV2l0aEZlYXR1cmVkSW1hZ2VUb01lZGlhSXRlbUNvbm5lY3Rpb25FZGdlID0gRWRnZSAmIE1lZGlhSXRlbUNvbm5lY3Rpb25FZGdlICYgT25lVG9PbmVDb25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ05vZGVXaXRoRmVhdHVyZWRJbWFnZVRvTWVkaWFJdGVtQ29ubmVjdGlvbkVkZ2UnO1xuICAvKiogT3BhcXVlIHJlZmVyZW5jZSB0byB0aGUgbm9kZXMgcG9zaXRpb24gaW4gdGhlIGNvbm5lY3Rpb24uIFZhbHVlIGNhbiBiZSB1c2VkIHdpdGggcGFnaW5hdGlvbiBhcmdzLiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIG5vZGUgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGU6IE1lZGlhSXRlbTtcbn07XG5cbi8qKiBBIG5vZGUgdGhhdCBjYW4gaGF2ZSBwYWdlIGF0dHJpYnV0ZXMgKi9cbmV4cG9ydCB0eXBlIE5vZGVXaXRoUGFnZUF0dHJpYnV0ZXMgPSB7XG4gIC8qKiBUaGUgZ2xvYmFsbHkgdW5pcXVlIElEIGZvciB0aGUgb2JqZWN0ICovXG4gIGlkOiBTY2FsYXJzWydJRCddWydvdXRwdXQnXTtcbiAgLyoqIEEgZmllbGQgdXNlZCBmb3Igb3JkZXJpbmcgcG9zdHMuIFRoaXMgaXMgdHlwaWNhbGx5IHVzZWQgd2l0aCBuYXYgbWVudSBpdGVtcyBvciBmb3Igc3BlY2lhbCBvcmRlcmluZyBvZiBoaWVyYXJjaGljYWwgY29udGVudCB0eXBlcy4gKi9cbiAgbWVudU9yZGVyPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBBIG5vZGUgdGhhdCBjYW4gaGF2ZSByZXZpc2lvbnMgKi9cbmV4cG9ydCB0eXBlIE5vZGVXaXRoUmV2aXNpb25zID0ge1xuICAvKiogVGhlIGdsb2JhbGx5IHVuaXF1ZSBJRCBmb3IgdGhlIG9iamVjdCAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnb3V0cHV0J107XG4gIC8qKiBUcnVlIGlmIHRoZSBub2RlIGlzIGEgcmV2aXNpb24gb2YgYW5vdGhlciBub2RlICovXG4gIGlzUmV2aXNpb24/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIElmIHRoZSBjdXJyZW50IG5vZGUgaXMgYSByZXZpc2lvbiwgdGhpcyBmaWVsZCBleHBvc2VzIHRoZSBub2RlIHRoaXMgaXMgYSByZXZpc2lvbiBvZi4gUmV0dXJucyBudWxsIGlmIHRoZSBub2RlIGlzIG5vdCBhIHJldmlzaW9uIG9mIGFub3RoZXIgbm9kZS4gKi9cbiAgcmV2aXNpb25PZj86IE1heWJlPE5vZGVXaXRoUmV2aXNpb25zVG9Db250ZW50Tm9kZUNvbm5lY3Rpb25FZGdlPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIE5vZGVXaXRoUmV2aXNpb25zIHR5cGUgYW5kIHRoZSBDb250ZW50Tm9kZSB0eXBlICovXG5leHBvcnQgdHlwZSBOb2RlV2l0aFJldmlzaW9uc1RvQ29udGVudE5vZGVDb25uZWN0aW9uRWRnZSA9IENvbnRlbnROb2RlQ29ubmVjdGlvbkVkZ2UgJiBFZGdlICYgT25lVG9PbmVDb25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ05vZGVXaXRoUmV2aXNpb25zVG9Db250ZW50Tm9kZUNvbm5lY3Rpb25FZGdlJztcbiAgLyoqIE9wYXF1ZSByZWZlcmVuY2UgdG8gdGhlIG5vZGVzIHBvc2l0aW9uIGluIHRoZSBjb25uZWN0aW9uLiBWYWx1ZSBjYW4gYmUgdXNlZCB3aXRoIHBhZ2luYXRpb24gYXJncy4gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBub2RlIG9mIHRoZSBjb25uZWN0aW9uLCB3aXRob3V0IHRoZSBlZGdlcyAqL1xuICBub2RlOiBDb250ZW50Tm9kZTtcbn07XG5cbi8qKiBBIG5vZGUgdGhhdCBjYW4gaGF2ZSBhIHRlbXBsYXRlIGFzc29jaWF0ZWQgd2l0aCBpdCAqL1xuZXhwb3J0IHR5cGUgTm9kZVdpdGhUZW1wbGF0ZSA9IHtcbiAgLyoqIFRoZSBnbG9iYWxseSB1bmlxdWUgSUQgZm9yIHRoZSBvYmplY3QgKi9cbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddO1xuICAvKiogVGhlIHRlbXBsYXRlIGFzc2lnbmVkIHRvIHRoZSBub2RlICovXG4gIHRlbXBsYXRlPzogTWF5YmU8Q29udGVudFRlbXBsYXRlPjtcbn07XG5cbi8qKiBBIG5vZGUgdGhhdCBOb2RlV2l0aCBhIHRpdGxlICovXG5leHBvcnQgdHlwZSBOb2RlV2l0aFRpdGxlID0ge1xuICAvKiogVGhlIGdsb2JhbGx5IHVuaXF1ZSBJRCBmb3IgdGhlIG9iamVjdCAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnb3V0cHV0J107XG4gIC8qKiBUaGUgdGl0bGUgb2YgdGhlIHBvc3QuIFRoaXMgaXMgY3VycmVudGx5IGp1c3QgdGhlIHJhdyB0aXRsZS4gQW4gYW1lbmRtZW50IHRvIHN1cHBvcnQgcmVuZGVyZWQgdGl0bGUgbmVlZHMgdG8gYmUgbWFkZS4gKi9cbiAgdGl0bGU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuXG4vKiogQSBub2RlIHRoYXQgTm9kZVdpdGggYSB0aXRsZSAqL1xuZXhwb3J0IHR5cGUgTm9kZVdpdGhUaXRsZVRpdGxlQXJncyA9IHtcbiAgZm9ybWF0PzogSW5wdXRNYXliZTxQb3N0T2JqZWN0RmllbGRGb3JtYXRFbnVtPjtcbn07XG5cbi8qKiBBIG5vZGUgdGhhdCBjYW4gaGF2ZSB0cmFja2JhY2tzIGFuZCBwaW5nYmFja3MgKi9cbmV4cG9ydCB0eXBlIE5vZGVXaXRoVHJhY2tiYWNrcyA9IHtcbiAgLyoqIFRoZSBnbG9iYWxseSB1bmlxdWUgSUQgZm9yIHRoZSBvYmplY3QgKi9cbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddO1xuICAvKiogV2hldGhlciB0aGUgcGluZ3MgYXJlIG9wZW4gb3IgY2xvc2VkIGZvciB0aGlzIHBhcnRpY3VsYXIgcG9zdC4gKi9cbiAgcGluZ1N0YXR1cz86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBVUkxzIHRoYXQgaGF2ZSBiZWVuIHBpbmdlZC4gKi9cbiAgcGluZ2VkPzogTWF5YmU8QXJyYXk8TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPj4+O1xuICAvKiogVVJMcyBxdWV1ZWQgdG8gYmUgcGluZ2VkLiAqL1xuICB0b1Bpbmc/OiBNYXliZTxBcnJheTxNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+Pj47XG59O1xuXG4vKiogQSBzaW5ndWxhciBjb25uZWN0aW9uIGZyb20gb25lIE5vZGUgdG8gYW5vdGhlciwgd2l0aCBzdXBwb3J0IGZvciByZWxhdGlvbmFsIGRhdGEgb24gdGhlICZxdW90O2VkZ2UmcXVvdDsgb2YgdGhlIGNvbm5lY3Rpb24uICovXG5leHBvcnQgdHlwZSBPbmVUb09uZUNvbm5lY3Rpb24gPSB7XG4gIC8qKiBPcGFxdWUgcmVmZXJlbmNlIHRvIHRoZSBub2RlcyBwb3NpdGlvbiBpbiB0aGUgY29ubmVjdGlvbi4gVmFsdWUgY2FuIGJlIHVzZWQgd2l0aCBwYWdpbmF0aW9uIGFyZ3MuICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgY29ubmVjdGVkIG5vZGUgKi9cbiAgbm9kZTogTm9kZTtcbn07XG5cbi8qKiBUaGUgY2FyZGluYWxpdHkgb2YgdGhlIGNvbm5lY3Rpb24gb3JkZXIgKi9cbmV4cG9ydCBlbnVtIE9yZGVyRW51bSB7XG4gIC8qKiBTb3J0IHRoZSBxdWVyeSByZXN1bHQgc2V0IGluIGFuIGFzY2VuZGluZyBvcmRlciAqL1xuICBBc2MgPSAnQVNDJyxcbiAgLyoqIFNvcnQgdGhlIHF1ZXJ5IHJlc3VsdCBzZXQgaW4gYSBkZXNjZW5kaW5nIG9yZGVyICovXG4gIERlc2MgPSAnREVTQydcbn1cblxuLyoqIFRoZSBwYWdlIHR5cGUgKi9cbmV4cG9ydCB0eXBlIFBhZ2UgPSBDb250ZW50Tm9kZSAmIERhdGFiYXNlSWRlbnRpZmllciAmIEhpZXJhcmNoaWNhbENvbnRlbnROb2RlICYgSGllcmFyY2hpY2FsTm9kZSAmIE1lbnVJdGVtTGlua2FibGUgJiBOb2RlICYgTm9kZVdpdGhBdXRob3IgJiBOb2RlV2l0aENvbW1lbnRzICYgTm9kZVdpdGhDb250ZW50RWRpdG9yICYgTm9kZVdpdGhGZWF0dXJlZEltYWdlICYgTm9kZVdpdGhQYWdlQXR0cmlidXRlcyAmIE5vZGVXaXRoUmV2aXNpb25zICYgTm9kZVdpdGhUZW1wbGF0ZSAmIE5vZGVXaXRoVGl0bGUgJiBQcmV2aWV3YWJsZSAmIFVuaWZvcm1SZXNvdXJjZUlkZW50aWZpYWJsZSAmIHtcbiAgX190eXBlbmFtZT86ICdQYWdlJztcbiAgLyoqIFJldHVybnMgYW5jZXN0b3JzIG9mIHRoZSBub2RlLiBEZWZhdWx0IG9yZGVyZWQgYXMgbG93ZXN0IChjbG9zZXN0IHRvIHRoZSBjaGlsZCkgdG8gaGlnaGVzdCAoY2xvc2VzdCB0byB0aGUgcm9vdCkuICovXG4gIGFuY2VzdG9ycz86IE1heWJlPEhpZXJhcmNoaWNhbENvbnRlbnROb2RlVG9Db250ZW50Tm9kZUFuY2VzdG9yc0Nvbm5lY3Rpb24+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBOb2RlV2l0aEF1dGhvciB0eXBlIGFuZCB0aGUgVXNlciB0eXBlICovXG4gIGF1dGhvcj86IE1heWJlPE5vZGVXaXRoQXV0aG9yVG9Vc2VyQ29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIGRhdGFiYXNlIGlkZW50aWZpZXIgb2YgdGhlIGF1dGhvciBvZiB0aGUgbm9kZSAqL1xuICBhdXRob3JEYXRhYmFzZUlkPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgYXV0aG9yIG9mIHRoZSBub2RlICovXG4gIGF1dGhvcklkPzogTWF5YmU8U2NhbGFyc1snSUQnXVsnb3V0cHV0J10+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBIaWVyYXJjaGljYWxDb250ZW50Tm9kZSB0eXBlIGFuZCB0aGUgQ29udGVudE5vZGUgdHlwZSAqL1xuICBjaGlsZHJlbj86IE1heWJlPEhpZXJhcmNoaWNhbENvbnRlbnROb2RlVG9Db250ZW50Tm9kZUNoaWxkcmVuQ29ubmVjdGlvbj47XG4gIC8qKiBUaGUgbnVtYmVyIG9mIGNvbW1lbnRzLiBFdmVuIHRob3VnaCBXUEdyYXBoUUwgZGVub3RlcyB0aGlzIGZpZWxkIGFzIGFuIGludGVnZXIsIGluIFdvcmRQcmVzcyB0aGlzIGZpZWxkIHNob3VsZCBiZSBzYXZlZCBhcyBhIG51bWVyaWMgc3RyaW5nIGZvciBjb21wYXRpYmlsaXR5LiAqL1xuICBjb21tZW50Q291bnQ/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogV2hldGhlciB0aGUgY29tbWVudHMgYXJlIG9wZW4gb3IgY2xvc2VkIGZvciB0aGlzIHBhcnRpY3VsYXIgcG9zdC4gKi9cbiAgY29tbWVudFN0YXR1cz86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFBhZ2UgdHlwZSBhbmQgdGhlIENvbW1lbnQgdHlwZSAqL1xuICBjb21tZW50cz86IE1heWJlPFBhZ2VUb0NvbW1lbnRDb25uZWN0aW9uPjtcbiAgLyoqIFRoZSBjb250ZW50IG9mIHRoZSBwb3N0LiAqL1xuICBjb250ZW50PzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgQ29udGVudE5vZGUgdHlwZSBhbmQgdGhlIENvbnRlbnRUeXBlIHR5cGUgKi9cbiAgY29udGVudFR5cGU/OiBNYXliZTxDb250ZW50Tm9kZVRvQ29udGVudFR5cGVDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbmFtZSBvZiB0aGUgQ29udGVudCBUeXBlIHRoZSBub2RlIGJlbG9uZ3MgdG8gKi9cbiAgY29udGVudFR5cGVOYW1lOiBTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J107XG4gIC8qKiBUaGUgdW5pcXVlIGlkZW50aWZpZXIgc3RvcmVkIGluIHRoZSBkYXRhYmFzZSAqL1xuICBkYXRhYmFzZUlkOiBTY2FsYXJzWydJbnQnXVsnb3V0cHV0J107XG4gIC8qKiBQb3N0IHB1Ymxpc2hpbmcgZGF0ZS4gKi9cbiAgZGF0ZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgcHVibGlzaGluZyBkYXRlIHNldCBpbiBHTVQuICovXG4gIGRhdGVHbXQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGRlc2lyZWQgc2x1ZyBvZiB0aGUgcG9zdCAqL1xuICBkZXNpcmVkU2x1Zz86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBJZiBhIHVzZXIgaGFzIGVkaXRlZCB0aGUgbm9kZSB3aXRoaW4gdGhlIHBhc3QgMTUgc2Vjb25kcywgdGhpcyB3aWxsIHJldHVybiB0aGUgdXNlciB0aGF0IGxhc3QgZWRpdGVkLiBOdWxsIGlmIHRoZSBlZGl0IGxvY2sgZG9lc24mIzAzOTt0IGV4aXN0IG9yIGlzIGdyZWF0ZXIgdGhhbiAxNSBzZWNvbmRzICovXG4gIGVkaXRpbmdMb2NrZWRCeT86IE1heWJlPENvbnRlbnROb2RlVG9FZGl0TG9ja0Nvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBSU1MgZW5jbG9zdXJlIGZvciB0aGUgb2JqZWN0ICovXG4gIGVuY2xvc3VyZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIENvbnRlbnROb2RlIHR5cGUgYW5kIHRoZSBFbnF1ZXVlZFNjcmlwdCB0eXBlICovXG4gIGVucXVldWVkU2NyaXB0cz86IE1heWJlPENvbnRlbnROb2RlVG9FbnF1ZXVlZFNjcmlwdENvbm5lY3Rpb24+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBDb250ZW50Tm9kZSB0eXBlIGFuZCB0aGUgRW5xdWV1ZWRTdHlsZXNoZWV0IHR5cGUgKi9cbiAgZW5xdWV1ZWRTdHlsZXNoZWV0cz86IE1heWJlPENvbnRlbnROb2RlVG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgTm9kZVdpdGhGZWF0dXJlZEltYWdlIHR5cGUgYW5kIHRoZSBNZWRpYUl0ZW0gdHlwZSAqL1xuICBmZWF0dXJlZEltYWdlPzogTWF5YmU8Tm9kZVdpdGhGZWF0dXJlZEltYWdlVG9NZWRpYUl0ZW1Db25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgZGF0YWJhc2UgaWRlbnRpZmllciBmb3IgdGhlIGZlYXR1cmVkIGltYWdlIG5vZGUgYXNzaWduZWQgdG8gdGhlIGNvbnRlbnQgbm9kZSAqL1xuICBmZWF0dXJlZEltYWdlRGF0YWJhc2VJZD86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBHbG9iYWxseSB1bmlxdWUgSUQgb2YgdGhlIGZlYXR1cmVkIGltYWdlIGFzc2lnbmVkIHRvIHRoZSBub2RlICovXG4gIGZlYXR1cmVkSW1hZ2VJZD86IE1heWJlPFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBnbG9iYWwgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgcG9zdC4gVGhpcyBjdXJyZW50bHkgbWF0Y2hlcyB0aGUgdmFsdWUgc3RvcmVkIGluIFdQX1Bvc3QtJmd0O2d1aWQgYW5kIHRoZSBndWlkIGNvbHVtbiBpbiB0aGUgJnF1b3Q7cG9zdF9vYmplY3RzJnF1b3Q7IGRhdGFiYXNlIHRhYmxlLiAqL1xuICBndWlkPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgcGFnZSBvYmplY3QuICovXG4gIGlkOiBTY2FsYXJzWydJRCddWydvdXRwdXQnXTtcbiAgLyoqIFdoZXRoZXIgdGhlIG5vZGUgaXMgYSBDb250ZW50IE5vZGUgKi9cbiAgaXNDb250ZW50Tm9kZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZXRoZXIgdGhpcyBwYWdlIGlzIHNldCB0byB0aGUgc3RhdGljIGZyb250IHBhZ2UuICovXG4gIGlzRnJvbnRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hldGhlciB0aGlzIHBhZ2UgaXMgc2V0IHRvIHRoZSBibG9nIHBvc3RzIHBhZ2UuICovXG4gIGlzUG9zdHNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hldGhlciB0aGUgb2JqZWN0IGlzIGEgbm9kZSBpbiB0aGUgcHJldmlldyBzdGF0ZSAqL1xuICBpc1ByZXZpZXc/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdGhpcyBwYWdlIGlzIHNldCB0byB0aGUgcHJpdmFjeSBwYWdlLiAqL1xuICBpc1ByaXZhY3lQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hldGhlciB0aGUgb2JqZWN0IGlzIHJlc3RyaWN0ZWQgZnJvbSB0aGUgY3VycmVudCB2aWV3ZXIgKi9cbiAgaXNSZXN0cmljdGVkPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBUcnVlIGlmIHRoZSBub2RlIGlzIGEgcmV2aXNpb24gb2YgYW5vdGhlciBub2RlICovXG4gIGlzUmV2aXNpb24/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdGhlIG5vZGUgaXMgYSBUZXJtICovXG4gIGlzVGVybU5vZGU6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBUaGUgdXNlciB0aGF0IG1vc3QgcmVjZW50bHkgZWRpdGVkIHRoZSBub2RlICovXG4gIGxhc3RFZGl0ZWRCeT86IE1heWJlPENvbnRlbnROb2RlVG9FZGl0TGFzdENvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBwZXJtYWxpbmsgb2YgdGhlIHBvc3QgKi9cbiAgbGluaz86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBBIGZpZWxkIHVzZWQgZm9yIG9yZGVyaW5nIHBvc3RzLiBUaGlzIGlzIHR5cGljYWxseSB1c2VkIHdpdGggbmF2IG1lbnUgaXRlbXMgb3IgZm9yIHNwZWNpYWwgb3JkZXJpbmcgb2YgaGllcmFyY2hpY2FsIGNvbnRlbnQgdHlwZXMuICovXG4gIG1lbnVPcmRlcj86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgbG9jYWwgbW9kaWZpZWQgdGltZSBmb3IgYSBwb3N0LiBJZiBhIHBvc3Qgd2FzIHJlY2VudGx5IHVwZGF0ZWQgdGhlIG1vZGlmaWVkIGZpZWxkIHdpbGwgY2hhbmdlIHRvIG1hdGNoIHRoZSBjb3JyZXNwb25kaW5nIHRpbWUuICovXG4gIG1vZGlmaWVkPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBHTVQgbW9kaWZpZWQgdGltZSBmb3IgYSBwb3N0LiBJZiBhIHBvc3Qgd2FzIHJlY2VudGx5IHVwZGF0ZWQgdGhlIG1vZGlmaWVkIGZpZWxkIHdpbGwgY2hhbmdlIHRvIG1hdGNoIHRoZSBjb3JyZXNwb25kaW5nIHRpbWUgaW4gR01ULiAqL1xuICBtb2RpZmllZEdtdD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKlxuICAgKiBUaGUgaWQgZmllbGQgbWF0Y2hlcyB0aGUgV1BfUG9zdC0mZ3Q7SUQgZmllbGQuXG4gICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgdGhlIGRhdGFiYXNlSWQgZmllbGRcbiAgICovXG4gIHBhZ2VJZDogU2NhbGFyc1snSW50J11bJ291dHB1dCddO1xuICAvKiogVGhlIHBhcmVudCBvZiB0aGUgbm9kZS4gVGhlIHBhcmVudCBvYmplY3QgY2FuIGJlIG9mIHZhcmlvdXMgdHlwZXMgKi9cbiAgcGFyZW50PzogTWF5YmU8SGllcmFyY2hpY2FsQ29udGVudE5vZGVUb1BhcmVudENvbnRlbnROb2RlQ29ubmVjdGlvbkVkZ2U+O1xuICAvKiogRGF0YWJhc2UgaWQgb2YgdGhlIHBhcmVudCBub2RlICovXG4gIHBhcmVudERhdGFiYXNlSWQ/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBwYXJlbnQgbm9kZS4gKi9cbiAgcGFyZW50SWQ/OiBNYXliZTxTY2FsYXJzWydJRCddWydvdXRwdXQnXT47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFBhZ2UgdHlwZSBhbmQgdGhlIHBhZ2UgdHlwZSAqL1xuICBwcmV2aWV3PzogTWF5YmU8UGFnZVRvUHJldmlld0Nvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBkYXRhYmFzZSBpZCBvZiB0aGUgcHJldmlldyBub2RlICovXG4gIHByZXZpZXdSZXZpc2lvbkRhdGFiYXNlSWQ/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogV2hldGhlciB0aGUgb2JqZWN0IGlzIGEgbm9kZSBpbiB0aGUgcHJldmlldyBzdGF0ZSAqL1xuICBwcmV2aWV3UmV2aXNpb25JZD86IE1heWJlPFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddPjtcbiAgLyoqIElmIHRoZSBjdXJyZW50IG5vZGUgaXMgYSByZXZpc2lvbiwgdGhpcyBmaWVsZCBleHBvc2VzIHRoZSBub2RlIHRoaXMgaXMgYSByZXZpc2lvbiBvZi4gUmV0dXJucyBudWxsIGlmIHRoZSBub2RlIGlzIG5vdCBhIHJldmlzaW9uIG9mIGFub3RoZXIgbm9kZS4gKi9cbiAgcmV2aXNpb25PZj86IE1heWJlPE5vZGVXaXRoUmV2aXNpb25zVG9Db250ZW50Tm9kZUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgUGFnZSB0eXBlIGFuZCB0aGUgcGFnZSB0eXBlICovXG4gIHJldmlzaW9ucz86IE1heWJlPFBhZ2VUb1JldmlzaW9uQ29ubmVjdGlvbj47XG4gIC8qKiBUaGUgdXJpIHNsdWcgZm9yIHRoZSBwb3N0LiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gdGhlIFdQX1Bvc3QtJmd0O3Bvc3RfbmFtZSBmaWVsZCBhbmQgdGhlIHBvc3RfbmFtZSBjb2x1bW4gaW4gdGhlIGRhdGFiYXNlIGZvciB0aGUgJnF1b3Q7cG9zdF9vYmplY3RzJnF1b3Q7IHRhYmxlLiAqL1xuICBzbHVnPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBjdXJyZW50IHN0YXR1cyBvZiB0aGUgb2JqZWN0ICovXG4gIHN0YXR1cz86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgdGVtcGxhdGUgYXNzaWduZWQgdG8gYSBub2RlIG9mIGNvbnRlbnQgKi9cbiAgdGVtcGxhdGU/OiBNYXliZTxDb250ZW50VGVtcGxhdGU+O1xuICAvKiogVGhlIHRpdGxlIG9mIHRoZSBwb3N0LiBUaGlzIGlzIGN1cnJlbnRseSBqdXN0IHRoZSByYXcgdGl0bGUuIEFuIGFtZW5kbWVudCB0byBzdXBwb3J0IHJlbmRlcmVkIHRpdGxlIG5lZWRzIHRvIGJlIG1hZGUuICovXG4gIHRpdGxlPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSB1bmlxdWUgcmVzb3VyY2UgaWRlbnRpZmllciBwYXRoICovXG4gIHVyaT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG5cbi8qKiBUaGUgcGFnZSB0eXBlICovXG5leHBvcnQgdHlwZSBQYWdlQW5jZXN0b3JzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPEhpZXJhcmNoaWNhbENvbnRlbnROb2RlVG9Db250ZW50Tm9kZUFuY2VzdG9yc0Nvbm5lY3Rpb25XaGVyZUFyZ3M+O1xufTtcblxuXG4vKiogVGhlIHBhZ2UgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUGFnZUNoaWxkcmVuQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPEhpZXJhcmNoaWNhbENvbnRlbnROb2RlVG9Db250ZW50Tm9kZUNoaWxkcmVuQ29ubmVjdGlvbldoZXJlQXJncz47XG59O1xuXG5cbi8qKiBUaGUgcGFnZSB0eXBlICovXG5leHBvcnQgdHlwZSBQYWdlQ29tbWVudHNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICB3aGVyZT86IElucHV0TWF5YmU8UGFnZVRvQ29tbWVudENvbm5lY3Rpb25XaGVyZUFyZ3M+O1xufTtcblxuXG4vKiogVGhlIHBhZ2UgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUGFnZUNvbnRlbnRBcmdzID0ge1xuICBmb3JtYXQ/OiBJbnB1dE1heWJlPFBvc3RPYmplY3RGaWVsZEZvcm1hdEVudW0+O1xufTtcblxuXG4vKiogVGhlIHBhZ2UgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUGFnZUVucXVldWVkU2NyaXB0c0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG59O1xuXG5cbi8qKiBUaGUgcGFnZSB0eXBlICovXG5leHBvcnQgdHlwZSBQYWdlRW5xdWV1ZWRTdHlsZXNoZWV0c0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG59O1xuXG5cbi8qKiBUaGUgcGFnZSB0eXBlICovXG5leHBvcnQgdHlwZSBQYWdlUmV2aXNpb25zQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPFBhZ2VUb1JldmlzaW9uQ29ubmVjdGlvbldoZXJlQXJncz47XG59O1xuXG5cbi8qKiBUaGUgcGFnZSB0eXBlICovXG5leHBvcnQgdHlwZSBQYWdlVGl0bGVBcmdzID0ge1xuICBmb3JtYXQ/OiBJbnB1dE1heWJlPFBvc3RPYmplY3RGaWVsZEZvcm1hdEVudW0+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gdG8gcGFnZSBOb2RlcyAqL1xuZXhwb3J0IHR5cGUgUGFnZUNvbm5lY3Rpb24gPSB7XG4gIC8qKiBBIGxpc3Qgb2YgZWRnZXMgKHJlbGF0aW9uYWwgY29udGV4dCkgYmV0d2VlbiBSb290UXVlcnkgYW5kIGNvbm5lY3RlZCBwYWdlIE5vZGVzICovXG4gIGVkZ2VzOiBBcnJheTxQYWdlQ29ubmVjdGlvbkVkZ2U+O1xuICAvKiogQSBsaXN0IG9mIGNvbm5lY3RlZCBwYWdlIE5vZGVzICovXG4gIG5vZGVzOiBBcnJheTxQYWdlPjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogUGFnZUNvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBFZGdlIGJldHdlZW4gYSBOb2RlIGFuZCBhIGNvbm5lY3RlZCBwYWdlICovXG5leHBvcnQgdHlwZSBQYWdlQ29ubmVjdGlvbkVkZ2UgPSB7XG4gIC8qKiBPcGFxdWUgcmVmZXJlbmNlIHRvIHRoZSBub2RlcyBwb3NpdGlvbiBpbiB0aGUgY29ubmVjdGlvbi4gVmFsdWUgY2FuIGJlIHVzZWQgd2l0aCBwYWdpbmF0aW9uIGFyZ3MuICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgY29ubmVjdGVkIHBhZ2UgTm9kZSAqL1xuICBub2RlOiBQYWdlO1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgY29ubmVjdGVkIFBhZ2VDb25uZWN0aW9uRWRnZSAqL1xuZXhwb3J0IHR5cGUgUGFnZUNvbm5lY3Rpb25QYWdlSW5mbyA9IHtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBUaGUgVHlwZSBvZiBJZGVudGlmaWVyIHVzZWQgdG8gZmV0Y2ggYSBzaW5nbGUgcmVzb3VyY2UuIERlZmF1bHQgaXMgSUQuICovXG5leHBvcnQgZW51bSBQYWdlSWRUeXBlIHtcbiAgLyoqIElkZW50aWZ5IGEgcmVzb3VyY2UgYnkgdGhlIERhdGFiYXNlIElELiAqL1xuICBEYXRhYmFzZUlkID0gJ0RBVEFCQVNFX0lEJyxcbiAgLyoqIElkZW50aWZ5IGEgcmVzb3VyY2UgYnkgdGhlIChoYXNoZWQpIEdsb2JhbCBJRC4gKi9cbiAgSWQgPSAnSUQnLFxuICAvKiogSWRlbnRpZnkgYSByZXNvdXJjZSBieSB0aGUgVVJJLiAqL1xuICBVcmkgPSAnVVJJJ1xufVxuXG4vKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG5leHBvcnQgdHlwZSBQYWdlSW5mbyA9IHtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFBhZ2UgdHlwZSBhbmQgdGhlIENvbW1lbnQgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUGFnZVRvQ29tbWVudENvbm5lY3Rpb24gPSBDb21tZW50Q29ubmVjdGlvbiAmIENvbm5lY3Rpb24gJiB7XG4gIF9fdHlwZW5hbWU/OiAnUGFnZVRvQ29tbWVudENvbm5lY3Rpb24nO1xuICAvKiogRWRnZXMgZm9yIHRoZSBQYWdlVG9Db21tZW50Q29ubmVjdGlvbiBjb25uZWN0aW9uICovXG4gIGVkZ2VzOiBBcnJheTxQYWdlVG9Db21tZW50Q29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIG5vZGVzIG9mIHRoZSBjb25uZWN0aW9uLCB3aXRob3V0IHRoZSBlZGdlcyAqL1xuICBub2RlczogQXJyYXk8Q29tbWVudD47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFBhZ2VUb0NvbW1lbnRDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFBhZ2VUb0NvbW1lbnRDb25uZWN0aW9uRWRnZSA9IENvbW1lbnRDb25uZWN0aW9uRWRnZSAmIEVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnUGFnZVRvQ29tbWVudENvbm5lY3Rpb25FZGdlJztcbiAgLyoqIEEgY3Vyc29yIGZvciB1c2UgaW4gcGFnaW5hdGlvbiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGl0ZW0gYXQgdGhlIGVuZCBvZiB0aGUgZWRnZSAqL1xuICBub2RlOiBDb21tZW50O1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgJnF1b3Q7UGFnZVRvQ29tbWVudENvbm5lY3Rpb24mcXVvdDsgKi9cbmV4cG9ydCB0eXBlIFBhZ2VUb0NvbW1lbnRDb25uZWN0aW9uUGFnZUluZm8gPSBDb21tZW50Q29ubmVjdGlvblBhZ2VJbmZvICYgUGFnZUluZm8gJiBXcFBhZ2VJbmZvICYge1xuICBfX3R5cGVuYW1lPzogJ1BhZ2VUb0NvbW1lbnRDb25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIEFyZ3VtZW50cyBmb3IgZmlsdGVyaW5nIHRoZSBQYWdlVG9Db21tZW50Q29ubmVjdGlvbiBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBQYWdlVG9Db21tZW50Q29ubmVjdGlvbldoZXJlQXJncyA9IHtcbiAgLyoqIENvbW1lbnQgYXV0aG9yIGVtYWlsIGFkZHJlc3MuICovXG4gIGF1dGhvckVtYWlsPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBhdXRob3IgSURzIHRvIGluY2x1ZGUgY29tbWVudHMgZm9yLiAqL1xuICBhdXRob3JJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgYXV0aG9yIElEcyB0byBleGNsdWRlIGNvbW1lbnRzIGZvci4gKi9cbiAgYXV0aG9yTm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIENvbW1lbnQgYXV0aG9yIFVSTC4gKi9cbiAgYXV0aG9yVXJsPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBjb21tZW50IElEcyB0byBpbmNsdWRlLiAqL1xuICBjb21tZW50SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIElEcyBvZiB1c2VycyB3aG9zZSB1bmFwcHJvdmVkIGNvbW1lbnRzIHdpbGwgYmUgcmV0dXJuZWQgYnkgdGhlIHF1ZXJ5IHJlZ2FyZGxlc3Mgb2Ygc3RhdHVzLiAqL1xuICBjb21tZW50Tm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEluY2x1ZGUgY29tbWVudHMgb2YgYSBnaXZlbiB0eXBlLiAqL1xuICBjb21tZW50VHlwZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogSW5jbHVkZSBjb21tZW50cyBmcm9tIGEgZ2l2ZW4gYXJyYXkgb2YgY29tbWVudCB0eXBlcy4gKi9cbiAgY29tbWVudFR5cGVJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEV4Y2x1ZGUgY29tbWVudHMgZnJvbSBhIGdpdmVuIGFycmF5IG9mIGNvbW1lbnQgdHlwZXMuICovXG4gIGNvbW1lbnRUeXBlTm90SW4/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIENvbnRlbnQgb2JqZWN0IGF1dGhvciBJRCB0byBsaW1pdCByZXN1bHRzIGJ5LiAqL1xuICBjb250ZW50QXV0aG9yPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBhdXRob3IgSURzIHRvIHJldHJpZXZlIGNvbW1lbnRzIGZvci4gKi9cbiAgY29udGVudEF1dGhvckluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBhdXRob3IgSURzICpub3QqIHRvIHJldHJpZXZlIGNvbW1lbnRzIGZvci4gKi9cbiAgY29udGVudEF1dGhvck5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBMaW1pdCByZXN1bHRzIHRvIHRob3NlIGFmZmlsaWF0ZWQgd2l0aCBhIGdpdmVuIGNvbnRlbnQgb2JqZWN0IElELiAqL1xuICBjb250ZW50SWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgY29udGVudCBvYmplY3QgSURzIHRvIGluY2x1ZGUgYWZmaWxpYXRlZCBjb21tZW50cyBmb3IuICovXG4gIGNvbnRlbnRJZEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBjb250ZW50IG9iamVjdCBJRHMgdG8gZXhjbHVkZSBhZmZpbGlhdGVkIGNvbW1lbnRzIGZvci4gKi9cbiAgY29udGVudElkTm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIENvbnRlbnQgb2JqZWN0IG5hbWUgKGkuZS4gc2x1ZyApIHRvIHJldHJpZXZlIGFmZmlsaWF0ZWQgY29tbWVudHMgZm9yLiAqL1xuICBjb250ZW50TmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQ29udGVudCBPYmplY3QgcGFyZW50IElEIHRvIHJldHJpZXZlIGFmZmlsaWF0ZWQgY29tbWVudHMgZm9yLiAqL1xuICBjb250ZW50UGFyZW50PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBjb250ZW50IG9iamVjdCBzdGF0dXNlcyB0byByZXRyaWV2ZSBhZmZpbGlhdGVkIGNvbW1lbnRzIGZvci4gUGFzcyAnYW55JyB0byBtYXRjaCBhbnkgdmFsdWUuICovXG4gIGNvbnRlbnRTdGF0dXM/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+Pj47XG4gIC8qKiBDb250ZW50IG9iamVjdCB0eXBlIG9yIGFycmF5IG9mIHR5cGVzIHRvIHJldHJpZXZlIGFmZmlsaWF0ZWQgY29tbWVudHMgZm9yLiBQYXNzICdhbnknIHRvIG1hdGNoIGFueSB2YWx1ZS4gKi9cbiAgY29udGVudFR5cGU/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8Q29udGVudFR5cGVFbnVtPj4+O1xuICAvKiogQXJyYXkgb2YgSURzIG9yIGVtYWlsIGFkZHJlc3NlcyBvZiB1c2VycyB3aG9zZSB1bmFwcHJvdmVkIGNvbW1lbnRzIHdpbGwgYmUgcmV0dXJuZWQgYnkgdGhlIHF1ZXJ5IHJlZ2FyZGxlc3Mgb2YgJHN0YXR1cy4gRGVmYXVsdCBlbXB0eSAqL1xuICBpbmNsdWRlVW5hcHByb3ZlZD86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogS2FybWEgc2NvcmUgdG8gcmV0cmlldmUgbWF0Y2hpbmcgY29tbWVudHMgZm9yLiAqL1xuICBrYXJtYT86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogVGhlIGNhcmRpbmFsaXR5IG9mIHRoZSBvcmRlciBvZiB0aGUgY29ubmVjdGlvbiAqL1xuICBvcmRlcj86IElucHV0TWF5YmU8T3JkZXJFbnVtPjtcbiAgLyoqIEZpZWxkIHRvIG9yZGVyIHRoZSBjb21tZW50cyBieS4gKi9cbiAgb3JkZXJieT86IElucHV0TWF5YmU8Q29tbWVudHNDb25uZWN0aW9uT3JkZXJieUVudW0+O1xuICAvKiogUGFyZW50IElEIG9mIGNvbW1lbnQgdG8gcmV0cmlldmUgY2hpbGRyZW4gb2YuICovXG4gIHBhcmVudD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgcGFyZW50IElEcyBvZiBjb21tZW50cyB0byByZXRyaWV2ZSBjaGlsZHJlbiBmb3IuICovXG4gIHBhcmVudEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBwYXJlbnQgSURzIG9mIGNvbW1lbnRzICpub3QqIHRvIHJldHJpZXZlIGNoaWxkcmVuIGZvci4gKi9cbiAgcGFyZW50Tm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNlYXJjaCB0ZXJtKHMpIHRvIHJldHJpZXZlIG1hdGNoaW5nIGNvbW1lbnRzIGZvci4gKi9cbiAgc2VhcmNoPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBDb21tZW50IHN0YXR1cyB0byBsaW1pdCByZXN1bHRzIGJ5LiAqL1xuICBzdGF0dXM/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEluY2x1ZGUgY29tbWVudHMgZm9yIGEgc3BlY2lmaWMgdXNlciBJRC4gKi9cbiAgdXNlcklkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFBhZ2UgdHlwZSBhbmQgdGhlIHBhZ2UgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUGFnZVRvUHJldmlld0Nvbm5lY3Rpb25FZGdlID0gRWRnZSAmIE9uZVRvT25lQ29ubmVjdGlvbiAmIFBhZ2VDb25uZWN0aW9uRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdQYWdlVG9QcmV2aWV3Q29ubmVjdGlvbkVkZ2UnO1xuICAvKiogT3BhcXVlIHJlZmVyZW5jZSB0byB0aGUgbm9kZXMgcG9zaXRpb24gaW4gdGhlIGNvbm5lY3Rpb24uIFZhbHVlIGNhbiBiZSB1c2VkIHdpdGggcGFnaW5hdGlvbiBhcmdzLiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIG5vZGUgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGU6IFBhZ2U7XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBQYWdlIHR5cGUgYW5kIHRoZSBwYWdlIHR5cGUgKi9cbmV4cG9ydCB0eXBlIFBhZ2VUb1JldmlzaW9uQ29ubmVjdGlvbiA9IENvbm5lY3Rpb24gJiBQYWdlQ29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdQYWdlVG9SZXZpc2lvbkNvbm5lY3Rpb24nO1xuICAvKiogRWRnZXMgZm9yIHRoZSBQYWdlVG9SZXZpc2lvbkNvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8UGFnZVRvUmV2aXNpb25Db25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxQYWdlPjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogUGFnZVRvUmV2aXNpb25Db25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFBhZ2VUb1JldmlzaW9uQ29ubmVjdGlvbkVkZ2UgPSBFZGdlICYgUGFnZUNvbm5lY3Rpb25FZGdlICYge1xuICBfX3R5cGVuYW1lPzogJ1BhZ2VUb1JldmlzaW9uQ29ubmVjdGlvbkVkZ2UnO1xuICAvKiogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaXRlbSBhdCB0aGUgZW5kIG9mIHRoZSBlZGdlICovXG4gIG5vZGU6IFBhZ2U7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtQYWdlVG9SZXZpc2lvbkNvbm5lY3Rpb24mcXVvdDsgKi9cbmV4cG9ydCB0eXBlIFBhZ2VUb1JldmlzaW9uQ29ubmVjdGlvblBhZ2VJbmZvID0gUGFnZUNvbm5lY3Rpb25QYWdlSW5mbyAmIFBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdQYWdlVG9SZXZpc2lvbkNvbm5lY3Rpb25QYWdlSW5mbyc7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogQXJndW1lbnRzIGZvciBmaWx0ZXJpbmcgdGhlIFBhZ2VUb1JldmlzaW9uQ29ubmVjdGlvbiBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBQYWdlVG9SZXZpc2lvbkNvbm5lY3Rpb25XaGVyZUFyZ3MgPSB7XG4gIC8qKiBUaGUgdXNlciB0aGF0J3MgY29ubmVjdGVkIGFzIHRoZSBhdXRob3Igb2YgdGhlIG9iamVjdC4gVXNlIHRoZSB1c2VySWQgZm9yIHRoZSBhdXRob3Igb2JqZWN0LiAqL1xuICBhdXRob3I/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIEZpbmQgb2JqZWN0cyBjb25uZWN0ZWQgdG8gYXV0aG9yKHMpIGluIHRoZSBhcnJheSBvZiBhdXRob3IncyB1c2VySWRzICovXG4gIGF1dGhvckluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBGaW5kIG9iamVjdHMgY29ubmVjdGVkIHRvIHRoZSBhdXRob3IgYnkgdGhlIGF1dGhvcidzIG5pY2VuYW1lICovXG4gIGF1dGhvck5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEZpbmQgb2JqZWN0cyBOT1QgY29ubmVjdGVkIHRvIGF1dGhvcihzKSBpbiB0aGUgYXJyYXkgb2YgYXV0aG9yJ3MgdXNlcklkcyAqL1xuICBhdXRob3JOb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogRmlsdGVyIHRoZSBjb25uZWN0aW9uIGJhc2VkIG9uIGRhdGVzICovXG4gIGRhdGVRdWVyeT86IElucHV0TWF5YmU8RGF0ZVF1ZXJ5SW5wdXQ+O1xuICAvKiogVHJ1ZSBmb3Igb2JqZWN0cyB3aXRoIHBhc3N3b3JkczsgRmFsc2UgZm9yIG9iamVjdHMgd2l0aG91dCBwYXNzd29yZHM7IG51bGwgZm9yIGFsbCBvYmplY3RzIHdpdGggb3Igd2l0aG91dCBwYXNzd29yZHMgKi9cbiAgaGFzUGFzc3dvcmQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBTcGVjaWZpYyBkYXRhYmFzZSBJRCBvZiB0aGUgb2JqZWN0ICovXG4gIGlkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBJRHMgZm9yIHRoZSBvYmplY3RzIHRvIHJldHJpZXZlICovXG4gIGluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBHZXQgb2JqZWN0cyB3aXRoIGEgc3BlY2lmaWMgbWltZVR5cGUgcHJvcGVydHkgKi9cbiAgbWltZVR5cGU/OiBJbnB1dE1heWJlPE1pbWVUeXBlRW51bT47XG4gIC8qKiBTbHVnIC8gcG9zdF9uYW1lIG9mIHRoZSBvYmplY3QgKi9cbiAgbmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmeSBvYmplY3RzIHRvIHJldHJpZXZlLiBVc2Ugc2x1Z3MgKi9cbiAgbmFtZUluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogU3BlY2lmeSBJRHMgTk9UIHRvIHJldHJpZXZlLiBJZiB0aGlzIGlzIHVzZWQgaW4gdGhlIHNhbWUgcXVlcnkgYXMgXCJpblwiLCBpdCB3aWxsIGJlIGlnbm9yZWQgKi9cbiAgbm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFdoYXQgcGFyYW1ldGVyIHRvIHVzZSB0byBvcmRlciB0aGUgb2JqZWN0cyBieS4gKi9cbiAgb3JkZXJieT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxQb3N0T2JqZWN0c0Nvbm5lY3Rpb25PcmRlcmJ5SW5wdXQ+Pj47XG4gIC8qKiBVc2UgSUQgdG8gcmV0dXJuIG9ubHkgY2hpbGRyZW4uIFVzZSAwIHRvIHJldHVybiBvbmx5IHRvcC1sZXZlbCBpdGVtcyAqL1xuICBwYXJlbnQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmeSBvYmplY3RzIHdob3NlIHBhcmVudCBpcyBpbiBhbiBhcnJheSAqL1xuICBwYXJlbnRJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogU3BlY2lmeSBwb3N0cyB3aG9zZSBwYXJlbnQgaXMgbm90IGluIGFuIGFycmF5ICovXG4gIHBhcmVudE5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTaG93IHBvc3RzIHdpdGggYSBzcGVjaWZpYyBwYXNzd29yZC4gKi9cbiAgcGFzc3dvcmQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFNob3cgUG9zdHMgYmFzZWQgb24gYSBrZXl3b3JkIHNlYXJjaCAqL1xuICBzZWFyY2g/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFJldHJpZXZlIHBvc3RzIHdoZXJlIHBvc3Qgc3RhdHVzIGlzIGluIGFuIGFycmF5LiAqL1xuICBzdGF0aT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxQb3N0U3RhdHVzRW51bT4+PjtcbiAgLyoqIFNob3cgcG9zdHMgd2l0aCBhIHNwZWNpZmljIHN0YXR1cy4gKi9cbiAgc3RhdHVzPzogSW5wdXRNYXliZTxQb3N0U3RhdHVzRW51bT47XG4gIC8qKiBUaXRsZSBvZiB0aGUgb2JqZWN0ICovXG4gIHRpdGxlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG59O1xuXG4vKiogVGhlIHBkZnBTZXR0aW5ncyBzZXR0aW5nIHR5cGUgKi9cbmV4cG9ydCB0eXBlIFBkZnBTZXR0aW5nc1NldHRpbmdzID0ge1xuICBfX3R5cGVuYW1lPzogJ1BkZnBTZXR0aW5nc1NldHRpbmdzJztcbiAgLyoqIFRoZSBib29sZWFuIFNldHRpbmdzIEdyb3VwICovXG4gIGJwbUd1dGVuYmVyZ0VuYWJsZT86IE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGJvb2xlYW4gU2V0dGluZ3MgR3JvdXAgKi9cbiAgcGRmcEd1dGVuYmVyZ0VuYWJsZT86IE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIEFuIHBsdWdpbiBvYmplY3QgKi9cbmV4cG9ydCB0eXBlIFBsdWdpbiA9IE5vZGUgJiB7XG4gIF9fdHlwZW5hbWU/OiAnUGx1Z2luJztcbiAgLyoqIE5hbWUgb2YgdGhlIHBsdWdpbiBhdXRob3IocyksIG1heSBhbHNvIGJlIGEgY29tcGFueSBuYW1lLiAqL1xuICBhdXRob3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVVJJIGZvciB0aGUgcmVsYXRlZCBhdXRob3IocykvY29tcGFueSB3ZWJzaXRlLiAqL1xuICBhdXRob3JVcmk/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogRGVzY3JpcHRpb24gb2YgdGhlIHBsdWdpbi4gKi9cbiAgZGVzY3JpcHRpb24/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBwbHVnaW4gb2JqZWN0LiAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnb3V0cHV0J107XG4gIC8qKiBXaGV0aGVyIHRoZSBvYmplY3QgaXMgcmVzdHJpY3RlZCBmcm9tIHRoZSBjdXJyZW50IHZpZXdlciAqL1xuICBpc1Jlc3RyaWN0ZWQ/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIERpc3BsYXkgbmFtZSBvZiB0aGUgcGx1Z2luLiAqL1xuICBuYW1lPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFBsdWdpbiBwYXRoLiAqL1xuICBwYXRoPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFVSSSBmb3IgdGhlIHBsdWdpbiB3ZWJzaXRlLiBUaGlzIGlzIHVzZWZ1bCBmb3IgZGlyZWN0aW5nIHVzZXJzIGZvciBzdXBwb3J0IHJlcXVlc3RzIGV0Yy4gKi9cbiAgcGx1Z2luVXJpPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIEN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgcGx1Z2luLiAqL1xuICB2ZXJzaW9uPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIHRvIFBsdWdpbiBOb2RlcyAqL1xuZXhwb3J0IHR5cGUgUGx1Z2luQ29ubmVjdGlvbiA9IHtcbiAgLyoqIEEgbGlzdCBvZiBlZGdlcyAocmVsYXRpb25hbCBjb250ZXh0KSBiZXR3ZWVuIFJvb3RRdWVyeSBhbmQgY29ubmVjdGVkIFBsdWdpbiBOb2RlcyAqL1xuICBlZGdlczogQXJyYXk8UGx1Z2luQ29ubmVjdGlvbkVkZ2U+O1xuICAvKiogQSBsaXN0IG9mIGNvbm5lY3RlZCBQbHVnaW4gTm9kZXMgKi9cbiAgbm9kZXM6IEFycmF5PFBsdWdpbj47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFBsdWdpbkNvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBFZGdlIGJldHdlZW4gYSBOb2RlIGFuZCBhIGNvbm5lY3RlZCBQbHVnaW4gKi9cbmV4cG9ydCB0eXBlIFBsdWdpbkNvbm5lY3Rpb25FZGdlID0ge1xuICAvKiogT3BhcXVlIHJlZmVyZW5jZSB0byB0aGUgbm9kZXMgcG9zaXRpb24gaW4gdGhlIGNvbm5lY3Rpb24uIFZhbHVlIGNhbiBiZSB1c2VkIHdpdGggcGFnaW5hdGlvbiBhcmdzLiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGNvbm5lY3RlZCBQbHVnaW4gTm9kZSAqL1xuICBub2RlOiBQbHVnaW47XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSBjb25uZWN0ZWQgUGx1Z2luQ29ubmVjdGlvbkVkZ2UgKi9cbmV4cG9ydCB0eXBlIFBsdWdpbkNvbm5lY3Rpb25QYWdlSW5mbyA9IHtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBUaGUgc3RhdHVzIG9mIHRoZSBXb3JkUHJlc3MgcGx1Z2luLiAqL1xuZXhwb3J0IGVudW0gUGx1Z2luU3RhdHVzRW51bSB7XG4gIC8qKiBUaGUgcGx1Z2luIGlzIGN1cnJlbnRseSBhY3RpdmUuICovXG4gIEFjdGl2ZSA9ICdBQ1RJVkUnLFxuICAvKiogVGhlIHBsdWdpbiBpcyBhIGRyb3AtaW4gcGx1Z2luLiAqL1xuICBEcm9wSW4gPSAnRFJPUF9JTicsXG4gIC8qKiBUaGUgcGx1Z2luIGlzIGN1cnJlbnRseSBpbmFjdGl2ZS4gKi9cbiAgSW5hY3RpdmUgPSAnSU5BQ1RJVkUnLFxuICAvKiogVGhlIHBsdWdpbiBpcyBhIG11c3QtdXNlIHBsdWdpbi4gKi9cbiAgTXVzdFVzZSA9ICdNVVNUX1VTRScsXG4gIC8qKiBUaGUgcGx1Z2luIGlzIHRlY2huaWNhbGx5IGFjdGl2ZSBidXQgd2FzIHBhdXNlZCB3aGlsZSBsb2FkaW5nLiAqL1xuICBQYXVzZWQgPSAnUEFVU0VEJyxcbiAgLyoqIFRoZSBwbHVnaW4gd2FzIGFjdGl2ZSByZWNlbnRseS4gKi9cbiAgUmVjZW50bHlBY3RpdmUgPSAnUkVDRU5UTFlfQUNUSVZFJyxcbiAgLyoqIFRoZSBwbHVnaW4gaGFzIGFuIHVwZ3JhZGUgYXZhaWxhYmxlLiAqL1xuICBVcGdyYWRlID0gJ1VQR1JBREUnXG59XG5cbi8qKiBUaGUgcG9zdCB0eXBlICovXG5leHBvcnQgdHlwZSBQb3N0ID0gQ29udGVudE5vZGUgJiBEYXRhYmFzZUlkZW50aWZpZXIgJiBNZW51SXRlbUxpbmthYmxlICYgTm9kZSAmIE5vZGVXaXRoQXV0aG9yICYgTm9kZVdpdGhDb21tZW50cyAmIE5vZGVXaXRoQ29udGVudEVkaXRvciAmIE5vZGVXaXRoRXhjZXJwdCAmIE5vZGVXaXRoRmVhdHVyZWRJbWFnZSAmIE5vZGVXaXRoUmV2aXNpb25zICYgTm9kZVdpdGhUZW1wbGF0ZSAmIE5vZGVXaXRoVGl0bGUgJiBOb2RlV2l0aFRyYWNrYmFja3MgJiBQcmV2aWV3YWJsZSAmIFVuaWZvcm1SZXNvdXJjZUlkZW50aWZpYWJsZSAmIHtcbiAgX190eXBlbmFtZT86ICdQb3N0JztcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgTm9kZVdpdGhBdXRob3IgdHlwZSBhbmQgdGhlIFVzZXIgdHlwZSAqL1xuICBhdXRob3I/OiBNYXliZTxOb2RlV2l0aEF1dGhvclRvVXNlckNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBkYXRhYmFzZSBpZGVudGlmaWVyIG9mIHRoZSBhdXRob3Igb2YgdGhlIG5vZGUgKi9cbiAgYXV0aG9yRGF0YWJhc2VJZD86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgZ2xvYmFsbHkgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGF1dGhvciBvZiB0aGUgbm9kZSAqL1xuICBhdXRob3JJZD86IE1heWJlPFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgUG9zdCB0eXBlIGFuZCB0aGUgY2F0ZWdvcnkgdHlwZSAqL1xuICBjYXRlZ29yaWVzPzogTWF5YmU8UG9zdFRvQ2F0ZWdvcnlDb25uZWN0aW9uPjtcbiAgLyoqIFRoZSBudW1iZXIgb2YgY29tbWVudHMuIEV2ZW4gdGhvdWdoIFdQR3JhcGhRTCBkZW5vdGVzIHRoaXMgZmllbGQgYXMgYW4gaW50ZWdlciwgaW4gV29yZFByZXNzIHRoaXMgZmllbGQgc2hvdWxkIGJlIHNhdmVkIGFzIGEgbnVtZXJpYyBzdHJpbmcgZm9yIGNvbXBhdGliaWxpdHkuICovXG4gIGNvbW1lbnRDb3VudD86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBXaGV0aGVyIHRoZSBjb21tZW50cyBhcmUgb3BlbiBvciBjbG9zZWQgZm9yIHRoaXMgcGFydGljdWxhciBwb3N0LiAqL1xuICBjb21tZW50U3RhdHVzPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgUG9zdCB0eXBlIGFuZCB0aGUgQ29tbWVudCB0eXBlICovXG4gIGNvbW1lbnRzPzogTWF5YmU8UG9zdFRvQ29tbWVudENvbm5lY3Rpb24+O1xuICAvKiogVGhlIGNvbnRlbnQgb2YgdGhlIHBvc3QuICovXG4gIGNvbnRlbnQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBDb250ZW50Tm9kZSB0eXBlIGFuZCB0aGUgQ29udGVudFR5cGUgdHlwZSAqL1xuICBjb250ZW50VHlwZT86IE1heWJlPENvbnRlbnROb2RlVG9Db250ZW50VHlwZUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBuYW1lIG9mIHRoZSBDb250ZW50IFR5cGUgdGhlIG5vZGUgYmVsb25ncyB0byAqL1xuICBjb250ZW50VHlwZU5hbWU6IFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXTtcbiAgLyoqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBzdG9yZWQgaW4gdGhlIGRhdGFiYXNlICovXG4gIGRhdGFiYXNlSWQ6IFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXTtcbiAgLyoqIFBvc3QgcHVibGlzaGluZyBkYXRlLiAqL1xuICBkYXRlPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBwdWJsaXNoaW5nIGRhdGUgc2V0IGluIEdNVC4gKi9cbiAgZGF0ZUdtdD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgZGVzaXJlZCBzbHVnIG9mIHRoZSBwb3N0ICovXG4gIGRlc2lyZWRTbHVnPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIElmIGEgdXNlciBoYXMgZWRpdGVkIHRoZSBub2RlIHdpdGhpbiB0aGUgcGFzdCAxNSBzZWNvbmRzLCB0aGlzIHdpbGwgcmV0dXJuIHRoZSB1c2VyIHRoYXQgbGFzdCBlZGl0ZWQuIE51bGwgaWYgdGhlIGVkaXQgbG9jayBkb2VzbiYjMDM5O3QgZXhpc3Qgb3IgaXMgZ3JlYXRlciB0aGFuIDE1IHNlY29uZHMgKi9cbiAgZWRpdGluZ0xvY2tlZEJ5PzogTWF5YmU8Q29udGVudE5vZGVUb0VkaXRMb2NrQ29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIFJTUyBlbmNsb3N1cmUgZm9yIHRoZSBvYmplY3QgKi9cbiAgZW5jbG9zdXJlPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgQ29udGVudE5vZGUgdHlwZSBhbmQgdGhlIEVucXVldWVkU2NyaXB0IHR5cGUgKi9cbiAgZW5xdWV1ZWRTY3JpcHRzPzogTWF5YmU8Q29udGVudE5vZGVUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvbj47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIENvbnRlbnROb2RlIHR5cGUgYW5kIHRoZSBFbnF1ZXVlZFN0eWxlc2hlZXQgdHlwZSAqL1xuICBlbnF1ZXVlZFN0eWxlc2hlZXRzPzogTWF5YmU8Q29udGVudE5vZGVUb0VucXVldWVkU3R5bGVzaGVldENvbm5lY3Rpb24+O1xuICAvKiogVGhlIGV4Y2VycHQgb2YgdGhlIHBvc3QuICovXG4gIGV4Y2VycHQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBOb2RlV2l0aEZlYXR1cmVkSW1hZ2UgdHlwZSBhbmQgdGhlIE1lZGlhSXRlbSB0eXBlICovXG4gIGZlYXR1cmVkSW1hZ2U/OiBNYXliZTxOb2RlV2l0aEZlYXR1cmVkSW1hZ2VUb01lZGlhSXRlbUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBkYXRhYmFzZSBpZGVudGlmaWVyIGZvciB0aGUgZmVhdHVyZWQgaW1hZ2Ugbm9kZSBhc3NpZ25lZCB0byB0aGUgY29udGVudCBub2RlICovXG4gIGZlYXR1cmVkSW1hZ2VEYXRhYmFzZUlkPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIEdsb2JhbGx5IHVuaXF1ZSBJRCBvZiB0aGUgZmVhdHVyZWQgaW1hZ2UgYXNzaWduZWQgdG8gdGhlIG5vZGUgKi9cbiAgZmVhdHVyZWRJbWFnZUlkPzogTWF5YmU8U2NhbGFyc1snSUQnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGdsb2JhbCB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBwb3N0LiBUaGlzIGN1cnJlbnRseSBtYXRjaGVzIHRoZSB2YWx1ZSBzdG9yZWQgaW4gV1BfUG9zdC0mZ3Q7Z3VpZCBhbmQgdGhlIGd1aWQgY29sdW1uIGluIHRoZSAmcXVvdDtwb3N0X29iamVjdHMmcXVvdDsgZGF0YWJhc2UgdGFibGUuICovXG4gIGd1aWQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBwb3N0IG9iamVjdC4gKi9cbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddO1xuICAvKiogV2hldGhlciB0aGUgbm9kZSBpcyBhIENvbnRlbnQgTm9kZSAqL1xuICBpc0NvbnRlbnROb2RlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hldGhlciB0aGUgb2JqZWN0IGlzIGEgbm9kZSBpbiB0aGUgcHJldmlldyBzdGF0ZSAqL1xuICBpc1ByZXZpZXc/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdGhlIG9iamVjdCBpcyByZXN0cmljdGVkIGZyb20gdGhlIGN1cnJlbnQgdmlld2VyICovXG4gIGlzUmVzdHJpY3RlZD86IE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J10+O1xuICAvKiogVHJ1ZSBpZiB0aGUgbm9kZSBpcyBhIHJldmlzaW9uIG9mIGFub3RoZXIgbm9kZSAqL1xuICBpc1JldmlzaW9uPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBXaGV0aGVyIHRoaXMgcGFnZSBpcyBzdGlja3kgKi9cbiAgaXNTdGlja3k6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGV0aGVyIHRoZSBub2RlIGlzIGEgVGVybSAqL1xuICBpc1Rlcm1Ob2RlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogVGhlIHVzZXIgdGhhdCBtb3N0IHJlY2VudGx5IGVkaXRlZCB0aGUgbm9kZSAqL1xuICBsYXN0RWRpdGVkQnk/OiBNYXliZTxDb250ZW50Tm9kZVRvRWRpdExhc3RDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgcGVybWFsaW5rIG9mIHRoZSBwb3N0ICovXG4gIGxpbms/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGxvY2FsIG1vZGlmaWVkIHRpbWUgZm9yIGEgcG9zdC4gSWYgYSBwb3N0IHdhcyByZWNlbnRseSB1cGRhdGVkIHRoZSBtb2RpZmllZCBmaWVsZCB3aWxsIGNoYW5nZSB0byBtYXRjaCB0aGUgY29ycmVzcG9uZGluZyB0aW1lLiAqL1xuICBtb2RpZmllZD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgR01UIG1vZGlmaWVkIHRpbWUgZm9yIGEgcG9zdC4gSWYgYSBwb3N0IHdhcyByZWNlbnRseSB1cGRhdGVkIHRoZSBtb2RpZmllZCBmaWVsZCB3aWxsIGNoYW5nZSB0byBtYXRjaCB0aGUgY29ycmVzcG9uZGluZyB0aW1lIGluIEdNVC4gKi9cbiAgbW9kaWZpZWRHbXQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hldGhlciB0aGUgcGluZ3MgYXJlIG9wZW4gb3IgY2xvc2VkIGZvciB0aGlzIHBhcnRpY3VsYXIgcG9zdC4gKi9cbiAgcGluZ1N0YXR1cz86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBVUkxzIHRoYXQgaGF2ZSBiZWVuIHBpbmdlZC4gKi9cbiAgcGluZ2VkPzogTWF5YmU8QXJyYXk8TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPj4+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBQb3N0IHR5cGUgYW5kIHRoZSBwb3N0Rm9ybWF0IHR5cGUgKi9cbiAgcG9zdEZvcm1hdHM/OiBNYXliZTxQb3N0VG9Qb3N0Rm9ybWF0Q29ubmVjdGlvbj47XG4gIC8qKlxuICAgKiBUaGUgaWQgZmllbGQgbWF0Y2hlcyB0aGUgV1BfUG9zdC0mZ3Q7SUQgZmllbGQuXG4gICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgdGhlIGRhdGFiYXNlSWQgZmllbGRcbiAgICovXG4gIHBvc3RJZDogU2NhbGFyc1snSW50J11bJ291dHB1dCddO1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBQb3N0IHR5cGUgYW5kIHRoZSBwb3N0IHR5cGUgKi9cbiAgcHJldmlldz86IE1heWJlPFBvc3RUb1ByZXZpZXdDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgZGF0YWJhc2UgaWQgb2YgdGhlIHByZXZpZXcgbm9kZSAqL1xuICBwcmV2aWV3UmV2aXNpb25EYXRhYmFzZUlkPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdGhlIG9iamVjdCBpcyBhIG5vZGUgaW4gdGhlIHByZXZpZXcgc3RhdGUgKi9cbiAgcHJldmlld1JldmlzaW9uSWQ/OiBNYXliZTxTY2FsYXJzWydJRCddWydvdXRwdXQnXT47XG4gIC8qKiBJZiB0aGUgY3VycmVudCBub2RlIGlzIGEgcmV2aXNpb24sIHRoaXMgZmllbGQgZXhwb3NlcyB0aGUgbm9kZSB0aGlzIGlzIGEgcmV2aXNpb24gb2YuIFJldHVybnMgbnVsbCBpZiB0aGUgbm9kZSBpcyBub3QgYSByZXZpc2lvbiBvZiBhbm90aGVyIG5vZGUuICovXG4gIHJldmlzaW9uT2Y/OiBNYXliZTxOb2RlV2l0aFJldmlzaW9uc1RvQ29udGVudE5vZGVDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFBvc3QgdHlwZSBhbmQgdGhlIHBvc3QgdHlwZSAqL1xuICByZXZpc2lvbnM/OiBNYXliZTxQb3N0VG9SZXZpc2lvbkNvbm5lY3Rpb24+O1xuICAvKiogVGhlIHVyaSBzbHVnIGZvciB0aGUgcG9zdC4gVGhpcyBpcyBlcXVpdmFsZW50IHRvIHRoZSBXUF9Qb3N0LSZndDtwb3N0X25hbWUgZmllbGQgYW5kIHRoZSBwb3N0X25hbWUgY29sdW1uIGluIHRoZSBkYXRhYmFzZSBmb3IgdGhlICZxdW90O3Bvc3Rfb2JqZWN0cyZxdW90OyB0YWJsZS4gKi9cbiAgc2x1Zz86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgY3VycmVudCBzdGF0dXMgb2YgdGhlIG9iamVjdCAqL1xuICBzdGF0dXM/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBQb3N0IHR5cGUgYW5kIHRoZSB0YWcgdHlwZSAqL1xuICB0YWdzPzogTWF5YmU8UG9zdFRvVGFnQ29ubmVjdGlvbj47XG4gIC8qKiBUaGUgdGVtcGxhdGUgYXNzaWduZWQgdG8gdGhlIG5vZGUgKi9cbiAgdGVtcGxhdGU/OiBNYXliZTxDb250ZW50VGVtcGxhdGU+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBQb3N0IHR5cGUgYW5kIHRoZSBUZXJtTm9kZSB0eXBlICovXG4gIHRlcm1zPzogTWF5YmU8UG9zdFRvVGVybU5vZGVDb25uZWN0aW9uPjtcbiAgLyoqIFRoZSB0aXRsZSBvZiB0aGUgcG9zdC4gVGhpcyBpcyBjdXJyZW50bHkganVzdCB0aGUgcmF3IHRpdGxlLiBBbiBhbWVuZG1lbnQgdG8gc3VwcG9ydCByZW5kZXJlZCB0aXRsZSBuZWVkcyB0byBiZSBtYWRlLiAqL1xuICB0aXRsZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBVUkxzIHF1ZXVlZCB0byBiZSBwaW5nZWQuICovXG4gIHRvUGluZz86IE1heWJlPEFycmF5PE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT4+PjtcbiAgLyoqIFRoZSB1bmlxdWUgcmVzb3VyY2UgaWRlbnRpZmllciBwYXRoICovXG4gIHVyaT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG5cbi8qKiBUaGUgcG9zdCB0eXBlICovXG5leHBvcnQgdHlwZSBQb3N0Q2F0ZWdvcmllc0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIHdoZXJlPzogSW5wdXRNYXliZTxQb3N0VG9DYXRlZ29yeUNvbm5lY3Rpb25XaGVyZUFyZ3M+O1xufTtcblxuXG4vKiogVGhlIHBvc3QgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUG9zdENvbW1lbnRzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPFBvc3RUb0NvbW1lbnRDb25uZWN0aW9uV2hlcmVBcmdzPjtcbn07XG5cblxuLyoqIFRoZSBwb3N0IHR5cGUgKi9cbmV4cG9ydCB0eXBlIFBvc3RDb250ZW50QXJncyA9IHtcbiAgZm9ybWF0PzogSW5wdXRNYXliZTxQb3N0T2JqZWN0RmllbGRGb3JtYXRFbnVtPjtcbn07XG5cblxuLyoqIFRoZSBwb3N0IHR5cGUgKi9cbmV4cG9ydCB0eXBlIFBvc3RFbnF1ZXVlZFNjcmlwdHNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xufTtcblxuXG4vKiogVGhlIHBvc3QgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUG9zdEVucXVldWVkU3R5bGVzaGVldHNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xufTtcblxuXG4vKiogVGhlIHBvc3QgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUG9zdEV4Y2VycHRBcmdzID0ge1xuICBmb3JtYXQ/OiBJbnB1dE1heWJlPFBvc3RPYmplY3RGaWVsZEZvcm1hdEVudW0+O1xufTtcblxuXG4vKiogVGhlIHBvc3QgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUG9zdFBvc3RGb3JtYXRzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPFBvc3RUb1Bvc3RGb3JtYXRDb25uZWN0aW9uV2hlcmVBcmdzPjtcbn07XG5cblxuLyoqIFRoZSBwb3N0IHR5cGUgKi9cbmV4cG9ydCB0eXBlIFBvc3RSZXZpc2lvbnNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICB3aGVyZT86IElucHV0TWF5YmU8UG9zdFRvUmV2aXNpb25Db25uZWN0aW9uV2hlcmVBcmdzPjtcbn07XG5cblxuLyoqIFRoZSBwb3N0IHR5cGUgKi9cbmV4cG9ydCB0eXBlIFBvc3RUYWdzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPFBvc3RUb1RhZ0Nvbm5lY3Rpb25XaGVyZUFyZ3M+O1xufTtcblxuXG4vKiogVGhlIHBvc3QgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUG9zdFRlcm1zQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPFBvc3RUb1Rlcm1Ob2RlQ29ubmVjdGlvbldoZXJlQXJncz47XG59O1xuXG5cbi8qKiBUaGUgcG9zdCB0eXBlICovXG5leHBvcnQgdHlwZSBQb3N0VGl0bGVBcmdzID0ge1xuICBmb3JtYXQ/OiBJbnB1dE1heWJlPFBvc3RPYmplY3RGaWVsZEZvcm1hdEVudW0+O1xufTtcblxuLyoqIFNldCByZWxhdGlvbnNoaXBzIGJldHdlZW4gdGhlIHBvc3QgdG8gY2F0ZWdvcmllcyAqL1xuZXhwb3J0IHR5cGUgUG9zdENhdGVnb3JpZXNJbnB1dCA9IHtcbiAgLyoqIElmIHRydWUsIHRoaXMgd2lsbCBhcHBlbmQgdGhlIGNhdGVnb3J5IHRvIGV4aXN0aW5nIHJlbGF0ZWQgY2F0ZWdvcmllcy4gSWYgZmFsc2UsIHRoaXMgd2lsbCByZXBsYWNlIGV4aXN0aW5nIHJlbGF0aW9uc2hpcHMuIERlZmF1bHQgdHJ1ZS4gKi9cbiAgYXBwZW5kPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIGlucHV0IGxpc3Qgb2YgaXRlbXMgdG8gc2V0LiAqL1xuICBub2Rlcz86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxQb3N0Q2F0ZWdvcmllc05vZGVJbnB1dD4+Pjtcbn07XG5cbi8qKiBMaXN0IG9mIGNhdGVnb3JpZXMgdG8gY29ubmVjdCB0aGUgcG9zdCB0by4gSWYgYW4gSUQgaXMgc2V0LCBpdCB3aWxsIGJlIHVzZWQgdG8gY3JlYXRlIHRoZSBjb25uZWN0aW9uLiBJZiBub3QsIGl0IHdpbGwgbG9vayBmb3IgYSBzbHVnLiBJZiBuZWl0aGVyIGFyZSB2YWxpZCBleGlzdGluZyB0ZXJtcywgYW5kIHRoZSBzaXRlIGlzIGNvbmZpZ3VyZWQgdG8gYWxsb3cgdGVybXMgdG8gYmUgY3JlYXRlZCBkdXJpbmcgcG9zdCBtdXRhdGlvbnMsIGEgdGVybSB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcgdGhlIE5hbWUgaWYgaXQgZXhpc3RzIGluIHRoZSBpbnB1dCwgdGhlbiBmYWxsYmFjayB0byB0aGUgc2x1ZyBpZiBpdCBleGlzdHMuICovXG5leHBvcnQgdHlwZSBQb3N0Q2F0ZWdvcmllc05vZGVJbnB1dCA9IHtcbiAgLyoqIFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgY2F0ZWdvcnkuIFRoaXMgZmllbGQgaXMgdXNlZCB0byBzZXQgYSBkZXNjcmlwdGlvbiBvZiB0aGUgY2F0ZWdvcnkgaWYgYSBuZXcgb25lIGlzIGNyZWF0ZWQgZHVyaW5nIHRoZSBtdXRhdGlvbi4gKi9cbiAgZGVzY3JpcHRpb24/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBJRCBvZiB0aGUgY2F0ZWdvcnkuIElmIHByZXNlbnQsIHRoaXMgd2lsbCBiZSB1c2VkIHRvIGNvbm5lY3QgdG8gdGhlIHBvc3QuIElmIG5vIGV4aXN0aW5nIGNhdGVnb3J5IGV4aXN0cyB3aXRoIHRoaXMgSUQsIG5vIGNvbm5lY3Rpb24gd2lsbCBiZSBtYWRlLiAqL1xuICBpZD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgbmFtZSBvZiB0aGUgY2F0ZWdvcnkuIFRoaXMgZmllbGQgaXMgdXNlZCB0byBjcmVhdGUgYSBuZXcgdGVybSwgaWYgdGVybSBjcmVhdGlvbiBpcyBlbmFibGVkIGluIG5lc3RlZCBtdXRhdGlvbnMsIGFuZCBpZiBvbmUgZG9lcyBub3QgYWxyZWFkeSBleGlzdCB3aXRoIHRoZSBwcm92aWRlZCBzbHVnIG9yIElEIG9yIGlmIGEgc2x1ZyBvciBJRCBpcyBub3QgcHJvdmlkZWQuIElmIG5vIG5hbWUgaXMgaW5jbHVkZWQgYW5kIGEgdGVybSBpcyBjcmVhdGVkLCB0aGUgY3JlYXRpb24gd2lsbCBmYWxsYmFjayB0byB0aGUgc2x1ZyBmaWVsZC4gKi9cbiAgbmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIHNsdWcgb2YgdGhlIGNhdGVnb3J5LiBJZiBubyBJRCBpcyBwcmVzZW50LCB0aGlzIGZpZWxkIHdpbGwgYmUgdXNlZCB0byBtYWtlIGEgY29ubmVjdGlvbi4gSWYgbm8gZXhpc3RpbmcgdGVybSBleGlzdHMgd2l0aCB0aGlzIHNsdWcsIHRoaXMgZmllbGQgd2lsbCBiZSB1c2VkIGFzIGEgZmFsbGJhY2sgdG8gdGhlIE5hbWUgZmllbGQgd2hlbiBjcmVhdGluZyBhIG5ldyB0ZXJtIHRvIGNvbm5lY3QgdG8sIGlmIHRlcm0gY3JlYXRpb24gaXMgZW5hYmxlZCBhcyBhIG5lc3RlZCBtdXRhdGlvbi4gKi9cbiAgc2x1Zz86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gdG8gcG9zdCBOb2RlcyAqL1xuZXhwb3J0IHR5cGUgUG9zdENvbm5lY3Rpb24gPSB7XG4gIC8qKiBBIGxpc3Qgb2YgZWRnZXMgKHJlbGF0aW9uYWwgY29udGV4dCkgYmV0d2VlbiBSb290UXVlcnkgYW5kIGNvbm5lY3RlZCBwb3N0IE5vZGVzICovXG4gIGVkZ2VzOiBBcnJheTxQb3N0Q29ubmVjdGlvbkVkZ2U+O1xuICAvKiogQSBsaXN0IG9mIGNvbm5lY3RlZCBwb3N0IE5vZGVzICovXG4gIG5vZGVzOiBBcnJheTxQb3N0PjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogUG9zdENvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBFZGdlIGJldHdlZW4gYSBOb2RlIGFuZCBhIGNvbm5lY3RlZCBwb3N0ICovXG5leHBvcnQgdHlwZSBQb3N0Q29ubmVjdGlvbkVkZ2UgPSB7XG4gIC8qKiBPcGFxdWUgcmVmZXJlbmNlIHRvIHRoZSBub2RlcyBwb3NpdGlvbiBpbiB0aGUgY29ubmVjdGlvbi4gVmFsdWUgY2FuIGJlIHVzZWQgd2l0aCBwYWdpbmF0aW9uIGFyZ3MuICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgY29ubmVjdGVkIHBvc3QgTm9kZSAqL1xuICBub2RlOiBQb3N0O1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgY29ubmVjdGVkIFBvc3RDb25uZWN0aW9uRWRnZSAqL1xuZXhwb3J0IHR5cGUgUG9zdENvbm5lY3Rpb25QYWdlSW5mbyA9IHtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBUaGUgcG9zdEZvcm1hdCB0eXBlICovXG5leHBvcnQgdHlwZSBQb3N0Rm9ybWF0ID0gRGF0YWJhc2VJZGVudGlmaWVyICYgTWVudUl0ZW1MaW5rYWJsZSAmIE5vZGUgJiBUZXJtTm9kZSAmIFVuaWZvcm1SZXNvdXJjZUlkZW50aWZpYWJsZSAmIHtcbiAgX190eXBlbmFtZT86ICdQb3N0Rm9ybWF0JztcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgUG9zdEZvcm1hdCB0eXBlIGFuZCB0aGUgQ29udGVudE5vZGUgdHlwZSAqL1xuICBjb250ZW50Tm9kZXM/OiBNYXliZTxQb3N0Rm9ybWF0VG9Db250ZW50Tm9kZUNvbm5lY3Rpb24+O1xuICAvKiogVGhlIG51bWJlciBvZiBvYmplY3RzIGNvbm5lY3RlZCB0byB0aGUgb2JqZWN0ICovXG4gIGNvdW50PzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBzdG9yZWQgaW4gdGhlIGRhdGFiYXNlICovXG4gIGRhdGFiYXNlSWQ6IFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXTtcbiAgLyoqIFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgb2JqZWN0ICovXG4gIGRlc2NyaXB0aW9uPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgVGVybU5vZGUgdHlwZSBhbmQgdGhlIEVucXVldWVkU2NyaXB0IHR5cGUgKi9cbiAgZW5xdWV1ZWRTY3JpcHRzPzogTWF5YmU8VGVybU5vZGVUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvbj47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFRlcm1Ob2RlIHR5cGUgYW5kIHRoZSBFbnF1ZXVlZFN0eWxlc2hlZXQgdHlwZSAqL1xuICBlbnF1ZXVlZFN0eWxlc2hlZXRzPzogTWF5YmU8VGVybU5vZGVUb0VucXVldWVkU3R5bGVzaGVldENvbm5lY3Rpb24+O1xuICAvKiogVGhlIHVuaXF1ZSByZXNvdXJjZSBpZGVudGlmaWVyIHBhdGggKi9cbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddO1xuICAvKiogV2hldGhlciB0aGUgbm9kZSBpcyBhIENvbnRlbnQgTm9kZSAqL1xuICBpc0NvbnRlbnROb2RlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hldGhlciB0aGUgb2JqZWN0IGlzIHJlc3RyaWN0ZWQgZnJvbSB0aGUgY3VycmVudCB2aWV3ZXIgKi9cbiAgaXNSZXN0cmljdGVkPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBXaGV0aGVyIHRoZSBub2RlIGlzIGEgVGVybSAqL1xuICBpc1Rlcm1Ob2RlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogVGhlIGxpbmsgdG8gdGhlIHRlcm0gKi9cbiAgbGluaz86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaHVtYW4gZnJpZW5kbHkgbmFtZSBvZiB0aGUgb2JqZWN0LiAqL1xuICBuYW1lPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqXG4gICAqIFRoZSBpZCBmaWVsZCBtYXRjaGVzIHRoZSBXUF9Qb3N0LSZndDtJRCBmaWVsZC5cbiAgICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBpbiBmYXZvciBvZiBkYXRhYmFzZUlkXG4gICAqL1xuICBwb3N0Rm9ybWF0SWQ/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBQb3N0Rm9ybWF0IHR5cGUgYW5kIHRoZSBwb3N0IHR5cGUgKi9cbiAgcG9zdHM/OiBNYXliZTxQb3N0Rm9ybWF0VG9Qb3N0Q29ubmVjdGlvbj47XG4gIC8qKiBBbiBhbHBoYW51bWVyaWMgaWRlbnRpZmllciBmb3IgdGhlIG9iamVjdCB1bmlxdWUgdG8gaXRzIHR5cGUuICovXG4gIHNsdWc/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBQb3N0Rm9ybWF0IHR5cGUgYW5kIHRoZSBUYXhvbm9teSB0eXBlICovXG4gIHRheG9ub215PzogTWF5YmU8UG9zdEZvcm1hdFRvVGF4b25vbXlDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbmFtZSBvZiB0aGUgdGF4b25vbXkgdGhhdCB0aGUgb2JqZWN0IGlzIGFzc29jaWF0ZWQgd2l0aCAqL1xuICB0YXhvbm9teU5hbWU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIElEIG9mIHRoZSB0ZXJtIGdyb3VwIHRoYXQgdGhpcyB0ZXJtIG9iamVjdCBiZWxvbmdzIHRvICovXG4gIHRlcm1Hcm91cElkPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSB0YXhvbm9teSBJRCB0aGF0IHRoZSBvYmplY3QgaXMgYXNzb2NpYXRlZCB3aXRoICovXG4gIHRlcm1UYXhvbm9teUlkPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSB1bmlxdWUgcmVzb3VyY2UgaWRlbnRpZmllciBwYXRoICovXG4gIHVyaT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG5cbi8qKiBUaGUgcG9zdEZvcm1hdCB0eXBlICovXG5leHBvcnQgdHlwZSBQb3N0Rm9ybWF0Q29udGVudE5vZGVzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPFBvc3RGb3JtYXRUb0NvbnRlbnROb2RlQ29ubmVjdGlvbldoZXJlQXJncz47XG59O1xuXG5cbi8qKiBUaGUgcG9zdEZvcm1hdCB0eXBlICovXG5leHBvcnQgdHlwZSBQb3N0Rm9ybWF0RW5xdWV1ZWRTY3JpcHRzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbn07XG5cblxuLyoqIFRoZSBwb3N0Rm9ybWF0IHR5cGUgKi9cbmV4cG9ydCB0eXBlIFBvc3RGb3JtYXRFbnF1ZXVlZFN0eWxlc2hlZXRzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbn07XG5cblxuLyoqIFRoZSBwb3N0Rm9ybWF0IHR5cGUgKi9cbmV4cG9ydCB0eXBlIFBvc3RGb3JtYXRQb3N0c0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIHdoZXJlPzogSW5wdXRNYXliZTxQb3N0Rm9ybWF0VG9Qb3N0Q29ubmVjdGlvbldoZXJlQXJncz47XG59O1xuXG4vKiogQ29ubmVjdGlvbiB0byBwb3N0Rm9ybWF0IE5vZGVzICovXG5leHBvcnQgdHlwZSBQb3N0Rm9ybWF0Q29ubmVjdGlvbiA9IHtcbiAgLyoqIEEgbGlzdCBvZiBlZGdlcyAocmVsYXRpb25hbCBjb250ZXh0KSBiZXR3ZWVuIFJvb3RRdWVyeSBhbmQgY29ubmVjdGVkIHBvc3RGb3JtYXQgTm9kZXMgKi9cbiAgZWRnZXM6IEFycmF5PFBvc3RGb3JtYXRDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBBIGxpc3Qgb2YgY29ubmVjdGVkIHBvc3RGb3JtYXQgTm9kZXMgKi9cbiAgbm9kZXM6IEFycmF5PFBvc3RGb3JtYXQ+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBQb3N0Rm9ybWF0Q29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEVkZ2UgYmV0d2VlbiBhIE5vZGUgYW5kIGEgY29ubmVjdGVkIHBvc3RGb3JtYXQgKi9cbmV4cG9ydCB0eXBlIFBvc3RGb3JtYXRDb25uZWN0aW9uRWRnZSA9IHtcbiAgLyoqIE9wYXF1ZSByZWZlcmVuY2UgdG8gdGhlIG5vZGVzIHBvc2l0aW9uIGluIHRoZSBjb25uZWN0aW9uLiBWYWx1ZSBjYW4gYmUgdXNlZCB3aXRoIHBhZ2luYXRpb24gYXJncy4gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBjb25uZWN0ZWQgcG9zdEZvcm1hdCBOb2RlICovXG4gIG5vZGU6IFBvc3RGb3JtYXQ7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSBjb25uZWN0ZWQgUG9zdEZvcm1hdENvbm5lY3Rpb25FZGdlICovXG5leHBvcnQgdHlwZSBQb3N0Rm9ybWF0Q29ubmVjdGlvblBhZ2VJbmZvID0ge1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIFRoZSBUeXBlIG9mIElkZW50aWZpZXIgdXNlZCB0byBmZXRjaCBhIHNpbmdsZSByZXNvdXJjZS4gRGVmYXVsdCBpcyBJRC4gKi9cbmV4cG9ydCBlbnVtIFBvc3RGb3JtYXRJZFR5cGUge1xuICAvKiogVGhlIERhdGFiYXNlIElEIGZvciB0aGUgbm9kZSAqL1xuICBEYXRhYmFzZUlkID0gJ0RBVEFCQVNFX0lEJyxcbiAgLyoqIFRoZSBoYXNoZWQgR2xvYmFsIElEICovXG4gIElkID0gJ0lEJyxcbiAgLyoqIFRoZSBuYW1lIG9mIHRoZSBub2RlICovXG4gIE5hbWUgPSAnTkFNRScsXG4gIC8qKiBVcmwgZnJpZW5kbHkgbmFtZSBvZiB0aGUgbm9kZSAqL1xuICBTbHVnID0gJ1NMVUcnLFxuICAvKiogVGhlIFVSSSBmb3IgdGhlIG5vZGUgKi9cbiAgVXJpID0gJ1VSSSdcbn1cblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgUG9zdEZvcm1hdCB0eXBlIGFuZCB0aGUgQ29udGVudE5vZGUgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUG9zdEZvcm1hdFRvQ29udGVudE5vZGVDb25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIENvbnRlbnROb2RlQ29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdQb3N0Rm9ybWF0VG9Db250ZW50Tm9kZUNvbm5lY3Rpb24nO1xuICAvKiogRWRnZXMgZm9yIHRoZSBQb3N0Rm9ybWF0VG9Db250ZW50Tm9kZUNvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8UG9zdEZvcm1hdFRvQ29udGVudE5vZGVDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxDb250ZW50Tm9kZT47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFBvc3RGb3JtYXRUb0NvbnRlbnROb2RlQ29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEFuIGVkZ2UgaW4gYSBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBQb3N0Rm9ybWF0VG9Db250ZW50Tm9kZUNvbm5lY3Rpb25FZGdlID0gQ29udGVudE5vZGVDb25uZWN0aW9uRWRnZSAmIEVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnUG9zdEZvcm1hdFRvQ29udGVudE5vZGVDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogQ29udGVudE5vZGU7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtQb3N0Rm9ybWF0VG9Db250ZW50Tm9kZUNvbm5lY3Rpb24mcXVvdDsgKi9cbmV4cG9ydCB0eXBlIFBvc3RGb3JtYXRUb0NvbnRlbnROb2RlQ29ubmVjdGlvblBhZ2VJbmZvID0gQ29udGVudE5vZGVDb25uZWN0aW9uUGFnZUluZm8gJiBQYWdlSW5mbyAmIFdwUGFnZUluZm8gJiB7XG4gIF9fdHlwZW5hbWU/OiAnUG9zdEZvcm1hdFRvQ29udGVudE5vZGVDb25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIEFyZ3VtZW50cyBmb3IgZmlsdGVyaW5nIHRoZSBQb3N0Rm9ybWF0VG9Db250ZW50Tm9kZUNvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgUG9zdEZvcm1hdFRvQ29udGVudE5vZGVDb25uZWN0aW9uV2hlcmVBcmdzID0ge1xuICAvKiogVGhlIFR5cGVzIG9mIGNvbnRlbnQgdG8gZmlsdGVyICovXG4gIGNvbnRlbnRUeXBlcz86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxDb250ZW50VHlwZXNPZlBvc3RGb3JtYXRFbnVtPj4+O1xuICAvKiogRmlsdGVyIHRoZSBjb25uZWN0aW9uIGJhc2VkIG9uIGRhdGVzICovXG4gIGRhdGVRdWVyeT86IElucHV0TWF5YmU8RGF0ZVF1ZXJ5SW5wdXQ+O1xuICAvKiogVHJ1ZSBmb3Igb2JqZWN0cyB3aXRoIHBhc3N3b3JkczsgRmFsc2UgZm9yIG9iamVjdHMgd2l0aG91dCBwYXNzd29yZHM7IG51bGwgZm9yIGFsbCBvYmplY3RzIHdpdGggb3Igd2l0aG91dCBwYXNzd29yZHMgKi9cbiAgaGFzUGFzc3dvcmQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBTcGVjaWZpYyBkYXRhYmFzZSBJRCBvZiB0aGUgb2JqZWN0ICovXG4gIGlkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBJRHMgZm9yIHRoZSBvYmplY3RzIHRvIHJldHJpZXZlICovXG4gIGluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBHZXQgb2JqZWN0cyB3aXRoIGEgc3BlY2lmaWMgbWltZVR5cGUgcHJvcGVydHkgKi9cbiAgbWltZVR5cGU/OiBJbnB1dE1heWJlPE1pbWVUeXBlRW51bT47XG4gIC8qKiBTbHVnIC8gcG9zdF9uYW1lIG9mIHRoZSBvYmplY3QgKi9cbiAgbmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmeSBvYmplY3RzIHRvIHJldHJpZXZlLiBVc2Ugc2x1Z3MgKi9cbiAgbmFtZUluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogU3BlY2lmeSBJRHMgTk9UIHRvIHJldHJpZXZlLiBJZiB0aGlzIGlzIHVzZWQgaW4gdGhlIHNhbWUgcXVlcnkgYXMgXCJpblwiLCBpdCB3aWxsIGJlIGlnbm9yZWQgKi9cbiAgbm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFdoYXQgcGFyYW1ldGVyIHRvIHVzZSB0byBvcmRlciB0aGUgb2JqZWN0cyBieS4gKi9cbiAgb3JkZXJieT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxQb3N0T2JqZWN0c0Nvbm5lY3Rpb25PcmRlcmJ5SW5wdXQ+Pj47XG4gIC8qKiBVc2UgSUQgdG8gcmV0dXJuIG9ubHkgY2hpbGRyZW4uIFVzZSAwIHRvIHJldHVybiBvbmx5IHRvcC1sZXZlbCBpdGVtcyAqL1xuICBwYXJlbnQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmeSBvYmplY3RzIHdob3NlIHBhcmVudCBpcyBpbiBhbiBhcnJheSAqL1xuICBwYXJlbnRJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogU3BlY2lmeSBwb3N0cyB3aG9zZSBwYXJlbnQgaXMgbm90IGluIGFuIGFycmF5ICovXG4gIHBhcmVudE5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTaG93IHBvc3RzIHdpdGggYSBzcGVjaWZpYyBwYXNzd29yZC4gKi9cbiAgcGFzc3dvcmQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFNob3cgUG9zdHMgYmFzZWQgb24gYSBrZXl3b3JkIHNlYXJjaCAqL1xuICBzZWFyY2g/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFJldHJpZXZlIHBvc3RzIHdoZXJlIHBvc3Qgc3RhdHVzIGlzIGluIGFuIGFycmF5LiAqL1xuICBzdGF0aT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxQb3N0U3RhdHVzRW51bT4+PjtcbiAgLyoqIFNob3cgcG9zdHMgd2l0aCBhIHNwZWNpZmljIHN0YXR1cy4gKi9cbiAgc3RhdHVzPzogSW5wdXRNYXliZTxQb3N0U3RhdHVzRW51bT47XG4gIC8qKiBUaXRsZSBvZiB0aGUgb2JqZWN0ICovXG4gIHRpdGxlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBQb3N0Rm9ybWF0IHR5cGUgYW5kIHRoZSBwb3N0IHR5cGUgKi9cbmV4cG9ydCB0eXBlIFBvc3RGb3JtYXRUb1Bvc3RDb25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIFBvc3RDb25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ1Bvc3RGb3JtYXRUb1Bvc3RDb25uZWN0aW9uJztcbiAgLyoqIEVkZ2VzIGZvciB0aGUgUG9zdEZvcm1hdFRvUG9zdENvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8UG9zdEZvcm1hdFRvUG9zdENvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBub2RlcyBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZXM6IEFycmF5PFBvc3Q+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBQb3N0Rm9ybWF0VG9Qb3N0Q29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEFuIGVkZ2UgaW4gYSBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBQb3N0Rm9ybWF0VG9Qb3N0Q29ubmVjdGlvbkVkZ2UgPSBFZGdlICYgUG9zdENvbm5lY3Rpb25FZGdlICYge1xuICBfX3R5cGVuYW1lPzogJ1Bvc3RGb3JtYXRUb1Bvc3RDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogUG9zdDtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlICZxdW90O1Bvc3RGb3JtYXRUb1Bvc3RDb25uZWN0aW9uJnF1b3Q7ICovXG5leHBvcnQgdHlwZSBQb3N0Rm9ybWF0VG9Qb3N0Q29ubmVjdGlvblBhZ2VJbmZvID0gUGFnZUluZm8gJiBQb3N0Q29ubmVjdGlvblBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdQb3N0Rm9ybWF0VG9Qb3N0Q29ubmVjdGlvblBhZ2VJbmZvJztcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBBcmd1bWVudHMgZm9yIGZpbHRlcmluZyB0aGUgUG9zdEZvcm1hdFRvUG9zdENvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgUG9zdEZvcm1hdFRvUG9zdENvbm5lY3Rpb25XaGVyZUFyZ3MgPSB7XG4gIC8qKiBUaGUgdXNlciB0aGF0J3MgY29ubmVjdGVkIGFzIHRoZSBhdXRob3Igb2YgdGhlIG9iamVjdC4gVXNlIHRoZSB1c2VySWQgZm9yIHRoZSBhdXRob3Igb2JqZWN0LiAqL1xuICBhdXRob3I/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIEZpbmQgb2JqZWN0cyBjb25uZWN0ZWQgdG8gYXV0aG9yKHMpIGluIHRoZSBhcnJheSBvZiBhdXRob3IncyB1c2VySWRzICovXG4gIGF1dGhvckluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBGaW5kIG9iamVjdHMgY29ubmVjdGVkIHRvIHRoZSBhdXRob3IgYnkgdGhlIGF1dGhvcidzIG5pY2VuYW1lICovXG4gIGF1dGhvck5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEZpbmQgb2JqZWN0cyBOT1QgY29ubmVjdGVkIHRvIGF1dGhvcihzKSBpbiB0aGUgYXJyYXkgb2YgYXV0aG9yJ3MgdXNlcklkcyAqL1xuICBhdXRob3JOb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQ2F0ZWdvcnkgSUQgKi9cbiAgY2F0ZWdvcnlJZD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgY2F0ZWdvcnkgSURzLCB1c2VkIHRvIGRpc3BsYXkgb2JqZWN0cyBmcm9tIG9uZSBjYXRlZ29yeSBPUiBhbm90aGVyICovXG4gIGNhdGVnb3J5SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFVzZSBDYXRlZ29yeSBTbHVnICovXG4gIGNhdGVnb3J5TmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgY2F0ZWdvcnkgSURzLCB1c2VkIHRvIGRpc3BsYXkgb2JqZWN0cyBmcm9tIG9uZSBjYXRlZ29yeSBPUiBhbm90aGVyICovXG4gIGNhdGVnb3J5Tm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEZpbHRlciB0aGUgY29ubmVjdGlvbiBiYXNlZCBvbiBkYXRlcyAqL1xuICBkYXRlUXVlcnk/OiBJbnB1dE1heWJlPERhdGVRdWVyeUlucHV0PjtcbiAgLyoqIFRydWUgZm9yIG9iamVjdHMgd2l0aCBwYXNzd29yZHM7IEZhbHNlIGZvciBvYmplY3RzIHdpdGhvdXQgcGFzc3dvcmRzOyBudWxsIGZvciBhbGwgb2JqZWN0cyB3aXRoIG9yIHdpdGhvdXQgcGFzc3dvcmRzICovXG4gIGhhc1Bhc3N3b3JkPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmaWMgZGF0YWJhc2UgSUQgb2YgdGhlIG9iamVjdCAqL1xuICBpZD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgSURzIGZvciB0aGUgb2JqZWN0cyB0byByZXRyaWV2ZSAqL1xuICBpbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogR2V0IG9iamVjdHMgd2l0aCBhIHNwZWNpZmljIG1pbWVUeXBlIHByb3BlcnR5ICovXG4gIG1pbWVUeXBlPzogSW5wdXRNYXliZTxNaW1lVHlwZUVudW0+O1xuICAvKiogU2x1ZyAvIHBvc3RfbmFtZSBvZiB0aGUgb2JqZWN0ICovXG4gIG5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFNwZWNpZnkgb2JqZWN0cyB0byByZXRyaWV2ZS4gVXNlIHNsdWdzICovXG4gIG5hbWVJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNwZWNpZnkgSURzIE5PVCB0byByZXRyaWV2ZS4gSWYgdGhpcyBpcyB1c2VkIGluIHRoZSBzYW1lIHF1ZXJ5IGFzIFwiaW5cIiwgaXQgd2lsbCBiZSBpZ25vcmVkICovXG4gIG5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBXaGF0IHBhcmFtZXRlciB0byB1c2UgdG8gb3JkZXIgdGhlIG9iamVjdHMgYnkuICovXG4gIG9yZGVyYnk/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8UG9zdE9iamVjdHNDb25uZWN0aW9uT3JkZXJieUlucHV0Pj4+O1xuICAvKiogVXNlIElEIHRvIHJldHVybiBvbmx5IGNoaWxkcmVuLiBVc2UgMCB0byByZXR1cm4gb25seSB0b3AtbGV2ZWwgaXRlbXMgKi9cbiAgcGFyZW50PzogSW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPjtcbiAgLyoqIFNwZWNpZnkgb2JqZWN0cyB3aG9zZSBwYXJlbnQgaXMgaW4gYW4gYXJyYXkgKi9cbiAgcGFyZW50SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNwZWNpZnkgcG9zdHMgd2hvc2UgcGFyZW50IGlzIG5vdCBpbiBhbiBhcnJheSAqL1xuICBwYXJlbnROb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogU2hvdyBwb3N0cyB3aXRoIGEgc3BlY2lmaWMgcGFzc3dvcmQuICovXG4gIHBhc3N3b3JkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBTaG93IFBvc3RzIGJhc2VkIG9uIGEga2V5d29yZCBzZWFyY2ggKi9cbiAgc2VhcmNoPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBSZXRyaWV2ZSBwb3N0cyB3aGVyZSBwb3N0IHN0YXR1cyBpcyBpbiBhbiBhcnJheS4gKi9cbiAgc3RhdGk/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+Pj47XG4gIC8qKiBTaG93IHBvc3RzIHdpdGggYSBzcGVjaWZpYyBzdGF0dXMuICovXG4gIHN0YXR1cz86IElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+O1xuICAvKiogVGFnIFNsdWcgKi9cbiAgdGFnPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBVc2UgVGFnIElEICovXG4gIHRhZ0lkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiB0YWcgSURzLCB1c2VkIHRvIGRpc3BsYXkgb2JqZWN0cyBmcm9tIG9uZSB0YWcgT1IgYW5vdGhlciAqL1xuICB0YWdJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgdGFnIElEcywgdXNlZCB0byBkaXNwbGF5IG9iamVjdHMgZnJvbSBvbmUgdGFnIE9SIGFub3RoZXIgKi9cbiAgdGFnTm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIHRhZyBzbHVncywgdXNlZCB0byBkaXNwbGF5IG9iamVjdHMgZnJvbSBvbmUgdGFnIEFORCBhbm90aGVyICovXG4gIHRhZ1NsdWdBbmQ/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiB0YWcgc2x1Z3MsIHVzZWQgdG8gaW5jbHVkZSBvYmplY3RzIGluIEFOWSBzcGVjaWZpZWQgdGFncyAqL1xuICB0YWdTbHVnSW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBUaXRsZSBvZiB0aGUgb2JqZWN0ICovXG4gIHRpdGxlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBQb3N0Rm9ybWF0IHR5cGUgYW5kIHRoZSBUYXhvbm9teSB0eXBlICovXG5leHBvcnQgdHlwZSBQb3N0Rm9ybWF0VG9UYXhvbm9teUNvbm5lY3Rpb25FZGdlID0gRWRnZSAmIE9uZVRvT25lQ29ubmVjdGlvbiAmIFRheG9ub215Q29ubmVjdGlvbkVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnUG9zdEZvcm1hdFRvVGF4b25vbXlDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBPcGFxdWUgcmVmZXJlbmNlIHRvIHRoZSBub2RlcyBwb3NpdGlvbiBpbiB0aGUgY29ubmVjdGlvbi4gVmFsdWUgY2FuIGJlIHVzZWQgd2l0aCBwYWdpbmF0aW9uIGFyZ3MuICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgbm9kZSBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZTogVGF4b25vbXk7XG59O1xuXG4vKiogVGhlIFR5cGUgb2YgSWRlbnRpZmllciB1c2VkIHRvIGZldGNoIGEgc2luZ2xlIHJlc291cmNlLiBEZWZhdWx0IGlzIElELiAqL1xuZXhwb3J0IGVudW0gUG9zdElkVHlwZSB7XG4gIC8qKiBJZGVudGlmeSBhIHJlc291cmNlIGJ5IHRoZSBEYXRhYmFzZSBJRC4gKi9cbiAgRGF0YWJhc2VJZCA9ICdEQVRBQkFTRV9JRCcsXG4gIC8qKiBJZGVudGlmeSBhIHJlc291cmNlIGJ5IHRoZSAoaGFzaGVkKSBHbG9iYWwgSUQuICovXG4gIElkID0gJ0lEJyxcbiAgLyoqIElkZW50aWZ5IGEgcmVzb3VyY2UgYnkgdGhlIHNsdWcuIEF2YWlsYWJsZSB0byBub24taGllcmFyY2hjaWFsIFR5cGVzIHdoZXJlIHRoZSBzbHVnIGlzIGEgdW5pcXVlIGlkZW50aWZpZXIuICovXG4gIFNsdWcgPSAnU0xVRycsXG4gIC8qKiBJZGVudGlmeSBhIHJlc291cmNlIGJ5IHRoZSBVUkkuICovXG4gIFVyaSA9ICdVUkknXG59XG5cbi8qKiBUaGUgZm9ybWF0IG9mIHBvc3QgZmllbGQgZGF0YS4gKi9cbmV4cG9ydCBlbnVtIFBvc3RPYmplY3RGaWVsZEZvcm1hdEVudW0ge1xuICAvKiogUHJvdmlkZSB0aGUgZmllbGQgdmFsdWUgZGlyZWN0bHkgZnJvbSBkYXRhYmFzZS4gTnVsbCBvbiB1bmF1dGhlbnRpY2F0ZWQgcmVxdWVzdHMuICovXG4gIFJhdyA9ICdSQVcnLFxuICAvKiogUHJvdmlkZSB0aGUgZmllbGQgdmFsdWUgYXMgcmVuZGVyZWQgYnkgV29yZFByZXNzLiBEZWZhdWx0LiAqL1xuICBSZW5kZXJlZCA9ICdSRU5ERVJFRCdcbn1cblxuLyoqIFRoZSBjb2x1bW4gdG8gdXNlIHdoZW4gZmlsdGVyaW5nIGJ5IGRhdGUgKi9cbmV4cG9ydCBlbnVtIFBvc3RPYmplY3RzQ29ubmVjdGlvbkRhdGVDb2x1bW5FbnVtIHtcbiAgLyoqIFRoZSBkYXRlIHRoZSBjb21tZW50IHdhcyBjcmVhdGVkIGluIGxvY2FsIHRpbWUuICovXG4gIERhdGUgPSAnREFURScsXG4gIC8qKiBUaGUgbW9zdCByZWNlbnQgbW9kaWZpY2F0aW9uIGRhdGUgb2YgdGhlIGNvbW1lbnQuICovXG4gIE1vZGlmaWVkID0gJ01PRElGSUVEJ1xufVxuXG4vKiogRmllbGQgdG8gb3JkZXIgdGhlIGNvbm5lY3Rpb24gYnkgKi9cbmV4cG9ydCBlbnVtIFBvc3RPYmplY3RzQ29ubmVjdGlvbk9yZGVyYnlFbnVtIHtcbiAgLyoqIE9yZGVyIGJ5IGF1dGhvciAqL1xuICBBdXRob3IgPSAnQVVUSE9SJyxcbiAgLyoqIE9yZGVyIGJ5IHRoZSBudW1iZXIgb2YgY29tbWVudHMgaXQgaGFzIGFjcXVpcmVkICovXG4gIENvbW1lbnRDb3VudCA9ICdDT01NRU5UX0NPVU5UJyxcbiAgLyoqIE9yZGVyIGJ5IHB1Ymxpc2ggZGF0ZSAqL1xuICBEYXRlID0gJ0RBVEUnLFxuICAvKiogUHJlc2VydmUgdGhlIElEIG9yZGVyIGdpdmVuIGluIHRoZSBJTiBhcnJheSAqL1xuICBJbiA9ICdJTicsXG4gIC8qKiBPcmRlciBieSB0aGUgbWVudSBvcmRlciB2YWx1ZSAqL1xuICBNZW51T3JkZXIgPSAnTUVOVV9PUkRFUicsXG4gIC8qKiBPcmRlciBieSBsYXN0IG1vZGlmaWVkIGRhdGUgKi9cbiAgTW9kaWZpZWQgPSAnTU9ESUZJRUQnLFxuICAvKiogUHJlc2VydmUgc2x1ZyBvcmRlciBnaXZlbiBpbiB0aGUgTkFNRV9JTiBhcnJheSAqL1xuICBOYW1lSW4gPSAnTkFNRV9JTicsXG4gIC8qKiBPcmRlciBieSBwYXJlbnQgSUQgKi9cbiAgUGFyZW50ID0gJ1BBUkVOVCcsXG4gIC8qKiBPcmRlciBieSBzbHVnICovXG4gIFNsdWcgPSAnU0xVRycsXG4gIC8qKiBPcmRlciBieSB0aXRsZSAqL1xuICBUaXRsZSA9ICdUSVRMRSdcbn1cblxuLyoqIE9wdGlvbnMgZm9yIG9yZGVyaW5nIHRoZSBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBQb3N0T2JqZWN0c0Nvbm5lY3Rpb25PcmRlcmJ5SW5wdXQgPSB7XG4gIC8qKiBUaGUgZmllbGQgdG8gb3JkZXIgdGhlIGNvbm5lY3Rpb24gYnkgKi9cbiAgZmllbGQ6IFBvc3RPYmplY3RzQ29ubmVjdGlvbk9yZGVyYnlFbnVtO1xuICAvKiogUG9zc2libGUgZGlyZWN0aW9ucyBpbiB3aGljaCB0byBvcmRlciBhIGxpc3Qgb2YgaXRlbXMgKi9cbiAgb3JkZXI6IE9yZGVyRW51bTtcbn07XG5cbi8qKiBTZXQgcmVsYXRpb25zaGlwcyBiZXR3ZWVuIHRoZSBwb3N0IHRvIHBvc3RGb3JtYXRzICovXG5leHBvcnQgdHlwZSBQb3N0UG9zdEZvcm1hdHNJbnB1dCA9IHtcbiAgLyoqIElmIHRydWUsIHRoaXMgd2lsbCBhcHBlbmQgdGhlIHBvc3RGb3JtYXQgdG8gZXhpc3RpbmcgcmVsYXRlZCBwb3N0Rm9ybWF0cy4gSWYgZmFsc2UsIHRoaXMgd2lsbCByZXBsYWNlIGV4aXN0aW5nIHJlbGF0aW9uc2hpcHMuIERlZmF1bHQgdHJ1ZS4gKi9cbiAgYXBwZW5kPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIGlucHV0IGxpc3Qgb2YgaXRlbXMgdG8gc2V0LiAqL1xuICBub2Rlcz86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxQb3N0UG9zdEZvcm1hdHNOb2RlSW5wdXQ+Pj47XG59O1xuXG4vKiogTGlzdCBvZiBwb3N0Rm9ybWF0cyB0byBjb25uZWN0IHRoZSBwb3N0IHRvLiBJZiBhbiBJRCBpcyBzZXQsIGl0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgdGhlIGNvbm5lY3Rpb24uIElmIG5vdCwgaXQgd2lsbCBsb29rIGZvciBhIHNsdWcuIElmIG5laXRoZXIgYXJlIHZhbGlkIGV4aXN0aW5nIHRlcm1zLCBhbmQgdGhlIHNpdGUgaXMgY29uZmlndXJlZCB0byBhbGxvdyB0ZXJtcyB0byBiZSBjcmVhdGVkIGR1cmluZyBwb3N0IG11dGF0aW9ucywgYSB0ZXJtIHdpbGwgYmUgY3JlYXRlZCB1c2luZyB0aGUgTmFtZSBpZiBpdCBleGlzdHMgaW4gdGhlIGlucHV0LCB0aGVuIGZhbGxiYWNrIHRvIHRoZSBzbHVnIGlmIGl0IGV4aXN0cy4gKi9cbmV4cG9ydCB0eXBlIFBvc3RQb3N0Rm9ybWF0c05vZGVJbnB1dCA9IHtcbiAgLyoqIFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgcG9zdEZvcm1hdC4gVGhpcyBmaWVsZCBpcyB1c2VkIHRvIHNldCBhIGRlc2NyaXB0aW9uIG9mIHRoZSBwb3N0Rm9ybWF0IGlmIGEgbmV3IG9uZSBpcyBjcmVhdGVkIGR1cmluZyB0aGUgbXV0YXRpb24uICovXG4gIGRlc2NyaXB0aW9uPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgSUQgb2YgdGhlIHBvc3RGb3JtYXQuIElmIHByZXNlbnQsIHRoaXMgd2lsbCBiZSB1c2VkIHRvIGNvbm5lY3QgdG8gdGhlIHBvc3QuIElmIG5vIGV4aXN0aW5nIHBvc3RGb3JtYXQgZXhpc3RzIHdpdGggdGhpcyBJRCwgbm8gY29ubmVjdGlvbiB3aWxsIGJlIG1hZGUuICovXG4gIGlkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBuYW1lIG9mIHRoZSBwb3N0Rm9ybWF0LiBUaGlzIGZpZWxkIGlzIHVzZWQgdG8gY3JlYXRlIGEgbmV3IHRlcm0sIGlmIHRlcm0gY3JlYXRpb24gaXMgZW5hYmxlZCBpbiBuZXN0ZWQgbXV0YXRpb25zLCBhbmQgaWYgb25lIGRvZXMgbm90IGFscmVhZHkgZXhpc3Qgd2l0aCB0aGUgcHJvdmlkZWQgc2x1ZyBvciBJRCBvciBpZiBhIHNsdWcgb3IgSUQgaXMgbm90IHByb3ZpZGVkLiBJZiBubyBuYW1lIGlzIGluY2x1ZGVkIGFuZCBhIHRlcm0gaXMgY3JlYXRlZCwgdGhlIGNyZWF0aW9uIHdpbGwgZmFsbGJhY2sgdG8gdGhlIHNsdWcgZmllbGQuICovXG4gIG5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBzbHVnIG9mIHRoZSBwb3N0Rm9ybWF0LiBJZiBubyBJRCBpcyBwcmVzZW50LCB0aGlzIGZpZWxkIHdpbGwgYmUgdXNlZCB0byBtYWtlIGEgY29ubmVjdGlvbi4gSWYgbm8gZXhpc3RpbmcgdGVybSBleGlzdHMgd2l0aCB0aGlzIHNsdWcsIHRoaXMgZmllbGQgd2lsbCBiZSB1c2VkIGFzIGEgZmFsbGJhY2sgdG8gdGhlIE5hbWUgZmllbGQgd2hlbiBjcmVhdGluZyBhIG5ldyB0ZXJtIHRvIGNvbm5lY3QgdG8sIGlmIHRlcm0gY3JlYXRpb24gaXMgZW5hYmxlZCBhcyBhIG5lc3RlZCBtdXRhdGlvbi4gKi9cbiAgc2x1Zz86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIFRoZSBzdGF0dXMgb2YgdGhlIG9iamVjdC4gKi9cbmV4cG9ydCBlbnVtIFBvc3RTdGF0dXNFbnVtIHtcbiAgLyoqIE9iamVjdHMgd2l0aCB0aGUgYXV0by1kcmFmdCBzdGF0dXMgKi9cbiAgQXV0b0RyYWZ0ID0gJ0FVVE9fRFJBRlQnLFxuICAvKiogT2JqZWN0cyB3aXRoIHRoZSBkcmFmdCBzdGF0dXMgKi9cbiAgRHJhZnQgPSAnRFJBRlQnLFxuICAvKiogT2JqZWN0cyB3aXRoIHRoZSBmdXR1cmUgc3RhdHVzICovXG4gIEZ1dHVyZSA9ICdGVVRVUkUnLFxuICAvKiogT2JqZWN0cyB3aXRoIHRoZSBpbmhlcml0IHN0YXR1cyAqL1xuICBJbmhlcml0ID0gJ0lOSEVSSVQnLFxuICAvKiogT2JqZWN0cyB3aXRoIHRoZSBuZWdhdGVkIHN0YXR1cyAqL1xuICBOZWdhdGVkID0gJ05FR0FURUQnLFxuICAvKiogT2JqZWN0cyB3aXRoIHRoZSBwZW5kaW5nIHN0YXR1cyAqL1xuICBQZW5kaW5nID0gJ1BFTkRJTkcnLFxuICAvKiogT2JqZWN0cyB3aXRoIHRoZSBwcml2YXRlIHN0YXR1cyAqL1xuICBQcml2YXRlID0gJ1BSSVZBVEUnLFxuICAvKiogT2JqZWN0cyB3aXRoIHRoZSBwdWJsaXNoIHN0YXR1cyAqL1xuICBQdWJsaXNoID0gJ1BVQkxJU0gnLFxuICAvKiogT2JqZWN0cyB3aXRoIHRoZSByZXF1ZXN0LWNvbXBsZXRlZCBzdGF0dXMgKi9cbiAgUmVxdWVzdENvbXBsZXRlZCA9ICdSRVFVRVNUX0NPTVBMRVRFRCcsXG4gIC8qKiBPYmplY3RzIHdpdGggdGhlIHJlcXVlc3QtY29uZmlybWVkIHN0YXR1cyAqL1xuICBSZXF1ZXN0Q29uZmlybWVkID0gJ1JFUVVFU1RfQ09ORklSTUVEJyxcbiAgLyoqIE9iamVjdHMgd2l0aCB0aGUgcmVxdWVzdC1mYWlsZWQgc3RhdHVzICovXG4gIFJlcXVlc3RGYWlsZWQgPSAnUkVRVUVTVF9GQUlMRUQnLFxuICAvKiogT2JqZWN0cyB3aXRoIHRoZSByZXF1ZXN0LXBlbmRpbmcgc3RhdHVzICovXG4gIFJlcXVlc3RQZW5kaW5nID0gJ1JFUVVFU1RfUEVORElORycsXG4gIC8qKiBPYmplY3RzIHdpdGggdGhlIHRyYXNoIHN0YXR1cyAqL1xuICBUcmFzaCA9ICdUUkFTSCcsXG4gIC8qKiBPYmplY3RzIHdpdGggdGhlIHdwY2FfZXhjZXB0IHN0YXR1cyAqL1xuICBXcGNhRXhjZXB0ID0gJ1dQQ0FfRVhDRVBUJyxcbiAgLyoqIE9iamVjdHMgd2l0aCB0aGUgd3BjYV9vciBzdGF0dXMgKi9cbiAgV3BjYU9yID0gJ1dQQ0FfT1InXG59XG5cbi8qKiBTZXQgcmVsYXRpb25zaGlwcyBiZXR3ZWVuIHRoZSBwb3N0IHRvIHRhZ3MgKi9cbmV4cG9ydCB0eXBlIFBvc3RUYWdzSW5wdXQgPSB7XG4gIC8qKiBJZiB0cnVlLCB0aGlzIHdpbGwgYXBwZW5kIHRoZSB0YWcgdG8gZXhpc3RpbmcgcmVsYXRlZCB0YWdzLiBJZiBmYWxzZSwgdGhpcyB3aWxsIHJlcGxhY2UgZXhpc3RpbmcgcmVsYXRpb25zaGlwcy4gRGVmYXVsdCB0cnVlLiAqL1xuICBhcHBlbmQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgaW5wdXQgbGlzdCBvZiBpdGVtcyB0byBzZXQuICovXG4gIG5vZGVzPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFBvc3RUYWdzTm9kZUlucHV0Pj4+O1xufTtcblxuLyoqIExpc3Qgb2YgdGFncyB0byBjb25uZWN0IHRoZSBwb3N0IHRvLiBJZiBhbiBJRCBpcyBzZXQsIGl0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgdGhlIGNvbm5lY3Rpb24uIElmIG5vdCwgaXQgd2lsbCBsb29rIGZvciBhIHNsdWcuIElmIG5laXRoZXIgYXJlIHZhbGlkIGV4aXN0aW5nIHRlcm1zLCBhbmQgdGhlIHNpdGUgaXMgY29uZmlndXJlZCB0byBhbGxvdyB0ZXJtcyB0byBiZSBjcmVhdGVkIGR1cmluZyBwb3N0IG11dGF0aW9ucywgYSB0ZXJtIHdpbGwgYmUgY3JlYXRlZCB1c2luZyB0aGUgTmFtZSBpZiBpdCBleGlzdHMgaW4gdGhlIGlucHV0LCB0aGVuIGZhbGxiYWNrIHRvIHRoZSBzbHVnIGlmIGl0IGV4aXN0cy4gKi9cbmV4cG9ydCB0eXBlIFBvc3RUYWdzTm9kZUlucHV0ID0ge1xuICAvKiogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSB0YWcuIFRoaXMgZmllbGQgaXMgdXNlZCB0byBzZXQgYSBkZXNjcmlwdGlvbiBvZiB0aGUgdGFnIGlmIGEgbmV3IG9uZSBpcyBjcmVhdGVkIGR1cmluZyB0aGUgbXV0YXRpb24uICovXG4gIGRlc2NyaXB0aW9uPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgSUQgb2YgdGhlIHRhZy4gSWYgcHJlc2VudCwgdGhpcyB3aWxsIGJlIHVzZWQgdG8gY29ubmVjdCB0byB0aGUgcG9zdC4gSWYgbm8gZXhpc3RpbmcgdGFnIGV4aXN0cyB3aXRoIHRoaXMgSUQsIG5vIGNvbm5lY3Rpb24gd2lsbCBiZSBtYWRlLiAqL1xuICBpZD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgbmFtZSBvZiB0aGUgdGFnLiBUaGlzIGZpZWxkIGlzIHVzZWQgdG8gY3JlYXRlIGEgbmV3IHRlcm0sIGlmIHRlcm0gY3JlYXRpb24gaXMgZW5hYmxlZCBpbiBuZXN0ZWQgbXV0YXRpb25zLCBhbmQgaWYgb25lIGRvZXMgbm90IGFscmVhZHkgZXhpc3Qgd2l0aCB0aGUgcHJvdmlkZWQgc2x1ZyBvciBJRCBvciBpZiBhIHNsdWcgb3IgSUQgaXMgbm90IHByb3ZpZGVkLiBJZiBubyBuYW1lIGlzIGluY2x1ZGVkIGFuZCBhIHRlcm0gaXMgY3JlYXRlZCwgdGhlIGNyZWF0aW9uIHdpbGwgZmFsbGJhY2sgdG8gdGhlIHNsdWcgZmllbGQuICovXG4gIG5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBzbHVnIG9mIHRoZSB0YWcuIElmIG5vIElEIGlzIHByZXNlbnQsIHRoaXMgZmllbGQgd2lsbCBiZSB1c2VkIHRvIG1ha2UgYSBjb25uZWN0aW9uLiBJZiBubyBleGlzdGluZyB0ZXJtIGV4aXN0cyB3aXRoIHRoaXMgc2x1ZywgdGhpcyBmaWVsZCB3aWxsIGJlIHVzZWQgYXMgYSBmYWxsYmFjayB0byB0aGUgTmFtZSBmaWVsZCB3aGVuIGNyZWF0aW5nIGEgbmV3IHRlcm0gdG8gY29ubmVjdCB0bywgaWYgdGVybSBjcmVhdGlvbiBpcyBlbmFibGVkIGFzIGEgbmVzdGVkIG11dGF0aW9uLiAqL1xuICBzbHVnPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBQb3N0IHR5cGUgYW5kIHRoZSBjYXRlZ29yeSB0eXBlICovXG5leHBvcnQgdHlwZSBQb3N0VG9DYXRlZ29yeUNvbm5lY3Rpb24gPSBDYXRlZ29yeUNvbm5lY3Rpb24gJiBDb25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ1Bvc3RUb0NhdGVnb3J5Q29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIFBvc3RUb0NhdGVnb3J5Q29ubmVjdGlvbiBjb25uZWN0aW9uICovXG4gIGVkZ2VzOiBBcnJheTxQb3N0VG9DYXRlZ29yeUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBub2RlcyBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZXM6IEFycmF5PENhdGVnb3J5PjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogUG9zdFRvQ2F0ZWdvcnlDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFBvc3RUb0NhdGVnb3J5Q29ubmVjdGlvbkVkZ2UgPSBDYXRlZ29yeUNvbm5lY3Rpb25FZGdlICYgRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdQb3N0VG9DYXRlZ29yeUNvbm5lY3Rpb25FZGdlJztcbiAgLyoqIEEgY3Vyc29yIGZvciB1c2UgaW4gcGFnaW5hdGlvbiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGl0ZW0gYXQgdGhlIGVuZCBvZiB0aGUgZWRnZSAqL1xuICBub2RlOiBDYXRlZ29yeTtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlICZxdW90O1Bvc3RUb0NhdGVnb3J5Q29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgUG9zdFRvQ2F0ZWdvcnlDb25uZWN0aW9uUGFnZUluZm8gPSBDYXRlZ29yeUNvbm5lY3Rpb25QYWdlSW5mbyAmIFBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdQb3N0VG9DYXRlZ29yeUNvbm5lY3Rpb25QYWdlSW5mbyc7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogQXJndW1lbnRzIGZvciBmaWx0ZXJpbmcgdGhlIFBvc3RUb0NhdGVnb3J5Q29ubmVjdGlvbiBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBQb3N0VG9DYXRlZ29yeUNvbm5lY3Rpb25XaGVyZUFyZ3MgPSB7XG4gIC8qKiBVbmlxdWUgY2FjaGUga2V5IHRvIGJlIHByb2R1Y2VkIHdoZW4gdGhpcyBxdWVyeSBpcyBzdG9yZWQgaW4gYW4gb2JqZWN0IGNhY2hlLiBEZWZhdWx0IGlzICdjb3JlJy4gKi9cbiAgY2FjaGVEb21haW4/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRlcm0gSUQgdG8gcmV0cmlldmUgY2hpbGQgdGVybXMgb2YuIElmIG11bHRpcGxlIHRheG9ub21pZXMgYXJlIHBhc3NlZCwgJGNoaWxkX29mIGlzIGlnbm9yZWQuIERlZmF1bHQgMC4gKi9cbiAgY2hpbGRPZj86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogVHJ1ZSB0byBsaW1pdCByZXN1bHRzIHRvIHRlcm1zIHRoYXQgaGF2ZSBubyBjaGlsZHJlbi4gVGhpcyBwYXJhbWV0ZXIgaGFzIG5vIGVmZmVjdCBvbiBub24taGllcmFyY2hpY2FsIHRheG9ub21pZXMuIERlZmF1bHQgZmFsc2UuICovXG4gIGNoaWxkbGVzcz86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIFJldHJpZXZlIHRlcm1zIHdoZXJlIHRoZSBkZXNjcmlwdGlvbiBpcyBMSUtFIHRoZSBpbnB1dCB2YWx1ZS4gRGVmYXVsdCBlbXB0eS4gKi9cbiAgZGVzY3JpcHRpb25MaWtlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiB0ZXJtIGlkcyB0byBleGNsdWRlLiBJZiAkaW5jbHVkZSBpcyBub24tZW1wdHksICRleGNsdWRlIGlzIGlnbm9yZWQuIERlZmF1bHQgZW1wdHkgYXJyYXkuICovXG4gIGV4Y2x1ZGU/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIHRlcm0gaWRzIHRvIGV4Y2x1ZGUgYWxvbmcgd2l0aCBhbGwgb2YgdGhlaXIgZGVzY2VuZGFudCB0ZXJtcy4gSWYgJGluY2x1ZGUgaXMgbm9uLWVtcHR5LCAkZXhjbHVkZV90cmVlIGlzIGlnbm9yZWQuIERlZmF1bHQgZW1wdHkgYXJyYXkuICovXG4gIGV4Y2x1ZGVUcmVlPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBXaGV0aGVyIHRvIGhpZGUgdGVybXMgbm90IGFzc2lnbmVkIHRvIGFueSBwb3N0cy4gQWNjZXB0cyB0cnVlIG9yIGZhbHNlLiBEZWZhdWx0IGZhbHNlICovXG4gIGhpZGVFbXB0eT86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdG8gaW5jbHVkZSB0ZXJtcyB0aGF0IGhhdmUgbm9uLWVtcHR5IGRlc2NlbmRhbnRzIChldmVuIGlmICRoaWRlX2VtcHR5IGlzIHNldCB0byB0cnVlKS4gRGVmYXVsdCB0cnVlLiAqL1xuICBoaWVyYXJjaGljYWw/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiB0ZXJtIGlkcyB0byBpbmNsdWRlLiBEZWZhdWx0IGVtcHR5IGFycmF5LiAqL1xuICBpbmNsdWRlPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBuYW1lcyB0byByZXR1cm4gdGVybShzKSBmb3IuIERlZmF1bHQgZW1wdHkuICovXG4gIG5hbWU/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBSZXRyaWV2ZSB0ZXJtcyB3aGVyZSB0aGUgbmFtZSBpcyBMSUtFIHRoZSBpbnB1dCB2YWx1ZS4gRGVmYXVsdCBlbXB0eS4gKi9cbiAgbmFtZUxpa2U/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIG9iamVjdCBJRHMuIFJlc3VsdHMgd2lsbCBiZSBsaW1pdGVkIHRvIHRlcm1zIGFzc29jaWF0ZWQgd2l0aCB0aGVzZSBvYmplY3RzLiAqL1xuICBvYmplY3RJZHM/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIERpcmVjdGlvbiB0aGUgY29ubmVjdGlvbiBzaG91bGQgYmUgb3JkZXJlZCBpbiAqL1xuICBvcmRlcj86IElucHV0TWF5YmU8T3JkZXJFbnVtPjtcbiAgLyoqIEZpZWxkKHMpIHRvIG9yZGVyIHRlcm1zIGJ5LiBEZWZhdWx0cyB0byAnbmFtZScuICovXG4gIG9yZGVyYnk/OiBJbnB1dE1heWJlPFRlcm1PYmplY3RzQ29ubmVjdGlvbk9yZGVyYnlFbnVtPjtcbiAgLyoqIFdoZXRoZXIgdG8gcGFkIHRoZSBxdWFudGl0eSBvZiBhIHRlcm0ncyBjaGlsZHJlbiBpbiB0aGUgcXVhbnRpdHkgb2YgZWFjaCB0ZXJtJ3MgXCJjb3VudFwiIG9iamVjdCB2YXJpYWJsZS4gRGVmYXVsdCBmYWxzZS4gKi9cbiAgcGFkQ291bnRzPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogUGFyZW50IHRlcm0gSUQgdG8gcmV0cmlldmUgZGlyZWN0LWNoaWxkIHRlcm1zIG9mLiBEZWZhdWx0IGVtcHR5LiAqL1xuICBwYXJlbnQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIFNlYXJjaCBjcml0ZXJpYSB0byBtYXRjaCB0ZXJtcy4gV2lsbCBiZSBTUUwtZm9ybWF0dGVkIHdpdGggd2lsZGNhcmRzIGJlZm9yZSBhbmQgYWZ0ZXIuIERlZmF1bHQgZW1wdHkuICovXG4gIHNlYXJjaD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2Ygc2x1Z3MgdG8gcmV0dXJuIHRlcm0ocykgZm9yLiBEZWZhdWx0IGVtcHR5LiAqL1xuICBzbHVnPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgdGVybSB0YXhvbm9teSBJRHMsIHRvIG1hdGNoIHdoZW4gcXVlcnlpbmcgdGVybXMuICovXG4gIHRlcm1UYXhvbm9tSWQ/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIHRlcm0gdGF4b25vbXkgSURzLCB0byBtYXRjaCB3aGVuIHF1ZXJ5aW5nIHRlcm1zLiAqL1xuICB0ZXJtVGF4b25vbXlJZD86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogV2hldGhlciB0byBwcmltZSBtZXRhIGNhY2hlcyBmb3IgbWF0Y2hlZCB0ZXJtcy4gRGVmYXVsdCB0cnVlLiAqL1xuICB1cGRhdGVUZXJtTWV0YUNhY2hlPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgUG9zdCB0eXBlIGFuZCB0aGUgQ29tbWVudCB0eXBlICovXG5leHBvcnQgdHlwZSBQb3N0VG9Db21tZW50Q29ubmVjdGlvbiA9IENvbW1lbnRDb25uZWN0aW9uICYgQ29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdQb3N0VG9Db21tZW50Q29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIFBvc3RUb0NvbW1lbnRDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbiAgZWRnZXM6IEFycmF5PFBvc3RUb0NvbW1lbnRDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxDb21tZW50PjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogUG9zdFRvQ29tbWVudENvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBBbiBlZGdlIGluIGEgY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgUG9zdFRvQ29tbWVudENvbm5lY3Rpb25FZGdlID0gQ29tbWVudENvbm5lY3Rpb25FZGdlICYgRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdQb3N0VG9Db21tZW50Q29ubmVjdGlvbkVkZ2UnO1xuICAvKiogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaXRlbSBhdCB0aGUgZW5kIG9mIHRoZSBlZGdlICovXG4gIG5vZGU6IENvbW1lbnQ7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtQb3N0VG9Db21tZW50Q29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgUG9zdFRvQ29tbWVudENvbm5lY3Rpb25QYWdlSW5mbyA9IENvbW1lbnRDb25uZWN0aW9uUGFnZUluZm8gJiBQYWdlSW5mbyAmIFdwUGFnZUluZm8gJiB7XG4gIF9fdHlwZW5hbWU/OiAnUG9zdFRvQ29tbWVudENvbm5lY3Rpb25QYWdlSW5mbyc7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogQXJndW1lbnRzIGZvciBmaWx0ZXJpbmcgdGhlIFBvc3RUb0NvbW1lbnRDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFBvc3RUb0NvbW1lbnRDb25uZWN0aW9uV2hlcmVBcmdzID0ge1xuICAvKiogQ29tbWVudCBhdXRob3IgZW1haWwgYWRkcmVzcy4gKi9cbiAgYXV0aG9yRW1haWw/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIGF1dGhvciBJRHMgdG8gaW5jbHVkZSBjb21tZW50cyBmb3IuICovXG4gIGF1dGhvckluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBhdXRob3IgSURzIHRvIGV4Y2x1ZGUgY29tbWVudHMgZm9yLiAqL1xuICBhdXRob3JOb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQ29tbWVudCBhdXRob3IgVVJMLiAqL1xuICBhdXRob3JVcmw/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIGNvbW1lbnQgSURzIHRvIGluY2x1ZGUuICovXG4gIGNvbW1lbnRJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgSURzIG9mIHVzZXJzIHdob3NlIHVuYXBwcm92ZWQgY29tbWVudHMgd2lsbCBiZSByZXR1cm5lZCBieSB0aGUgcXVlcnkgcmVnYXJkbGVzcyBvZiBzdGF0dXMuICovXG4gIGNvbW1lbnROb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogSW5jbHVkZSBjb21tZW50cyBvZiBhIGdpdmVuIHR5cGUuICovXG4gIGNvbW1lbnRUeXBlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBJbmNsdWRlIGNvbW1lbnRzIGZyb20gYSBnaXZlbiBhcnJheSBvZiBjb21tZW50IHR5cGVzLiAqL1xuICBjb21tZW50VHlwZUluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogRXhjbHVkZSBjb21tZW50cyBmcm9tIGEgZ2l2ZW4gYXJyYXkgb2YgY29tbWVudCB0eXBlcy4gKi9cbiAgY29tbWVudFR5cGVOb3RJbj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQ29udGVudCBvYmplY3QgYXV0aG9yIElEIHRvIGxpbWl0IHJlc3VsdHMgYnkuICovXG4gIGNvbnRlbnRBdXRob3I/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIGF1dGhvciBJRHMgdG8gcmV0cmlldmUgY29tbWVudHMgZm9yLiAqL1xuICBjb250ZW50QXV0aG9ySW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIGF1dGhvciBJRHMgKm5vdCogdG8gcmV0cmlldmUgY29tbWVudHMgZm9yLiAqL1xuICBjb250ZW50QXV0aG9yTm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIExpbWl0IHJlc3VsdHMgdG8gdGhvc2UgYWZmaWxpYXRlZCB3aXRoIGEgZ2l2ZW4gY29udGVudCBvYmplY3QgSUQuICovXG4gIGNvbnRlbnRJZD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBjb250ZW50IG9iamVjdCBJRHMgdG8gaW5jbHVkZSBhZmZpbGlhdGVkIGNvbW1lbnRzIGZvci4gKi9cbiAgY29udGVudElkSW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIGNvbnRlbnQgb2JqZWN0IElEcyB0byBleGNsdWRlIGFmZmlsaWF0ZWQgY29tbWVudHMgZm9yLiAqL1xuICBjb250ZW50SWROb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQ29udGVudCBvYmplY3QgbmFtZSAoaS5lLiBzbHVnICkgdG8gcmV0cmlldmUgYWZmaWxpYXRlZCBjb21tZW50cyBmb3IuICovXG4gIGNvbnRlbnROYW1lPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBDb250ZW50IE9iamVjdCBwYXJlbnQgSUQgdG8gcmV0cmlldmUgYWZmaWxpYXRlZCBjb21tZW50cyBmb3IuICovXG4gIGNvbnRlbnRQYXJlbnQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIGNvbnRlbnQgb2JqZWN0IHN0YXR1c2VzIHRvIHJldHJpZXZlIGFmZmlsaWF0ZWQgY29tbWVudHMgZm9yLiBQYXNzICdhbnknIHRvIG1hdGNoIGFueSB2YWx1ZS4gKi9cbiAgY29udGVudFN0YXR1cz86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxQb3N0U3RhdHVzRW51bT4+PjtcbiAgLyoqIENvbnRlbnQgb2JqZWN0IHR5cGUgb3IgYXJyYXkgb2YgdHlwZXMgdG8gcmV0cmlldmUgYWZmaWxpYXRlZCBjb21tZW50cyBmb3IuIFBhc3MgJ2FueScgdG8gbWF0Y2ggYW55IHZhbHVlLiAqL1xuICBjb250ZW50VHlwZT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxDb250ZW50VHlwZUVudW0+Pj47XG4gIC8qKiBBcnJheSBvZiBJRHMgb3IgZW1haWwgYWRkcmVzc2VzIG9mIHVzZXJzIHdob3NlIHVuYXBwcm92ZWQgY29tbWVudHMgd2lsbCBiZSByZXR1cm5lZCBieSB0aGUgcXVlcnkgcmVnYXJkbGVzcyBvZiAkc3RhdHVzLiBEZWZhdWx0IGVtcHR5ICovXG4gIGluY2x1ZGVVbmFwcHJvdmVkPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBLYXJtYSBzY29yZSB0byByZXRyaWV2ZSBtYXRjaGluZyBjb21tZW50cyBmb3IuICovXG4gIGthcm1hPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgY2FyZGluYWxpdHkgb2YgdGhlIG9yZGVyIG9mIHRoZSBjb25uZWN0aW9uICovXG4gIG9yZGVyPzogSW5wdXRNYXliZTxPcmRlckVudW0+O1xuICAvKiogRmllbGQgdG8gb3JkZXIgdGhlIGNvbW1lbnRzIGJ5LiAqL1xuICBvcmRlcmJ5PzogSW5wdXRNYXliZTxDb21tZW50c0Nvbm5lY3Rpb25PcmRlcmJ5RW51bT47XG4gIC8qKiBQYXJlbnQgSUQgb2YgY29tbWVudCB0byByZXRyaWV2ZSBjaGlsZHJlbiBvZi4gKi9cbiAgcGFyZW50PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBwYXJlbnQgSURzIG9mIGNvbW1lbnRzIHRvIHJldHJpZXZlIGNoaWxkcmVuIGZvci4gKi9cbiAgcGFyZW50SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIHBhcmVudCBJRHMgb2YgY29tbWVudHMgKm5vdCogdG8gcmV0cmlldmUgY2hpbGRyZW4gZm9yLiAqL1xuICBwYXJlbnROb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogU2VhcmNoIHRlcm0ocykgdG8gcmV0cmlldmUgbWF0Y2hpbmcgY29tbWVudHMgZm9yLiAqL1xuICBzZWFyY2g/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIENvbW1lbnQgc3RhdHVzIHRvIGxpbWl0IHJlc3VsdHMgYnkuICovXG4gIHN0YXR1cz86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogSW5jbHVkZSBjb21tZW50cyBmb3IgYSBzcGVjaWZpYyB1c2VyIElELiAqL1xuICB1c2VySWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgUG9zdCB0eXBlIGFuZCB0aGUgcG9zdEZvcm1hdCB0eXBlICovXG5leHBvcnQgdHlwZSBQb3N0VG9Qb3N0Rm9ybWF0Q29ubmVjdGlvbiA9IENvbm5lY3Rpb24gJiBQb3N0Rm9ybWF0Q29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdQb3N0VG9Qb3N0Rm9ybWF0Q29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIFBvc3RUb1Bvc3RGb3JtYXRDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbiAgZWRnZXM6IEFycmF5PFBvc3RUb1Bvc3RGb3JtYXRDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxQb3N0Rm9ybWF0PjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogUG9zdFRvUG9zdEZvcm1hdENvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBBbiBlZGdlIGluIGEgY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgUG9zdFRvUG9zdEZvcm1hdENvbm5lY3Rpb25FZGdlID0gRWRnZSAmIFBvc3RGb3JtYXRDb25uZWN0aW9uRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdQb3N0VG9Qb3N0Rm9ybWF0Q29ubmVjdGlvbkVkZ2UnO1xuICAvKiogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaXRlbSBhdCB0aGUgZW5kIG9mIHRoZSBlZGdlICovXG4gIG5vZGU6IFBvc3RGb3JtYXQ7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtQb3N0VG9Qb3N0Rm9ybWF0Q29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgUG9zdFRvUG9zdEZvcm1hdENvbm5lY3Rpb25QYWdlSW5mbyA9IFBhZ2VJbmZvICYgUG9zdEZvcm1hdENvbm5lY3Rpb25QYWdlSW5mbyAmIFdwUGFnZUluZm8gJiB7XG4gIF9fdHlwZW5hbWU/OiAnUG9zdFRvUG9zdEZvcm1hdENvbm5lY3Rpb25QYWdlSW5mbyc7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogQXJndW1lbnRzIGZvciBmaWx0ZXJpbmcgdGhlIFBvc3RUb1Bvc3RGb3JtYXRDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFBvc3RUb1Bvc3RGb3JtYXRDb25uZWN0aW9uV2hlcmVBcmdzID0ge1xuICAvKiogVW5pcXVlIGNhY2hlIGtleSB0byBiZSBwcm9kdWNlZCB3aGVuIHRoaXMgcXVlcnkgaXMgc3RvcmVkIGluIGFuIG9iamVjdCBjYWNoZS4gRGVmYXVsdCBpcyAnY29yZScuICovXG4gIGNhY2hlRG9tYWluPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUZXJtIElEIHRvIHJldHJpZXZlIGNoaWxkIHRlcm1zIG9mLiBJZiBtdWx0aXBsZSB0YXhvbm9taWVzIGFyZSBwYXNzZWQsICRjaGlsZF9vZiBpcyBpZ25vcmVkLiBEZWZhdWx0IDAuICovXG4gIGNoaWxkT2Y/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIFRydWUgdG8gbGltaXQgcmVzdWx0cyB0byB0ZXJtcyB0aGF0IGhhdmUgbm8gY2hpbGRyZW4uIFRoaXMgcGFyYW1ldGVyIGhhcyBubyBlZmZlY3Qgb24gbm9uLWhpZXJhcmNoaWNhbCB0YXhvbm9taWVzLiBEZWZhdWx0IGZhbHNlLiAqL1xuICBjaGlsZGxlc3M/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBSZXRyaWV2ZSB0ZXJtcyB3aGVyZSB0aGUgZGVzY3JpcHRpb24gaXMgTElLRSB0aGUgaW5wdXQgdmFsdWUuIERlZmF1bHQgZW1wdHkuICovXG4gIGRlc2NyaXB0aW9uTGlrZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgdGVybSBpZHMgdG8gZXhjbHVkZS4gSWYgJGluY2x1ZGUgaXMgbm9uLWVtcHR5LCAkZXhjbHVkZSBpcyBpZ25vcmVkLiBEZWZhdWx0IGVtcHR5IGFycmF5LiAqL1xuICBleGNsdWRlPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiB0ZXJtIGlkcyB0byBleGNsdWRlIGFsb25nIHdpdGggYWxsIG9mIHRoZWlyIGRlc2NlbmRhbnQgdGVybXMuIElmICRpbmNsdWRlIGlzIG5vbi1lbXB0eSwgJGV4Y2x1ZGVfdHJlZSBpcyBpZ25vcmVkLiBEZWZhdWx0IGVtcHR5IGFycmF5LiAqL1xuICBleGNsdWRlVHJlZT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogV2hldGhlciB0byBoaWRlIHRlcm1zIG5vdCBhc3NpZ25lZCB0byBhbnkgcG9zdHMuIEFjY2VwdHMgdHJ1ZSBvciBmYWxzZS4gRGVmYXVsdCBmYWxzZSAqL1xuICBoaWRlRW1wdHk/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBXaGV0aGVyIHRvIGluY2x1ZGUgdGVybXMgdGhhdCBoYXZlIG5vbi1lbXB0eSBkZXNjZW5kYW50cyAoZXZlbiBpZiAkaGlkZV9lbXB0eSBpcyBzZXQgdG8gdHJ1ZSkuIERlZmF1bHQgdHJ1ZS4gKi9cbiAgaGllcmFyY2hpY2FsPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgdGVybSBpZHMgdG8gaW5jbHVkZS4gRGVmYXVsdCBlbXB0eSBhcnJheS4gKi9cbiAgaW5jbHVkZT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgbmFtZXMgdG8gcmV0dXJuIHRlcm0ocykgZm9yLiBEZWZhdWx0IGVtcHR5LiAqL1xuICBuYW1lPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogUmV0cmlldmUgdGVybXMgd2hlcmUgdGhlIG5hbWUgaXMgTElLRSB0aGUgaW5wdXQgdmFsdWUuIERlZmF1bHQgZW1wdHkuICovXG4gIG5hbWVMaWtlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBvYmplY3QgSURzLiBSZXN1bHRzIHdpbGwgYmUgbGltaXRlZCB0byB0ZXJtcyBhc3NvY2lhdGVkIHdpdGggdGhlc2Ugb2JqZWN0cy4gKi9cbiAgb2JqZWN0SWRzPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBEaXJlY3Rpb24gdGhlIGNvbm5lY3Rpb24gc2hvdWxkIGJlIG9yZGVyZWQgaW4gKi9cbiAgb3JkZXI/OiBJbnB1dE1heWJlPE9yZGVyRW51bT47XG4gIC8qKiBGaWVsZChzKSB0byBvcmRlciB0ZXJtcyBieS4gRGVmYXVsdHMgdG8gJ25hbWUnLiAqL1xuICBvcmRlcmJ5PzogSW5wdXRNYXliZTxUZXJtT2JqZWN0c0Nvbm5lY3Rpb25PcmRlcmJ5RW51bT47XG4gIC8qKiBXaGV0aGVyIHRvIHBhZCB0aGUgcXVhbnRpdHkgb2YgYSB0ZXJtJ3MgY2hpbGRyZW4gaW4gdGhlIHF1YW50aXR5IG9mIGVhY2ggdGVybSdzIFwiY291bnRcIiBvYmplY3QgdmFyaWFibGUuIERlZmF1bHQgZmFsc2UuICovXG4gIHBhZENvdW50cz86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIFBhcmVudCB0ZXJtIElEIHRvIHJldHJpZXZlIGRpcmVjdC1jaGlsZCB0ZXJtcyBvZi4gRGVmYXVsdCBlbXB0eS4gKi9cbiAgcGFyZW50PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBTZWFyY2ggY3JpdGVyaWEgdG8gbWF0Y2ggdGVybXMuIFdpbGwgYmUgU1FMLWZvcm1hdHRlZCB3aXRoIHdpbGRjYXJkcyBiZWZvcmUgYW5kIGFmdGVyLiBEZWZhdWx0IGVtcHR5LiAqL1xuICBzZWFyY2g/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIHNsdWdzIHRvIHJldHVybiB0ZXJtKHMpIGZvci4gRGVmYXVsdCBlbXB0eS4gKi9cbiAgc2x1Zz86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIHRlcm0gdGF4b25vbXkgSURzLCB0byBtYXRjaCB3aGVuIHF1ZXJ5aW5nIHRlcm1zLiAqL1xuICB0ZXJtVGF4b25vbUlkPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiB0ZXJtIHRheG9ub215IElEcywgdG8gbWF0Y2ggd2hlbiBxdWVyeWluZyB0ZXJtcy4gKi9cbiAgdGVybVRheG9ub215SWQ/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFdoZXRoZXIgdG8gcHJpbWUgbWV0YSBjYWNoZXMgZm9yIG1hdGNoZWQgdGVybXMuIERlZmF1bHQgdHJ1ZS4gKi9cbiAgdXBkYXRlVGVybU1ldGFDYWNoZT86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFBvc3QgdHlwZSBhbmQgdGhlIHBvc3QgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUG9zdFRvUHJldmlld0Nvbm5lY3Rpb25FZGdlID0gRWRnZSAmIE9uZVRvT25lQ29ubmVjdGlvbiAmIFBvc3RDb25uZWN0aW9uRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdQb3N0VG9QcmV2aWV3Q29ubmVjdGlvbkVkZ2UnO1xuICAvKiogT3BhcXVlIHJlZmVyZW5jZSB0byB0aGUgbm9kZXMgcG9zaXRpb24gaW4gdGhlIGNvbm5lY3Rpb24uIFZhbHVlIGNhbiBiZSB1c2VkIHdpdGggcGFnaW5hdGlvbiBhcmdzLiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIG5vZGUgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGU6IFBvc3Q7XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBQb3N0IHR5cGUgYW5kIHRoZSBwb3N0IHR5cGUgKi9cbmV4cG9ydCB0eXBlIFBvc3RUb1JldmlzaW9uQ29ubmVjdGlvbiA9IENvbm5lY3Rpb24gJiBQb3N0Q29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdQb3N0VG9SZXZpc2lvbkNvbm5lY3Rpb24nO1xuICAvKiogRWRnZXMgZm9yIHRoZSBQb3N0VG9SZXZpc2lvbkNvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8UG9zdFRvUmV2aXNpb25Db25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxQb3N0PjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogUG9zdFRvUmV2aXNpb25Db25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFBvc3RUb1JldmlzaW9uQ29ubmVjdGlvbkVkZ2UgPSBFZGdlICYgUG9zdENvbm5lY3Rpb25FZGdlICYge1xuICBfX3R5cGVuYW1lPzogJ1Bvc3RUb1JldmlzaW9uQ29ubmVjdGlvbkVkZ2UnO1xuICAvKiogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaXRlbSBhdCB0aGUgZW5kIG9mIHRoZSBlZGdlICovXG4gIG5vZGU6IFBvc3Q7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtQb3N0VG9SZXZpc2lvbkNvbm5lY3Rpb24mcXVvdDsgKi9cbmV4cG9ydCB0eXBlIFBvc3RUb1JldmlzaW9uQ29ubmVjdGlvblBhZ2VJbmZvID0gUGFnZUluZm8gJiBQb3N0Q29ubmVjdGlvblBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdQb3N0VG9SZXZpc2lvbkNvbm5lY3Rpb25QYWdlSW5mbyc7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogQXJndW1lbnRzIGZvciBmaWx0ZXJpbmcgdGhlIFBvc3RUb1JldmlzaW9uQ29ubmVjdGlvbiBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBQb3N0VG9SZXZpc2lvbkNvbm5lY3Rpb25XaGVyZUFyZ3MgPSB7XG4gIC8qKiBUaGUgdXNlciB0aGF0J3MgY29ubmVjdGVkIGFzIHRoZSBhdXRob3Igb2YgdGhlIG9iamVjdC4gVXNlIHRoZSB1c2VySWQgZm9yIHRoZSBhdXRob3Igb2JqZWN0LiAqL1xuICBhdXRob3I/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIEZpbmQgb2JqZWN0cyBjb25uZWN0ZWQgdG8gYXV0aG9yKHMpIGluIHRoZSBhcnJheSBvZiBhdXRob3IncyB1c2VySWRzICovXG4gIGF1dGhvckluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBGaW5kIG9iamVjdHMgY29ubmVjdGVkIHRvIHRoZSBhdXRob3IgYnkgdGhlIGF1dGhvcidzIG5pY2VuYW1lICovXG4gIGF1dGhvck5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEZpbmQgb2JqZWN0cyBOT1QgY29ubmVjdGVkIHRvIGF1dGhvcihzKSBpbiB0aGUgYXJyYXkgb2YgYXV0aG9yJ3MgdXNlcklkcyAqL1xuICBhdXRob3JOb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQ2F0ZWdvcnkgSUQgKi9cbiAgY2F0ZWdvcnlJZD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgY2F0ZWdvcnkgSURzLCB1c2VkIHRvIGRpc3BsYXkgb2JqZWN0cyBmcm9tIG9uZSBjYXRlZ29yeSBPUiBhbm90aGVyICovXG4gIGNhdGVnb3J5SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFVzZSBDYXRlZ29yeSBTbHVnICovXG4gIGNhdGVnb3J5TmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgY2F0ZWdvcnkgSURzLCB1c2VkIHRvIGRpc3BsYXkgb2JqZWN0cyBmcm9tIG9uZSBjYXRlZ29yeSBPUiBhbm90aGVyICovXG4gIGNhdGVnb3J5Tm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEZpbHRlciB0aGUgY29ubmVjdGlvbiBiYXNlZCBvbiBkYXRlcyAqL1xuICBkYXRlUXVlcnk/OiBJbnB1dE1heWJlPERhdGVRdWVyeUlucHV0PjtcbiAgLyoqIFRydWUgZm9yIG9iamVjdHMgd2l0aCBwYXNzd29yZHM7IEZhbHNlIGZvciBvYmplY3RzIHdpdGhvdXQgcGFzc3dvcmRzOyBudWxsIGZvciBhbGwgb2JqZWN0cyB3aXRoIG9yIHdpdGhvdXQgcGFzc3dvcmRzICovXG4gIGhhc1Bhc3N3b3JkPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmaWMgZGF0YWJhc2UgSUQgb2YgdGhlIG9iamVjdCAqL1xuICBpZD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgSURzIGZvciB0aGUgb2JqZWN0cyB0byByZXRyaWV2ZSAqL1xuICBpbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogR2V0IG9iamVjdHMgd2l0aCBhIHNwZWNpZmljIG1pbWVUeXBlIHByb3BlcnR5ICovXG4gIG1pbWVUeXBlPzogSW5wdXRNYXliZTxNaW1lVHlwZUVudW0+O1xuICAvKiogU2x1ZyAvIHBvc3RfbmFtZSBvZiB0aGUgb2JqZWN0ICovXG4gIG5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFNwZWNpZnkgb2JqZWN0cyB0byByZXRyaWV2ZS4gVXNlIHNsdWdzICovXG4gIG5hbWVJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNwZWNpZnkgSURzIE5PVCB0byByZXRyaWV2ZS4gSWYgdGhpcyBpcyB1c2VkIGluIHRoZSBzYW1lIHF1ZXJ5IGFzIFwiaW5cIiwgaXQgd2lsbCBiZSBpZ25vcmVkICovXG4gIG5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBXaGF0IHBhcmFtZXRlciB0byB1c2UgdG8gb3JkZXIgdGhlIG9iamVjdHMgYnkuICovXG4gIG9yZGVyYnk/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8UG9zdE9iamVjdHNDb25uZWN0aW9uT3JkZXJieUlucHV0Pj4+O1xuICAvKiogVXNlIElEIHRvIHJldHVybiBvbmx5IGNoaWxkcmVuLiBVc2UgMCB0byByZXR1cm4gb25seSB0b3AtbGV2ZWwgaXRlbXMgKi9cbiAgcGFyZW50PzogSW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPjtcbiAgLyoqIFNwZWNpZnkgb2JqZWN0cyB3aG9zZSBwYXJlbnQgaXMgaW4gYW4gYXJyYXkgKi9cbiAgcGFyZW50SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNwZWNpZnkgcG9zdHMgd2hvc2UgcGFyZW50IGlzIG5vdCBpbiBhbiBhcnJheSAqL1xuICBwYXJlbnROb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogU2hvdyBwb3N0cyB3aXRoIGEgc3BlY2lmaWMgcGFzc3dvcmQuICovXG4gIHBhc3N3b3JkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBTaG93IFBvc3RzIGJhc2VkIG9uIGEga2V5d29yZCBzZWFyY2ggKi9cbiAgc2VhcmNoPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBSZXRyaWV2ZSBwb3N0cyB3aGVyZSBwb3N0IHN0YXR1cyBpcyBpbiBhbiBhcnJheS4gKi9cbiAgc3RhdGk/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+Pj47XG4gIC8qKiBTaG93IHBvc3RzIHdpdGggYSBzcGVjaWZpYyBzdGF0dXMuICovXG4gIHN0YXR1cz86IElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+O1xuICAvKiogVGFnIFNsdWcgKi9cbiAgdGFnPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBVc2UgVGFnIElEICovXG4gIHRhZ0lkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiB0YWcgSURzLCB1c2VkIHRvIGRpc3BsYXkgb2JqZWN0cyBmcm9tIG9uZSB0YWcgT1IgYW5vdGhlciAqL1xuICB0YWdJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgdGFnIElEcywgdXNlZCB0byBkaXNwbGF5IG9iamVjdHMgZnJvbSBvbmUgdGFnIE9SIGFub3RoZXIgKi9cbiAgdGFnTm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIHRhZyBzbHVncywgdXNlZCB0byBkaXNwbGF5IG9iamVjdHMgZnJvbSBvbmUgdGFnIEFORCBhbm90aGVyICovXG4gIHRhZ1NsdWdBbmQ/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiB0YWcgc2x1Z3MsIHVzZWQgdG8gaW5jbHVkZSBvYmplY3RzIGluIEFOWSBzcGVjaWZpZWQgdGFncyAqL1xuICB0YWdTbHVnSW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBUaXRsZSBvZiB0aGUgb2JqZWN0ICovXG4gIHRpdGxlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBQb3N0IHR5cGUgYW5kIHRoZSB0YWcgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUG9zdFRvVGFnQ29ubmVjdGlvbiA9IENvbm5lY3Rpb24gJiBUYWdDb25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ1Bvc3RUb1RhZ0Nvbm5lY3Rpb24nO1xuICAvKiogRWRnZXMgZm9yIHRoZSBQb3N0VG9UYWdDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbiAgZWRnZXM6IEFycmF5PFBvc3RUb1RhZ0Nvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBub2RlcyBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZXM6IEFycmF5PFRhZz47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFBvc3RUb1RhZ0Nvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBBbiBlZGdlIGluIGEgY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgUG9zdFRvVGFnQ29ubmVjdGlvbkVkZ2UgPSBFZGdlICYgVGFnQ29ubmVjdGlvbkVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnUG9zdFRvVGFnQ29ubmVjdGlvbkVkZ2UnO1xuICAvKiogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaXRlbSBhdCB0aGUgZW5kIG9mIHRoZSBlZGdlICovXG4gIG5vZGU6IFRhZztcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlICZxdW90O1Bvc3RUb1RhZ0Nvbm5lY3Rpb24mcXVvdDsgKi9cbmV4cG9ydCB0eXBlIFBvc3RUb1RhZ0Nvbm5lY3Rpb25QYWdlSW5mbyA9IFBhZ2VJbmZvICYgVGFnQ29ubmVjdGlvblBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdQb3N0VG9UYWdDb25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIEFyZ3VtZW50cyBmb3IgZmlsdGVyaW5nIHRoZSBQb3N0VG9UYWdDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFBvc3RUb1RhZ0Nvbm5lY3Rpb25XaGVyZUFyZ3MgPSB7XG4gIC8qKiBVbmlxdWUgY2FjaGUga2V5IHRvIGJlIHByb2R1Y2VkIHdoZW4gdGhpcyBxdWVyeSBpcyBzdG9yZWQgaW4gYW4gb2JqZWN0IGNhY2hlLiBEZWZhdWx0IGlzICdjb3JlJy4gKi9cbiAgY2FjaGVEb21haW4/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRlcm0gSUQgdG8gcmV0cmlldmUgY2hpbGQgdGVybXMgb2YuIElmIG11bHRpcGxlIHRheG9ub21pZXMgYXJlIHBhc3NlZCwgJGNoaWxkX29mIGlzIGlnbm9yZWQuIERlZmF1bHQgMC4gKi9cbiAgY2hpbGRPZj86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogVHJ1ZSB0byBsaW1pdCByZXN1bHRzIHRvIHRlcm1zIHRoYXQgaGF2ZSBubyBjaGlsZHJlbi4gVGhpcyBwYXJhbWV0ZXIgaGFzIG5vIGVmZmVjdCBvbiBub24taGllcmFyY2hpY2FsIHRheG9ub21pZXMuIERlZmF1bHQgZmFsc2UuICovXG4gIGNoaWxkbGVzcz86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIFJldHJpZXZlIHRlcm1zIHdoZXJlIHRoZSBkZXNjcmlwdGlvbiBpcyBMSUtFIHRoZSBpbnB1dCB2YWx1ZS4gRGVmYXVsdCBlbXB0eS4gKi9cbiAgZGVzY3JpcHRpb25MaWtlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiB0ZXJtIGlkcyB0byBleGNsdWRlLiBJZiAkaW5jbHVkZSBpcyBub24tZW1wdHksICRleGNsdWRlIGlzIGlnbm9yZWQuIERlZmF1bHQgZW1wdHkgYXJyYXkuICovXG4gIGV4Y2x1ZGU/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIHRlcm0gaWRzIHRvIGV4Y2x1ZGUgYWxvbmcgd2l0aCBhbGwgb2YgdGhlaXIgZGVzY2VuZGFudCB0ZXJtcy4gSWYgJGluY2x1ZGUgaXMgbm9uLWVtcHR5LCAkZXhjbHVkZV90cmVlIGlzIGlnbm9yZWQuIERlZmF1bHQgZW1wdHkgYXJyYXkuICovXG4gIGV4Y2x1ZGVUcmVlPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBXaGV0aGVyIHRvIGhpZGUgdGVybXMgbm90IGFzc2lnbmVkIHRvIGFueSBwb3N0cy4gQWNjZXB0cyB0cnVlIG9yIGZhbHNlLiBEZWZhdWx0IGZhbHNlICovXG4gIGhpZGVFbXB0eT86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdG8gaW5jbHVkZSB0ZXJtcyB0aGF0IGhhdmUgbm9uLWVtcHR5IGRlc2NlbmRhbnRzIChldmVuIGlmICRoaWRlX2VtcHR5IGlzIHNldCB0byB0cnVlKS4gRGVmYXVsdCB0cnVlLiAqL1xuICBoaWVyYXJjaGljYWw/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiB0ZXJtIGlkcyB0byBpbmNsdWRlLiBEZWZhdWx0IGVtcHR5IGFycmF5LiAqL1xuICBpbmNsdWRlPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBuYW1lcyB0byByZXR1cm4gdGVybShzKSBmb3IuIERlZmF1bHQgZW1wdHkuICovXG4gIG5hbWU/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBSZXRyaWV2ZSB0ZXJtcyB3aGVyZSB0aGUgbmFtZSBpcyBMSUtFIHRoZSBpbnB1dCB2YWx1ZS4gRGVmYXVsdCBlbXB0eS4gKi9cbiAgbmFtZUxpa2U/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIG9iamVjdCBJRHMuIFJlc3VsdHMgd2lsbCBiZSBsaW1pdGVkIHRvIHRlcm1zIGFzc29jaWF0ZWQgd2l0aCB0aGVzZSBvYmplY3RzLiAqL1xuICBvYmplY3RJZHM/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIERpcmVjdGlvbiB0aGUgY29ubmVjdGlvbiBzaG91bGQgYmUgb3JkZXJlZCBpbiAqL1xuICBvcmRlcj86IElucHV0TWF5YmU8T3JkZXJFbnVtPjtcbiAgLyoqIEZpZWxkKHMpIHRvIG9yZGVyIHRlcm1zIGJ5LiBEZWZhdWx0cyB0byAnbmFtZScuICovXG4gIG9yZGVyYnk/OiBJbnB1dE1heWJlPFRlcm1PYmplY3RzQ29ubmVjdGlvbk9yZGVyYnlFbnVtPjtcbiAgLyoqIFdoZXRoZXIgdG8gcGFkIHRoZSBxdWFudGl0eSBvZiBhIHRlcm0ncyBjaGlsZHJlbiBpbiB0aGUgcXVhbnRpdHkgb2YgZWFjaCB0ZXJtJ3MgXCJjb3VudFwiIG9iamVjdCB2YXJpYWJsZS4gRGVmYXVsdCBmYWxzZS4gKi9cbiAgcGFkQ291bnRzPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogUGFyZW50IHRlcm0gSUQgdG8gcmV0cmlldmUgZGlyZWN0LWNoaWxkIHRlcm1zIG9mLiBEZWZhdWx0IGVtcHR5LiAqL1xuICBwYXJlbnQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIFNlYXJjaCBjcml0ZXJpYSB0byBtYXRjaCB0ZXJtcy4gV2lsbCBiZSBTUUwtZm9ybWF0dGVkIHdpdGggd2lsZGNhcmRzIGJlZm9yZSBhbmQgYWZ0ZXIuIERlZmF1bHQgZW1wdHkuICovXG4gIHNlYXJjaD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2Ygc2x1Z3MgdG8gcmV0dXJuIHRlcm0ocykgZm9yLiBEZWZhdWx0IGVtcHR5LiAqL1xuICBzbHVnPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgdGVybSB0YXhvbm9teSBJRHMsIHRvIG1hdGNoIHdoZW4gcXVlcnlpbmcgdGVybXMuICovXG4gIHRlcm1UYXhvbm9tSWQ/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIHRlcm0gdGF4b25vbXkgSURzLCB0byBtYXRjaCB3aGVuIHF1ZXJ5aW5nIHRlcm1zLiAqL1xuICB0ZXJtVGF4b25vbXlJZD86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogV2hldGhlciB0byBwcmltZSBtZXRhIGNhY2hlcyBmb3IgbWF0Y2hlZCB0ZXJtcy4gRGVmYXVsdCB0cnVlLiAqL1xuICB1cGRhdGVUZXJtTWV0YUNhY2hlPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgUG9zdCB0eXBlIGFuZCB0aGUgVGVybU5vZGUgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUG9zdFRvVGVybU5vZGVDb25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIFRlcm1Ob2RlQ29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdQb3N0VG9UZXJtTm9kZUNvbm5lY3Rpb24nO1xuICAvKiogRWRnZXMgZm9yIHRoZSBQb3N0VG9UZXJtTm9kZUNvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8UG9zdFRvVGVybU5vZGVDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxUZXJtTm9kZT47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFBvc3RUb1Rlcm1Ob2RlQ29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEFuIGVkZ2UgaW4gYSBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBQb3N0VG9UZXJtTm9kZUNvbm5lY3Rpb25FZGdlID0gRWRnZSAmIFRlcm1Ob2RlQ29ubmVjdGlvbkVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnUG9zdFRvVGVybU5vZGVDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogVGVybU5vZGU7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtQb3N0VG9UZXJtTm9kZUNvbm5lY3Rpb24mcXVvdDsgKi9cbmV4cG9ydCB0eXBlIFBvc3RUb1Rlcm1Ob2RlQ29ubmVjdGlvblBhZ2VJbmZvID0gUGFnZUluZm8gJiBUZXJtTm9kZUNvbm5lY3Rpb25QYWdlSW5mbyAmIFdwUGFnZUluZm8gJiB7XG4gIF9fdHlwZW5hbWU/OiAnUG9zdFRvVGVybU5vZGVDb25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIEFyZ3VtZW50cyBmb3IgZmlsdGVyaW5nIHRoZSBQb3N0VG9UZXJtTm9kZUNvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgUG9zdFRvVGVybU5vZGVDb25uZWN0aW9uV2hlcmVBcmdzID0ge1xuICAvKiogVW5pcXVlIGNhY2hlIGtleSB0byBiZSBwcm9kdWNlZCB3aGVuIHRoaXMgcXVlcnkgaXMgc3RvcmVkIGluIGFuIG9iamVjdCBjYWNoZS4gRGVmYXVsdCBpcyAnY29yZScuICovXG4gIGNhY2hlRG9tYWluPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUZXJtIElEIHRvIHJldHJpZXZlIGNoaWxkIHRlcm1zIG9mLiBJZiBtdWx0aXBsZSB0YXhvbm9taWVzIGFyZSBwYXNzZWQsICRjaGlsZF9vZiBpcyBpZ25vcmVkLiBEZWZhdWx0IDAuICovXG4gIGNoaWxkT2Y/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIFRydWUgdG8gbGltaXQgcmVzdWx0cyB0byB0ZXJtcyB0aGF0IGhhdmUgbm8gY2hpbGRyZW4uIFRoaXMgcGFyYW1ldGVyIGhhcyBubyBlZmZlY3Qgb24gbm9uLWhpZXJhcmNoaWNhbCB0YXhvbm9taWVzLiBEZWZhdWx0IGZhbHNlLiAqL1xuICBjaGlsZGxlc3M/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBSZXRyaWV2ZSB0ZXJtcyB3aGVyZSB0aGUgZGVzY3JpcHRpb24gaXMgTElLRSB0aGUgaW5wdXQgdmFsdWUuIERlZmF1bHQgZW1wdHkuICovXG4gIGRlc2NyaXB0aW9uTGlrZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgdGVybSBpZHMgdG8gZXhjbHVkZS4gSWYgJGluY2x1ZGUgaXMgbm9uLWVtcHR5LCAkZXhjbHVkZSBpcyBpZ25vcmVkLiBEZWZhdWx0IGVtcHR5IGFycmF5LiAqL1xuICBleGNsdWRlPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiB0ZXJtIGlkcyB0byBleGNsdWRlIGFsb25nIHdpdGggYWxsIG9mIHRoZWlyIGRlc2NlbmRhbnQgdGVybXMuIElmICRpbmNsdWRlIGlzIG5vbi1lbXB0eSwgJGV4Y2x1ZGVfdHJlZSBpcyBpZ25vcmVkLiBEZWZhdWx0IGVtcHR5IGFycmF5LiAqL1xuICBleGNsdWRlVHJlZT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogV2hldGhlciB0byBoaWRlIHRlcm1zIG5vdCBhc3NpZ25lZCB0byBhbnkgcG9zdHMuIEFjY2VwdHMgdHJ1ZSBvciBmYWxzZS4gRGVmYXVsdCBmYWxzZSAqL1xuICBoaWRlRW1wdHk/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBXaGV0aGVyIHRvIGluY2x1ZGUgdGVybXMgdGhhdCBoYXZlIG5vbi1lbXB0eSBkZXNjZW5kYW50cyAoZXZlbiBpZiAkaGlkZV9lbXB0eSBpcyBzZXQgdG8gdHJ1ZSkuIERlZmF1bHQgdHJ1ZS4gKi9cbiAgaGllcmFyY2hpY2FsPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgdGVybSBpZHMgdG8gaW5jbHVkZS4gRGVmYXVsdCBlbXB0eSBhcnJheS4gKi9cbiAgaW5jbHVkZT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgbmFtZXMgdG8gcmV0dXJuIHRlcm0ocykgZm9yLiBEZWZhdWx0IGVtcHR5LiAqL1xuICBuYW1lPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogUmV0cmlldmUgdGVybXMgd2hlcmUgdGhlIG5hbWUgaXMgTElLRSB0aGUgaW5wdXQgdmFsdWUuIERlZmF1bHQgZW1wdHkuICovXG4gIG5hbWVMaWtlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBvYmplY3QgSURzLiBSZXN1bHRzIHdpbGwgYmUgbGltaXRlZCB0byB0ZXJtcyBhc3NvY2lhdGVkIHdpdGggdGhlc2Ugb2JqZWN0cy4gKi9cbiAgb2JqZWN0SWRzPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBEaXJlY3Rpb24gdGhlIGNvbm5lY3Rpb24gc2hvdWxkIGJlIG9yZGVyZWQgaW4gKi9cbiAgb3JkZXI/OiBJbnB1dE1heWJlPE9yZGVyRW51bT47XG4gIC8qKiBGaWVsZChzKSB0byBvcmRlciB0ZXJtcyBieS4gRGVmYXVsdHMgdG8gJ25hbWUnLiAqL1xuICBvcmRlcmJ5PzogSW5wdXRNYXliZTxUZXJtT2JqZWN0c0Nvbm5lY3Rpb25PcmRlcmJ5RW51bT47XG4gIC8qKiBXaGV0aGVyIHRvIHBhZCB0aGUgcXVhbnRpdHkgb2YgYSB0ZXJtJ3MgY2hpbGRyZW4gaW4gdGhlIHF1YW50aXR5IG9mIGVhY2ggdGVybSdzIFwiY291bnRcIiBvYmplY3QgdmFyaWFibGUuIERlZmF1bHQgZmFsc2UuICovXG4gIHBhZENvdW50cz86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIFBhcmVudCB0ZXJtIElEIHRvIHJldHJpZXZlIGRpcmVjdC1jaGlsZCB0ZXJtcyBvZi4gRGVmYXVsdCBlbXB0eS4gKi9cbiAgcGFyZW50PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBTZWFyY2ggY3JpdGVyaWEgdG8gbWF0Y2ggdGVybXMuIFdpbGwgYmUgU1FMLWZvcm1hdHRlZCB3aXRoIHdpbGRjYXJkcyBiZWZvcmUgYW5kIGFmdGVyLiBEZWZhdWx0IGVtcHR5LiAqL1xuICBzZWFyY2g/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIHNsdWdzIHRvIHJldHVybiB0ZXJtKHMpIGZvci4gRGVmYXVsdCBlbXB0eS4gKi9cbiAgc2x1Zz86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFRoZSBUYXhvbm9teSB0byBmaWx0ZXIgdGVybXMgYnkgKi9cbiAgdGF4b25vbWllcz86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxUYXhvbm9teUVudW0+Pj47XG4gIC8qKiBBcnJheSBvZiB0ZXJtIHRheG9ub215IElEcywgdG8gbWF0Y2ggd2hlbiBxdWVyeWluZyB0ZXJtcy4gKi9cbiAgdGVybVRheG9ub21JZD86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgdGVybSB0YXhvbm9teSBJRHMsIHRvIG1hdGNoIHdoZW4gcXVlcnlpbmcgdGVybXMuICovXG4gIHRlcm1UYXhvbm9teUlkPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBXaGV0aGVyIHRvIHByaW1lIG1ldGEgY2FjaGVzIGZvciBtYXRjaGVkIHRlcm1zLiBEZWZhdWx0IHRydWUuICovXG4gIHVwZGF0ZVRlcm1NZXRhQ2FjaGU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG59O1xuXG4vKiogRGV0YWlscyBmb3IgbGFiZWxzIG9mIHRoZSBQb3N0VHlwZSAqL1xuZXhwb3J0IHR5cGUgUG9zdFR5cGVMYWJlbERldGFpbHMgPSB7XG4gIF9fdHlwZW5hbWU/OiAnUG9zdFR5cGVMYWJlbERldGFpbHMnO1xuICAvKiogRGVmYXVsdCBpcyDigJhBZGQgTmV34oCZIGZvciBib3RoIGhpZXJhcmNoaWNhbCBhbmQgbm9uLWhpZXJhcmNoaWNhbCB0eXBlcy4gKi9cbiAgYWRkTmV3PzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIExhYmVsIGZvciBhZGRpbmcgYSBuZXcgc2luZ3VsYXIgaXRlbS4gKi9cbiAgYWRkTmV3SXRlbT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBMYWJlbCB0byBzaWduaWZ5IGFsbCBpdGVtcyBpbiBhIHN1Ym1lbnUgbGluay4gKi9cbiAgYWxsSXRlbXM/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogTGFiZWwgZm9yIGFyY2hpdmVzIGluIG5hdiBtZW51cyAqL1xuICBhcmNoaXZlcz86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBMYWJlbCBmb3IgdGhlIGF0dHJpYnV0ZXMgbWV0YSBib3guICovXG4gIGF0dHJpYnV0ZXM/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogTGFiZWwgZm9yIGVkaXRpbmcgYSBzaW5ndWxhciBpdGVtLiAqL1xuICBlZGl0SXRlbT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBMYWJlbCBmb3IgdGhlIEZlYXR1cmVkIEltYWdlIG1ldGEgYm94IHRpdGxlLiAqL1xuICBmZWF0dXJlZEltYWdlPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIExhYmVsIGZvciB0aGUgdGFibGUgdmlld3MgaGlkZGVuIGhlYWRpbmcuICovXG4gIGZpbHRlckl0ZW1zTGlzdD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBMYWJlbCBmb3IgdGhlIG1lZGlhIGZyYW1lIGJ1dHRvbi4gKi9cbiAgaW5zZXJ0SW50b0l0ZW0/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogTGFiZWwgZm9yIHRoZSB0YWJsZSBoaWRkZW4gaGVhZGluZy4gKi9cbiAgaXRlbXNMaXN0PzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIExhYmVsIGZvciB0aGUgdGFibGUgcGFnaW5hdGlvbiBoaWRkZW4gaGVhZGluZy4gKi9cbiAgaXRlbXNMaXN0TmF2aWdhdGlvbj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBMYWJlbCBmb3IgdGhlIG1lbnUgbmFtZS4gKi9cbiAgbWVudU5hbWU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogR2VuZXJhbCBuYW1lIGZvciB0aGUgcG9zdCB0eXBlLCB1c3VhbGx5IHBsdXJhbC4gKi9cbiAgbmFtZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBMYWJlbCBmb3IgdGhlIG5ldyBpdGVtIHBhZ2UgdGl0bGUuICovXG4gIG5ld0l0ZW0/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogTGFiZWwgdXNlZCB3aGVuIG5vIGl0ZW1zIGFyZSBmb3VuZC4gKi9cbiAgbm90Rm91bmQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogTGFiZWwgdXNlZCB3aGVuIG5vIGl0ZW1zIGFyZSBpbiB0aGUgdHJhc2guICovXG4gIG5vdEZvdW5kSW5UcmFzaD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBMYWJlbCB1c2VkIHRvIHByZWZpeCBwYXJlbnRzIG9mIGhpZXJhcmNoaWNhbCBpdGVtcy4gKi9cbiAgcGFyZW50SXRlbUNvbG9uPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIExhYmVsIGZvciByZW1vdmluZyB0aGUgZmVhdHVyZWQgaW1hZ2UuICovXG4gIHJlbW92ZUZlYXR1cmVkSW1hZ2U/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogTGFiZWwgZm9yIHNlYXJjaGluZyBwbHVyYWwgaXRlbXMuICovXG4gIHNlYXJjaEl0ZW1zPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIExhYmVsIGZvciBzZXR0aW5nIHRoZSBmZWF0dXJlZCBpbWFnZS4gKi9cbiAgc2V0RmVhdHVyZWRJbWFnZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBOYW1lIGZvciBvbmUgb2JqZWN0IG9mIHRoaXMgcG9zdCB0eXBlLiAqL1xuICBzaW5ndWxhck5hbWU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogTGFiZWwgZm9yIHRoZSBtZWRpYSBmcmFtZSBmaWx0ZXIuICovXG4gIHVwbG9hZGVkVG9UaGlzSXRlbT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBMYWJlbCBpbiB0aGUgbWVkaWEgZnJhbWUgZm9yIHVzaW5nIGEgZmVhdHVyZWQgaW1hZ2UuICovXG4gIHVzZUZlYXR1cmVkSW1hZ2U/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogTGFiZWwgZm9yIHZpZXdpbmcgYSBzaW5ndWxhciBpdGVtLiAqL1xuICB2aWV3SXRlbT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBMYWJlbCBmb3Igdmlld2luZyBwb3N0IHR5cGUgYXJjaGl2ZXMuICovXG4gIHZpZXdJdGVtcz86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogTm9kZXMgdGhhdCBjYW4gYmUgc2VlbiBpbiBhIHByZXZpZXcgKHVucHVibGlzaGVkKSBzdGF0ZS4gKi9cbmV4cG9ydCB0eXBlIFByZXZpZXdhYmxlID0ge1xuICAvKiogV2hldGhlciB0aGUgb2JqZWN0IGlzIGEgbm9kZSBpbiB0aGUgcHJldmlldyBzdGF0ZSAqL1xuICBpc1ByZXZpZXc/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBkYXRhYmFzZSBpZCBvZiB0aGUgcHJldmlldyBub2RlICovXG4gIHByZXZpZXdSZXZpc2lvbkRhdGFiYXNlSWQ/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogV2hldGhlciB0aGUgb2JqZWN0IGlzIGEgbm9kZSBpbiB0aGUgcHJldmlldyBzdGF0ZSAqL1xuICBwcmV2aWV3UmV2aXNpb25JZD86IE1heWJlPFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBUaGUgcmVhZGluZyBzZXR0aW5nIHR5cGUgKi9cbmV4cG9ydCB0eXBlIFJlYWRpbmdTZXR0aW5ncyA9IHtcbiAgX190eXBlbmFtZT86ICdSZWFkaW5nU2V0dGluZ3MnO1xuICAvKiogVGhlIElEIG9mIHRoZSBwYWdlIHRoYXQgc2hvdWxkIGRpc3BsYXkgdGhlIGxhdGVzdCBwb3N0cyAqL1xuICBwYWdlRm9yUG9zdHM/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIElEIG9mIHRoZSBwYWdlIHRoYXQgc2hvdWxkIGJlIGRpc3BsYXllZCBvbiB0aGUgZnJvbnQgcGFnZSAqL1xuICBwYWdlT25Gcm9udD86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBCbG9nIHBhZ2VzIHNob3cgYXQgbW9zdC4gKi9cbiAgcG9zdHNQZXJQYWdlPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIFdoYXQgdG8gc2hvdyBvbiB0aGUgZnJvbnQgcGFnZSAqL1xuICBzaG93T25Gcm9udD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogSW5wdXQgZm9yIHRoZSByZWdpc3RlclVzZXIgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBSZWdpc3RlclVzZXJJbnB1dCA9IHtcbiAgLyoqIFVzZXIncyBBT0wgSU0gYWNjb3VudC4gKi9cbiAgYWltPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGlzIGlzIGFuIElEIHRoYXQgY2FuIGJlIHBhc3NlZCB0byBhIG11dGF0aW9uIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBIHN0cmluZyBjb250YWluaW5nIGNvbnRlbnQgYWJvdXQgdGhlIHVzZXIuICovXG4gIGRlc2NyaXB0aW9uPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBIHN0cmluZyB0aGF0IHdpbGwgYmUgc2hvd24gb24gdGhlIHNpdGUuIERlZmF1bHRzIHRvIHVzZXIncyB1c2VybmFtZS4gSXQgaXMgbGlrZWx5IHRoYXQgeW91IHdpbGwgd2FudCB0byBjaGFuZ2UgdGhpcywgZm9yIGJvdGggYXBwZWFyYW5jZSBhbmQgc2VjdXJpdHkgdGhyb3VnaCBvYnNjdXJpdHkgKHRoYXQgaXMgaWYgeW91IGRvbnQgdXNlIGFuZCBkZWxldGUgdGhlIGRlZmF1bHQgYWRtaW4gdXNlcikuICovXG4gIGRpc3BsYXlOYW1lPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBIHN0cmluZyBjb250YWluaW5nIHRoZSB1c2VyJ3MgZW1haWwgYWRkcmVzcy4gKi9cbiAgZW1haWw/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFx0VGhlIHVzZXIncyBmaXJzdCBuYW1lLiAqL1xuICBmaXJzdE5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFVzZXIncyBKYWJiZXIgYWNjb3VudC4gKi9cbiAgamFiYmVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgdXNlcidzIGxhc3QgbmFtZS4gKi9cbiAgbGFzdE5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFVzZXIncyBsb2NhbGUuICovXG4gIGxvY2FsZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQSBzdHJpbmcgdGhhdCBjb250YWlucyBhIFVSTC1mcmllbmRseSBuYW1lIGZvciB0aGUgdXNlci4gVGhlIGRlZmF1bHQgaXMgdGhlIHVzZXIncyB1c2VybmFtZS4gKi9cbiAgbmljZW5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSB1c2VyJ3Mgbmlja25hbWUsIGRlZmF1bHRzIHRvIHRoZSB1c2VyJ3MgdXNlcm5hbWUuICovXG4gIG5pY2tuYW1lPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBIHN0cmluZyB0aGF0IGNvbnRhaW5zIHRoZSBwbGFpbiB0ZXh0IHBhc3N3b3JkIGZvciB0aGUgdXNlci4gKi9cbiAgcGFzc3dvcmQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBkYXRlIHRoZSB1c2VyIHJlZ2lzdGVyZWQuIEZvcm1hdCBpcyBZLW0tZCBIOmk6cy4gKi9cbiAgcmVnaXN0ZXJlZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQSBzdHJpbmcgZm9yIHdoZXRoZXIgdG8gZW5hYmxlIHRoZSByaWNoIGVkaXRvciBvciBub3QuIEZhbHNlIGlmIG5vdCBlbXB0eS4gKi9cbiAgcmljaEVkaXRpbmc/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEEgc3RyaW5nIHRoYXQgY29udGFpbnMgdGhlIHVzZXIncyB1c2VybmFtZS4gKi9cbiAgdXNlcm5hbWU6IFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddO1xuICAvKiogQSBzdHJpbmcgY29udGFpbmluZyB0aGUgdXNlcidzIFVSTCBmb3IgdGhlIHVzZXIncyB3ZWIgc2l0ZS4gKi9cbiAgd2Vic2l0ZVVybD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVXNlcidzIFlhaG9vIElNIGFjY291bnQuICovXG4gIHlpbT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIFRoZSBwYXlsb2FkIGZvciB0aGUgcmVnaXN0ZXJVc2VyIG11dGF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgUmVnaXN0ZXJVc2VyUGF5bG9hZCA9IHtcbiAgX190eXBlbmFtZT86ICdSZWdpc3RlclVzZXJQYXlsb2FkJztcbiAgLyoqIElmIGEgJiMwMzk7Y2xpZW50TXV0YXRpb25JZCYjMDM5OyBpbnB1dCBpcyBwcm92aWRlZCB0byB0aGUgbXV0YXRpb24sIGl0IHdpbGwgYmUgcmV0dXJuZWQgYXMgb3V0cHV0IG9uIHRoZSBtdXRhdGlvbi4gVGhpcyBJRCBjYW4gYmUgdXNlZCBieSB0aGUgY2xpZW50IHRvIHRyYWNrIHRoZSBwcm9ncmVzcyBvZiBtdXRhdGlvbnMgYW5kIGNhdGNoIHBvc3NpYmxlIGR1cGxpY2F0ZSBtdXRhdGlvbiBzdWJtaXNzaW9ucy4gKi9cbiAgY2xpZW50TXV0YXRpb25JZD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgVXNlciBvYmplY3QgbXV0YXRpb24gdHlwZS4gKi9cbiAgdXNlcj86IE1heWJlPFVzZXI+O1xufTtcblxuLyoqIFRoZSBsb2dpY2FsIHJlbGF0aW9uIGJldHdlZW4gZWFjaCBpdGVtIGluIHRoZSBhcnJheSB3aGVuIHRoZXJlIGFyZSBtb3JlIHRoYW4gb25lLiAqL1xuZXhwb3J0IGVudW0gUmVsYXRpb25FbnVtIHtcbiAgLyoqIFRoZSBsb2dpY2FsIEFORCBjb25kaXRpb24gcmV0dXJucyB0cnVlIGlmIGJvdGggb3BlcmFuZHMgYXJlIHRydWUsIG90aGVyd2lzZSwgaXQgcmV0dXJucyBmYWxzZS4gKi9cbiAgQW5kID0gJ0FORCcsXG4gIC8qKiBUaGUgbG9naWNhbCBPUiBjb25kaXRpb24gcmV0dXJucyBmYWxzZSBpZiBib3RoIG9wZXJhbmRzIGFyZSBmYWxzZSwgb3RoZXJ3aXNlLCBpdCByZXR1cm5zIHRydWUuICovXG4gIE9yID0gJ09SJ1xufVxuXG4vKiogSW5wdXQgZm9yIHRoZSByZXNldFVzZXJQYXNzd29yZCBtdXRhdGlvbi4gKi9cbmV4cG9ydCB0eXBlIFJlc2V0VXNlclBhc3N3b3JkSW5wdXQgPSB7XG4gIC8qKiBUaGlzIGlzIGFuIElEIHRoYXQgY2FuIGJlIHBhc3NlZCB0byBhIG11dGF0aW9uIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBQYXNzd29yZCByZXNldCBrZXkgKi9cbiAga2V5PzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgdXNlcidzIGxvZ2luICh1c2VybmFtZSkuICovXG4gIGxvZ2luPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgbmV3IHBhc3N3b3JkLiAqL1xuICBwYXNzd29yZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIFRoZSBwYXlsb2FkIGZvciB0aGUgcmVzZXRVc2VyUGFzc3dvcmQgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBSZXNldFVzZXJQYXNzd29yZFBheWxvYWQgPSB7XG4gIF9fdHlwZW5hbWU/OiAnUmVzZXRVc2VyUGFzc3dvcmRQYXlsb2FkJztcbiAgLyoqIElmIGEgJiMwMzk7Y2xpZW50TXV0YXRpb25JZCYjMDM5OyBpbnB1dCBpcyBwcm92aWRlZCB0byB0aGUgbXV0YXRpb24sIGl0IHdpbGwgYmUgcmV0dXJuZWQgYXMgb3V0cHV0IG9uIHRoZSBtdXRhdGlvbi4gVGhpcyBJRCBjYW4gYmUgdXNlZCBieSB0aGUgY2xpZW50IHRvIHRyYWNrIHRoZSBwcm9ncmVzcyBvZiBtdXRhdGlvbnMgYW5kIGNhdGNoIHBvc3NpYmxlIGR1cGxpY2F0ZSBtdXRhdGlvbiBzdWJtaXNzaW9ucy4gKi9cbiAgY2xpZW50TXV0YXRpb25JZD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgVXNlciBvYmplY3QgbXV0YXRpb24gdHlwZS4gKi9cbiAgdXNlcj86IE1heWJlPFVzZXI+O1xufTtcblxuLyoqIElucHV0IGZvciB0aGUgcmVzdG9yZUNvbW1lbnQgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBSZXN0b3JlQ29tbWVudElucHV0ID0ge1xuICAvKiogVGhpcyBpcyBhbiBJRCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gYSBtdXRhdGlvbiBieSB0aGUgY2xpZW50IHRvIHRyYWNrIHRoZSBwcm9ncmVzcyBvZiBtdXRhdGlvbnMgYW5kIGNhdGNoIHBvc3NpYmxlIGR1cGxpY2F0ZSBtdXRhdGlvbiBzdWJtaXNzaW9ucy4gKi9cbiAgY2xpZW50TXV0YXRpb25JZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIElEIG9mIHRoZSBjb21tZW50IHRvIGJlIHJlc3RvcmVkICovXG4gIGlkOiBTY2FsYXJzWydJRCddWydpbnB1dCddO1xufTtcblxuLyoqIFRoZSBwYXlsb2FkIGZvciB0aGUgcmVzdG9yZUNvbW1lbnQgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBSZXN0b3JlQ29tbWVudFBheWxvYWQgPSB7XG4gIF9fdHlwZW5hbWU/OiAnUmVzdG9yZUNvbW1lbnRQYXlsb2FkJztcbiAgLyoqIElmIGEgJiMwMzk7Y2xpZW50TXV0YXRpb25JZCYjMDM5OyBpbnB1dCBpcyBwcm92aWRlZCB0byB0aGUgbXV0YXRpb24sIGl0IHdpbGwgYmUgcmV0dXJuZWQgYXMgb3V0cHV0IG9uIHRoZSBtdXRhdGlvbi4gVGhpcyBJRCBjYW4gYmUgdXNlZCBieSB0aGUgY2xpZW50IHRvIHRyYWNrIHRoZSBwcm9ncmVzcyBvZiBtdXRhdGlvbnMgYW5kIGNhdGNoIHBvc3NpYmxlIGR1cGxpY2F0ZSBtdXRhdGlvbiBzdWJtaXNzaW9ucy4gKi9cbiAgY2xpZW50TXV0YXRpb25JZD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgcmVzdG9yZWQgY29tbWVudCBvYmplY3QgKi9cbiAgY29tbWVudD86IE1heWJlPENvbW1lbnQ+O1xuICAvKiogVGhlIElEIG9mIHRoZSByZXN0b3JlZCBjb21tZW50ICovXG4gIHJlc3RvcmVkSWQ/OiBNYXliZTxTY2FsYXJzWydJRCddWydvdXRwdXQnXT47XG59O1xuXG4vKiogVGhlIHJvb3QgbXV0YXRpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RNdXRhdGlvbiA9IHtcbiAgX190eXBlbmFtZT86ICdSb290TXV0YXRpb24nO1xuICAvKiogVGhlIGNyZWF0ZUNhdGVnb3J5IG11dGF0aW9uICovXG4gIGNyZWF0ZUNhdGVnb3J5PzogTWF5YmU8Q3JlYXRlQ2F0ZWdvcnlQYXlsb2FkPjtcbiAgLyoqIFRoZSBjcmVhdGVDb21tZW50IG11dGF0aW9uICovXG4gIGNyZWF0ZUNvbW1lbnQ/OiBNYXliZTxDcmVhdGVDb21tZW50UGF5bG9hZD47XG4gIC8qKiBUaGUgY3JlYXRlTWVkaWFJdGVtIG11dGF0aW9uICovXG4gIGNyZWF0ZU1lZGlhSXRlbT86IE1heWJlPENyZWF0ZU1lZGlhSXRlbVBheWxvYWQ+O1xuICAvKiogVGhlIGNyZWF0ZVBhZ2UgbXV0YXRpb24gKi9cbiAgY3JlYXRlUGFnZT86IE1heWJlPENyZWF0ZVBhZ2VQYXlsb2FkPjtcbiAgLyoqIFRoZSBjcmVhdGVQb3N0IG11dGF0aW9uICovXG4gIGNyZWF0ZVBvc3Q/OiBNYXliZTxDcmVhdGVQb3N0UGF5bG9hZD47XG4gIC8qKiBUaGUgY3JlYXRlUG9zdEZvcm1hdCBtdXRhdGlvbiAqL1xuICBjcmVhdGVQb3N0Rm9ybWF0PzogTWF5YmU8Q3JlYXRlUG9zdEZvcm1hdFBheWxvYWQ+O1xuICAvKiogVGhlIGNyZWF0ZVRhZyBtdXRhdGlvbiAqL1xuICBjcmVhdGVUYWc/OiBNYXliZTxDcmVhdGVUYWdQYXlsb2FkPjtcbiAgLyoqIFRoZSBjcmVhdGVVc2VyIG11dGF0aW9uICovXG4gIGNyZWF0ZVVzZXI/OiBNYXliZTxDcmVhdGVVc2VyUGF5bG9hZD47XG4gIC8qKiBUaGUgZGVsZXRlQ2F0ZWdvcnkgbXV0YXRpb24gKi9cbiAgZGVsZXRlQ2F0ZWdvcnk/OiBNYXliZTxEZWxldGVDYXRlZ29yeVBheWxvYWQ+O1xuICAvKiogVGhlIGRlbGV0ZUNvbW1lbnQgbXV0YXRpb24gKi9cbiAgZGVsZXRlQ29tbWVudD86IE1heWJlPERlbGV0ZUNvbW1lbnRQYXlsb2FkPjtcbiAgLyoqIFRoZSBkZWxldGVNZWRpYUl0ZW0gbXV0YXRpb24gKi9cbiAgZGVsZXRlTWVkaWFJdGVtPzogTWF5YmU8RGVsZXRlTWVkaWFJdGVtUGF5bG9hZD47XG4gIC8qKiBUaGUgZGVsZXRlUGFnZSBtdXRhdGlvbiAqL1xuICBkZWxldGVQYWdlPzogTWF5YmU8RGVsZXRlUGFnZVBheWxvYWQ+O1xuICAvKiogVGhlIGRlbGV0ZVBvc3QgbXV0YXRpb24gKi9cbiAgZGVsZXRlUG9zdD86IE1heWJlPERlbGV0ZVBvc3RQYXlsb2FkPjtcbiAgLyoqIFRoZSBkZWxldGVQb3N0Rm9ybWF0IG11dGF0aW9uICovXG4gIGRlbGV0ZVBvc3RGb3JtYXQ/OiBNYXliZTxEZWxldGVQb3N0Rm9ybWF0UGF5bG9hZD47XG4gIC8qKiBUaGUgZGVsZXRlVGFnIG11dGF0aW9uICovXG4gIGRlbGV0ZVRhZz86IE1heWJlPERlbGV0ZVRhZ1BheWxvYWQ+O1xuICAvKiogVGhlIGRlbGV0ZVVzZXIgbXV0YXRpb24gKi9cbiAgZGVsZXRlVXNlcj86IE1heWJlPERlbGV0ZVVzZXJQYXlsb2FkPjtcbiAgLyoqIEluY3JlYXNlIHRoZSBjb3VudC4gKi9cbiAgaW5jcmVhc2VDb3VudD86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgcmVnaXN0ZXJVc2VyIG11dGF0aW9uICovXG4gIHJlZ2lzdGVyVXNlcj86IE1heWJlPFJlZ2lzdGVyVXNlclBheWxvYWQ+O1xuICAvKiogVGhlIHJlc2V0VXNlclBhc3N3b3JkIG11dGF0aW9uICovXG4gIHJlc2V0VXNlclBhc3N3b3JkPzogTWF5YmU8UmVzZXRVc2VyUGFzc3dvcmRQYXlsb2FkPjtcbiAgLyoqIFRoZSByZXN0b3JlQ29tbWVudCBtdXRhdGlvbiAqL1xuICByZXN0b3JlQ29tbWVudD86IE1heWJlPFJlc3RvcmVDb21tZW50UGF5bG9hZD47XG4gIC8qKiBTZW5kIHBhc3N3b3JkIHJlc2V0IGVtYWlsIHRvIHVzZXIgKi9cbiAgc2VuZFBhc3N3b3JkUmVzZXRFbWFpbD86IE1heWJlPFNlbmRQYXNzd29yZFJlc2V0RW1haWxQYXlsb2FkPjtcbiAgLyoqIFRoZSB1cGRhdGVDYXRlZ29yeSBtdXRhdGlvbiAqL1xuICB1cGRhdGVDYXRlZ29yeT86IE1heWJlPFVwZGF0ZUNhdGVnb3J5UGF5bG9hZD47XG4gIC8qKiBUaGUgdXBkYXRlQ29tbWVudCBtdXRhdGlvbiAqL1xuICB1cGRhdGVDb21tZW50PzogTWF5YmU8VXBkYXRlQ29tbWVudFBheWxvYWQ+O1xuICAvKiogVGhlIHVwZGF0ZU1lZGlhSXRlbSBtdXRhdGlvbiAqL1xuICB1cGRhdGVNZWRpYUl0ZW0/OiBNYXliZTxVcGRhdGVNZWRpYUl0ZW1QYXlsb2FkPjtcbiAgLyoqIFRoZSB1cGRhdGVQYWdlIG11dGF0aW9uICovXG4gIHVwZGF0ZVBhZ2U/OiBNYXliZTxVcGRhdGVQYWdlUGF5bG9hZD47XG4gIC8qKiBUaGUgdXBkYXRlUG9zdCBtdXRhdGlvbiAqL1xuICB1cGRhdGVQb3N0PzogTWF5YmU8VXBkYXRlUG9zdFBheWxvYWQ+O1xuICAvKiogVGhlIHVwZGF0ZVBvc3RGb3JtYXQgbXV0YXRpb24gKi9cbiAgdXBkYXRlUG9zdEZvcm1hdD86IE1heWJlPFVwZGF0ZVBvc3RGb3JtYXRQYXlsb2FkPjtcbiAgLyoqIFRoZSB1cGRhdGVTZXR0aW5ncyBtdXRhdGlvbiAqL1xuICB1cGRhdGVTZXR0aW5ncz86IE1heWJlPFVwZGF0ZVNldHRpbmdzUGF5bG9hZD47XG4gIC8qKiBUaGUgdXBkYXRlVGFnIG11dGF0aW9uICovXG4gIHVwZGF0ZVRhZz86IE1heWJlPFVwZGF0ZVRhZ1BheWxvYWQ+O1xuICAvKiogVGhlIHVwZGF0ZVVzZXIgbXV0YXRpb24gKi9cbiAgdXBkYXRlVXNlcj86IE1heWJlPFVwZGF0ZVVzZXJQYXlsb2FkPjtcbn07XG5cblxuLyoqIFRoZSByb290IG11dGF0aW9uICovXG5leHBvcnQgdHlwZSBSb290TXV0YXRpb25DcmVhdGVDYXRlZ29yeUFyZ3MgPSB7XG4gIGlucHV0OiBDcmVhdGVDYXRlZ29yeUlucHV0O1xufTtcblxuXG4vKiogVGhlIHJvb3QgbXV0YXRpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RNdXRhdGlvbkNyZWF0ZUNvbW1lbnRBcmdzID0ge1xuICBpbnB1dDogQ3JlYXRlQ29tbWVudElucHV0O1xufTtcblxuXG4vKiogVGhlIHJvb3QgbXV0YXRpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RNdXRhdGlvbkNyZWF0ZU1lZGlhSXRlbUFyZ3MgPSB7XG4gIGlucHV0OiBDcmVhdGVNZWRpYUl0ZW1JbnB1dDtcbn07XG5cblxuLyoqIFRoZSByb290IG11dGF0aW9uICovXG5leHBvcnQgdHlwZSBSb290TXV0YXRpb25DcmVhdGVQYWdlQXJncyA9IHtcbiAgaW5wdXQ6IENyZWF0ZVBhZ2VJbnB1dDtcbn07XG5cblxuLyoqIFRoZSByb290IG11dGF0aW9uICovXG5leHBvcnQgdHlwZSBSb290TXV0YXRpb25DcmVhdGVQb3N0QXJncyA9IHtcbiAgaW5wdXQ6IENyZWF0ZVBvc3RJbnB1dDtcbn07XG5cblxuLyoqIFRoZSByb290IG11dGF0aW9uICovXG5leHBvcnQgdHlwZSBSb290TXV0YXRpb25DcmVhdGVQb3N0Rm9ybWF0QXJncyA9IHtcbiAgaW5wdXQ6IENyZWF0ZVBvc3RGb3JtYXRJbnB1dDtcbn07XG5cblxuLyoqIFRoZSByb290IG11dGF0aW9uICovXG5leHBvcnQgdHlwZSBSb290TXV0YXRpb25DcmVhdGVUYWdBcmdzID0ge1xuICBpbnB1dDogQ3JlYXRlVGFnSW5wdXQ7XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBtdXRhdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdE11dGF0aW9uQ3JlYXRlVXNlckFyZ3MgPSB7XG4gIGlucHV0OiBDcmVhdGVVc2VySW5wdXQ7XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBtdXRhdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdE11dGF0aW9uRGVsZXRlQ2F0ZWdvcnlBcmdzID0ge1xuICBpbnB1dDogRGVsZXRlQ2F0ZWdvcnlJbnB1dDtcbn07XG5cblxuLyoqIFRoZSByb290IG11dGF0aW9uICovXG5leHBvcnQgdHlwZSBSb290TXV0YXRpb25EZWxldGVDb21tZW50QXJncyA9IHtcbiAgaW5wdXQ6IERlbGV0ZUNvbW1lbnRJbnB1dDtcbn07XG5cblxuLyoqIFRoZSByb290IG11dGF0aW9uICovXG5leHBvcnQgdHlwZSBSb290TXV0YXRpb25EZWxldGVNZWRpYUl0ZW1BcmdzID0ge1xuICBpbnB1dDogRGVsZXRlTWVkaWFJdGVtSW5wdXQ7XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBtdXRhdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdE11dGF0aW9uRGVsZXRlUGFnZUFyZ3MgPSB7XG4gIGlucHV0OiBEZWxldGVQYWdlSW5wdXQ7XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBtdXRhdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdE11dGF0aW9uRGVsZXRlUG9zdEFyZ3MgPSB7XG4gIGlucHV0OiBEZWxldGVQb3N0SW5wdXQ7XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBtdXRhdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdE11dGF0aW9uRGVsZXRlUG9zdEZvcm1hdEFyZ3MgPSB7XG4gIGlucHV0OiBEZWxldGVQb3N0Rm9ybWF0SW5wdXQ7XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBtdXRhdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdE11dGF0aW9uRGVsZXRlVGFnQXJncyA9IHtcbiAgaW5wdXQ6IERlbGV0ZVRhZ0lucHV0O1xufTtcblxuXG4vKiogVGhlIHJvb3QgbXV0YXRpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RNdXRhdGlvbkRlbGV0ZVVzZXJBcmdzID0ge1xuICBpbnB1dDogRGVsZXRlVXNlcklucHV0O1xufTtcblxuXG4vKiogVGhlIHJvb3QgbXV0YXRpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RNdXRhdGlvbkluY3JlYXNlQ291bnRBcmdzID0ge1xuICBjb3VudD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xufTtcblxuXG4vKiogVGhlIHJvb3QgbXV0YXRpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RNdXRhdGlvblJlZ2lzdGVyVXNlckFyZ3MgPSB7XG4gIGlucHV0OiBSZWdpc3RlclVzZXJJbnB1dDtcbn07XG5cblxuLyoqIFRoZSByb290IG11dGF0aW9uICovXG5leHBvcnQgdHlwZSBSb290TXV0YXRpb25SZXNldFVzZXJQYXNzd29yZEFyZ3MgPSB7XG4gIGlucHV0OiBSZXNldFVzZXJQYXNzd29yZElucHV0O1xufTtcblxuXG4vKiogVGhlIHJvb3QgbXV0YXRpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RNdXRhdGlvblJlc3RvcmVDb21tZW50QXJncyA9IHtcbiAgaW5wdXQ6IFJlc3RvcmVDb21tZW50SW5wdXQ7XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBtdXRhdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdE11dGF0aW9uU2VuZFBhc3N3b3JkUmVzZXRFbWFpbEFyZ3MgPSB7XG4gIGlucHV0OiBTZW5kUGFzc3dvcmRSZXNldEVtYWlsSW5wdXQ7XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBtdXRhdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdE11dGF0aW9uVXBkYXRlQ2F0ZWdvcnlBcmdzID0ge1xuICBpbnB1dDogVXBkYXRlQ2F0ZWdvcnlJbnB1dDtcbn07XG5cblxuLyoqIFRoZSByb290IG11dGF0aW9uICovXG5leHBvcnQgdHlwZSBSb290TXV0YXRpb25VcGRhdGVDb21tZW50QXJncyA9IHtcbiAgaW5wdXQ6IFVwZGF0ZUNvbW1lbnRJbnB1dDtcbn07XG5cblxuLyoqIFRoZSByb290IG11dGF0aW9uICovXG5leHBvcnQgdHlwZSBSb290TXV0YXRpb25VcGRhdGVNZWRpYUl0ZW1BcmdzID0ge1xuICBpbnB1dDogVXBkYXRlTWVkaWFJdGVtSW5wdXQ7XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBtdXRhdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdE11dGF0aW9uVXBkYXRlUGFnZUFyZ3MgPSB7XG4gIGlucHV0OiBVcGRhdGVQYWdlSW5wdXQ7XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBtdXRhdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdE11dGF0aW9uVXBkYXRlUG9zdEFyZ3MgPSB7XG4gIGlucHV0OiBVcGRhdGVQb3N0SW5wdXQ7XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBtdXRhdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdE11dGF0aW9uVXBkYXRlUG9zdEZvcm1hdEFyZ3MgPSB7XG4gIGlucHV0OiBVcGRhdGVQb3N0Rm9ybWF0SW5wdXQ7XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBtdXRhdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdE11dGF0aW9uVXBkYXRlU2V0dGluZ3NBcmdzID0ge1xuICBpbnB1dDogVXBkYXRlU2V0dGluZ3NJbnB1dDtcbn07XG5cblxuLyoqIFRoZSByb290IG11dGF0aW9uICovXG5leHBvcnQgdHlwZSBSb290TXV0YXRpb25VcGRhdGVUYWdBcmdzID0ge1xuICBpbnB1dDogVXBkYXRlVGFnSW5wdXQ7XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBtdXRhdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdE11dGF0aW9uVXBkYXRlVXNlckFyZ3MgPSB7XG4gIGlucHV0OiBVcGRhdGVVc2VySW5wdXQ7XG59O1xuXG4vKiogVGhlIHJvb3QgZW50cnkgcG9pbnQgaW50byB0aGUgR3JhcGggKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeSA9IHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnknO1xuICAvKiogRW50cnkgcG9pbnQgdG8gZ2V0IGFsbCBzZXR0aW5ncyBmb3IgdGhlIHNpdGUgKi9cbiAgYWxsU2V0dGluZ3M/OiBNYXliZTxTZXR0aW5ncz47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFJvb3RRdWVyeSB0eXBlIGFuZCB0aGUgY2F0ZWdvcnkgdHlwZSAqL1xuICBjYXRlZ29yaWVzPzogTWF5YmU8Um9vdFF1ZXJ5VG9DYXRlZ29yeUNvbm5lY3Rpb24+O1xuICAvKiogQSAwYmplY3QgKi9cbiAgY2F0ZWdvcnk/OiBNYXliZTxDYXRlZ29yeT47XG4gIC8qKiBSZXR1cm5zIGEgQ29tbWVudCAqL1xuICBjb21tZW50PzogTWF5YmU8Q29tbWVudD47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFJvb3RRdWVyeSB0eXBlIGFuZCB0aGUgQ29tbWVudCB0eXBlICovXG4gIGNvbW1lbnRzPzogTWF5YmU8Um9vdFF1ZXJ5VG9Db21tZW50Q29ubmVjdGlvbj47XG4gIC8qKiBBIG5vZGUgdXNlZCB0byBtYW5hZ2UgY29udGVudCAqL1xuICBjb250ZW50Tm9kZT86IE1heWJlPENvbnRlbnROb2RlPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgUm9vdFF1ZXJ5IHR5cGUgYW5kIHRoZSBDb250ZW50Tm9kZSB0eXBlICovXG4gIGNvbnRlbnROb2Rlcz86IE1heWJlPFJvb3RRdWVyeVRvQ29udGVudE5vZGVDb25uZWN0aW9uPjtcbiAgLyoqIEZldGNoIGEgQ29udGVudCBUeXBlIG5vZGUgYnkgdW5pcXVlIElkZW50aWZpZXIgKi9cbiAgY29udGVudFR5cGU/OiBNYXliZTxDb250ZW50VHlwZT47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFJvb3RRdWVyeSB0eXBlIGFuZCB0aGUgQ29udGVudFR5cGUgdHlwZSAqL1xuICBjb250ZW50VHlwZXM/OiBNYXliZTxSb290UXVlcnlUb0NvbnRlbnRUeXBlQ29ubmVjdGlvbj47XG4gIC8qKiBGaWVsZHMgb2YgdGhlICYjMDM5O0Rpc2N1c3Npb25TZXR0aW5ncyYjMDM5OyBzZXR0aW5ncyBncm91cCAqL1xuICBkaXNjdXNzaW9uU2V0dGluZ3M/OiBNYXliZTxEaXNjdXNzaW9uU2V0dGluZ3M+O1xuICAvKiogRmllbGRzIG9mIHRoZSAmIzAzOTtHZW5lcmFsU2V0dGluZ3MmIzAzOTsgc2V0dGluZ3MgZ3JvdXAgKi9cbiAgZ2VuZXJhbFNldHRpbmdzPzogTWF5YmU8R2VuZXJhbFNldHRpbmdzPjtcbiAgLyoqIEFuIG9iamVjdCBvZiB0aGUgbWVkaWFJdGVtIFR5cGUuICAqL1xuICBtZWRpYUl0ZW0/OiBNYXliZTxNZWRpYUl0ZW0+O1xuICAvKipcbiAgICogQSBtZWRpYUl0ZW0gb2JqZWN0XG4gICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgdXNpbmcgdGhlIHNpbmdsZSBlbnRyeSBwb2ludCBmb3IgdGhpcyB0eXBlIHdpdGggSUQgYW5kIElEVHlwZSBmaWVsZHMuIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mIHBvc3RCeSggaWQ6ICZxdW90OyZxdW90OyApLCB1c2UgcG9zdChpZDogJnF1b3Q7JnF1b3Q7IGlkVHlwZTogJnF1b3Q7JnF1b3Q7KVxuICAgKi9cbiAgbWVkaWFJdGVtQnk/OiBNYXliZTxNZWRpYUl0ZW0+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBSb290UXVlcnkgdHlwZSBhbmQgdGhlIG1lZGlhSXRlbSB0eXBlICovXG4gIG1lZGlhSXRlbXM/OiBNYXliZTxSb290UXVlcnlUb01lZGlhSXRlbUNvbm5lY3Rpb24+O1xuICAvKiogQSBXb3JkUHJlc3MgbmF2aWdhdGlvbiBtZW51ICovXG4gIG1lbnU/OiBNYXliZTxNZW51PjtcbiAgLyoqIEEgV29yZFByZXNzIG5hdmlnYXRpb24gbWVudSBpdGVtICovXG4gIG1lbnVJdGVtPzogTWF5YmU8TWVudUl0ZW0+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBSb290UXVlcnkgdHlwZSBhbmQgdGhlIE1lbnVJdGVtIHR5cGUgKi9cbiAgbWVudUl0ZW1zPzogTWF5YmU8Um9vdFF1ZXJ5VG9NZW51SXRlbUNvbm5lY3Rpb24+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBSb290UXVlcnkgdHlwZSBhbmQgdGhlIE1lbnUgdHlwZSAqL1xuICBtZW51cz86IE1heWJlPFJvb3RRdWVyeVRvTWVudUNvbm5lY3Rpb24+O1xuICAvKiogRmV0Y2hlcyBhbiBvYmplY3QgZ2l2ZW4gaXRzIElEICovXG4gIG5vZGU/OiBNYXliZTxOb2RlPjtcbiAgLyoqIEZldGNoZXMgYW4gb2JqZWN0IGdpdmVuIGl0cyBVbmlxdWUgUmVzb3VyY2UgSWRlbnRpZmllciAqL1xuICBub2RlQnlVcmk/OiBNYXliZTxVbmlmb3JtUmVzb3VyY2VJZGVudGlmaWFibGU+O1xuICAvKiogQW4gb2JqZWN0IG9mIHRoZSBwYWdlIFR5cGUuICAqL1xuICBwYWdlPzogTWF5YmU8UGFnZT47XG4gIC8qKlxuICAgKiBBIHBhZ2Ugb2JqZWN0XG4gICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgdXNpbmcgdGhlIHNpbmdsZSBlbnRyeSBwb2ludCBmb3IgdGhpcyB0eXBlIHdpdGggSUQgYW5kIElEVHlwZSBmaWVsZHMuIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mIHBvc3RCeSggaWQ6ICZxdW90OyZxdW90OyApLCB1c2UgcG9zdChpZDogJnF1b3Q7JnF1b3Q7IGlkVHlwZTogJnF1b3Q7JnF1b3Q7KVxuICAgKi9cbiAgcGFnZUJ5PzogTWF5YmU8UGFnZT47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFJvb3RRdWVyeSB0eXBlIGFuZCB0aGUgcGFnZSB0eXBlICovXG4gIHBhZ2VzPzogTWF5YmU8Um9vdFF1ZXJ5VG9QYWdlQ29ubmVjdGlvbj47XG4gIC8qKiBGaWVsZHMgb2YgdGhlICYjMDM5O1BkZnBTZXR0aW5nc1NldHRpbmdzJiMwMzk7IHNldHRpbmdzIGdyb3VwICovXG4gIHBkZnBTZXR0aW5nc1NldHRpbmdzPzogTWF5YmU8UGRmcFNldHRpbmdzU2V0dGluZ3M+O1xuICAvKiogQSBXb3JkUHJlc3MgcGx1Z2luICovXG4gIHBsdWdpbj86IE1heWJlPFBsdWdpbj47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFJvb3RRdWVyeSB0eXBlIGFuZCB0aGUgUGx1Z2luIHR5cGUgKi9cbiAgcGx1Z2lucz86IE1heWJlPFJvb3RRdWVyeVRvUGx1Z2luQ29ubmVjdGlvbj47XG4gIC8qKiBBbiBvYmplY3Qgb2YgdGhlIHBvc3QgVHlwZS4gICovXG4gIHBvc3Q/OiBNYXliZTxQb3N0PjtcbiAgLyoqXG4gICAqIEEgcG9zdCBvYmplY3RcbiAgICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBpbiBmYXZvciBvZiB1c2luZyB0aGUgc2luZ2xlIGVudHJ5IHBvaW50IGZvciB0aGlzIHR5cGUgd2l0aCBJRCBhbmQgSURUeXBlIGZpZWxkcy4gRm9yIGV4YW1wbGUsIGluc3RlYWQgb2YgcG9zdEJ5KCBpZDogJnF1b3Q7JnF1b3Q7ICksIHVzZSBwb3N0KGlkOiAmcXVvdDsmcXVvdDsgaWRUeXBlOiAmcXVvdDsmcXVvdDspXG4gICAqL1xuICBwb3N0Qnk/OiBNYXliZTxQb3N0PjtcbiAgLyoqIEEgMGJqZWN0ICovXG4gIHBvc3RGb3JtYXQ/OiBNYXliZTxQb3N0Rm9ybWF0PjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgUm9vdFF1ZXJ5IHR5cGUgYW5kIHRoZSBwb3N0Rm9ybWF0IHR5cGUgKi9cbiAgcG9zdEZvcm1hdHM/OiBNYXliZTxSb290UXVlcnlUb1Bvc3RGb3JtYXRDb25uZWN0aW9uPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgUm9vdFF1ZXJ5IHR5cGUgYW5kIHRoZSBwb3N0IHR5cGUgKi9cbiAgcG9zdHM/OiBNYXliZTxSb290UXVlcnlUb1Bvc3RDb25uZWN0aW9uPjtcbiAgLyoqIEZpZWxkcyBvZiB0aGUgJiMwMzk7UmVhZGluZ1NldHRpbmdzJiMwMzk7IHNldHRpbmdzIGdyb3VwICovXG4gIHJlYWRpbmdTZXR0aW5ncz86IE1heWJlPFJlYWRpbmdTZXR0aW5ncz47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFJvb3RRdWVyeSB0eXBlIGFuZCB0aGUgRW5xdWV1ZWRTY3JpcHQgdHlwZSAqL1xuICByZWdpc3RlcmVkU2NyaXB0cz86IE1heWJlPFJvb3RRdWVyeVRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgUm9vdFF1ZXJ5IHR5cGUgYW5kIHRoZSBFbnF1ZXVlZFN0eWxlc2hlZXQgdHlwZSAqL1xuICByZWdpc3RlcmVkU3R5bGVzaGVldHM/OiBNYXliZTxSb290UXVlcnlUb0VucXVldWVkU3R5bGVzaGVldENvbm5lY3Rpb24+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBSb290UXVlcnkgdHlwZSBhbmQgdGhlIENvbnRlbnROb2RlIHR5cGUgKi9cbiAgcmV2aXNpb25zPzogTWF5YmU8Um9vdFF1ZXJ5VG9SZXZpc2lvbnNDb25uZWN0aW9uPjtcbiAgLyoqIEEgMGJqZWN0ICovXG4gIHRhZz86IE1heWJlPFRhZz47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFJvb3RRdWVyeSB0eXBlIGFuZCB0aGUgdGFnIHR5cGUgKi9cbiAgdGFncz86IE1heWJlPFJvb3RRdWVyeVRvVGFnQ29ubmVjdGlvbj47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFJvb3RRdWVyeSB0eXBlIGFuZCB0aGUgVGF4b25vbXkgdHlwZSAqL1xuICB0YXhvbm9taWVzPzogTWF5YmU8Um9vdFF1ZXJ5VG9UYXhvbm9teUNvbm5lY3Rpb24+O1xuICAvKiogRmV0Y2ggYSBUYXhvbm9teSBub2RlIGJ5IHVuaXF1ZSBJZGVudGlmaWVyICovXG4gIHRheG9ub215PzogTWF5YmU8VGF4b25vbXk+O1xuICAvKiogQSBub2RlIGluIGEgdGF4b25vbXkgdXNlZCB0byBncm91cCBhbmQgcmVsYXRlIGNvbnRlbnQgbm9kZXMgKi9cbiAgdGVybU5vZGU/OiBNYXliZTxUZXJtTm9kZT47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFJvb3RRdWVyeSB0eXBlIGFuZCB0aGUgVGVybU5vZGUgdHlwZSAqL1xuICB0ZXJtcz86IE1heWJlPFJvb3RRdWVyeVRvVGVybU5vZGVDb25uZWN0aW9uPjtcbiAgLyoqIEEgVGhlbWUgb2JqZWN0ICovXG4gIHRoZW1lPzogTWF5YmU8VGhlbWU+O1xuICAvKiogRmllbGRzIG9mIHRoZSAmIzAzOTtUaGVtZWlzbGVTZGtTZXR0aW5nc1NldHRpbmdzJiMwMzk7IHNldHRpbmdzIGdyb3VwICovXG4gIHRoZW1laXNsZVNka1NldHRpbmdzU2V0dGluZ3M/OiBNYXliZTxUaGVtZWlzbGVTZGtTZXR0aW5nc1NldHRpbmdzPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgUm9vdFF1ZXJ5IHR5cGUgYW5kIHRoZSBUaGVtZSB0eXBlICovXG4gIHRoZW1lcz86IE1heWJlPFJvb3RRdWVyeVRvVGhlbWVDb25uZWN0aW9uPjtcbiAgLyoqIFJldHVybnMgYSB1c2VyICovXG4gIHVzZXI/OiBNYXliZTxVc2VyPjtcbiAgLyoqIFJldHVybnMgYSB1c2VyIHJvbGUgKi9cbiAgdXNlclJvbGU/OiBNYXliZTxVc2VyUm9sZT47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFJvb3RRdWVyeSB0eXBlIGFuZCB0aGUgVXNlclJvbGUgdHlwZSAqL1xuICB1c2VyUm9sZXM/OiBNYXliZTxSb290UXVlcnlUb1VzZXJSb2xlQ29ubmVjdGlvbj47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFJvb3RRdWVyeSB0eXBlIGFuZCB0aGUgVXNlciB0eXBlICovXG4gIHVzZXJzPzogTWF5YmU8Um9vdFF1ZXJ5VG9Vc2VyQ29ubmVjdGlvbj47XG4gIC8qKiBSZXR1cm5zIHRoZSBjdXJyZW50IHVzZXIgKi9cbiAgdmlld2VyPzogTWF5YmU8VXNlcj47XG4gIC8qKiBGaWVsZHMgb2YgdGhlICYjMDM5O1dyaXRpbmdTZXR0aW5ncyYjMDM5OyBzZXR0aW5ncyBncm91cCAqL1xuICB3cml0aW5nU2V0dGluZ3M/OiBNYXliZTxXcml0aW5nU2V0dGluZ3M+O1xufTtcblxuXG4vKiogVGhlIHJvb3QgZW50cnkgcG9pbnQgaW50byB0aGUgR3JhcGggKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeUNhdGVnb3JpZXNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICB3aGVyZT86IElucHV0TWF5YmU8Um9vdFF1ZXJ5VG9DYXRlZ29yeUNvbm5lY3Rpb25XaGVyZUFyZ3M+O1xufTtcblxuXG4vKiogVGhlIHJvb3QgZW50cnkgcG9pbnQgaW50byB0aGUgR3JhcGggKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeUNhdGVnb3J5QXJncyA9IHtcbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ2lucHV0J107XG4gIGlkVHlwZT86IElucHV0TWF5YmU8Q2F0ZWdvcnlJZFR5cGU+O1xufTtcblxuXG4vKiogVGhlIHJvb3QgZW50cnkgcG9pbnQgaW50byB0aGUgR3JhcGggKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeUNvbW1lbnRBcmdzID0ge1xuICBpZDogU2NhbGFyc1snSUQnXVsnaW5wdXQnXTtcbiAgaWRUeXBlPzogSW5wdXRNYXliZTxDb21tZW50Tm9kZUlkVHlwZUVudW0+O1xufTtcblxuXG4vKiogVGhlIHJvb3QgZW50cnkgcG9pbnQgaW50byB0aGUgR3JhcGggKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeUNvbW1lbnRzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPFJvb3RRdWVyeVRvQ29tbWVudENvbm5lY3Rpb25XaGVyZUFyZ3M+O1xufTtcblxuXG4vKiogVGhlIHJvb3QgZW50cnkgcG9pbnQgaW50byB0aGUgR3JhcGggKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeUNvbnRlbnROb2RlQXJncyA9IHtcbiAgYXNQcmV2aWV3PzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICBjb250ZW50VHlwZT86IElucHV0TWF5YmU8Q29udGVudFR5cGVFbnVtPjtcbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ2lucHV0J107XG4gIGlkVHlwZT86IElucHV0TWF5YmU8Q29udGVudE5vZGVJZFR5cGVFbnVtPjtcbn07XG5cblxuLyoqIFRoZSByb290IGVudHJ5IHBvaW50IGludG8gdGhlIEdyYXBoICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlDb250ZW50Tm9kZXNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICB3aGVyZT86IElucHV0TWF5YmU8Um9vdFF1ZXJ5VG9Db250ZW50Tm9kZUNvbm5lY3Rpb25XaGVyZUFyZ3M+O1xufTtcblxuXG4vKiogVGhlIHJvb3QgZW50cnkgcG9pbnQgaW50byB0aGUgR3JhcGggKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeUNvbnRlbnRUeXBlQXJncyA9IHtcbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ2lucHV0J107XG4gIGlkVHlwZT86IElucHV0TWF5YmU8Q29udGVudFR5cGVJZFR5cGVFbnVtPjtcbn07XG5cblxuLyoqIFRoZSByb290IGVudHJ5IHBvaW50IGludG8gdGhlIEdyYXBoICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlDb250ZW50VHlwZXNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xufTtcblxuXG4vKiogVGhlIHJvb3QgZW50cnkgcG9pbnQgaW50byB0aGUgR3JhcGggKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeU1lZGlhSXRlbUFyZ3MgPSB7XG4gIGFzUHJldmlldz86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ2lucHV0J107XG4gIGlkVHlwZT86IElucHV0TWF5YmU8TWVkaWFJdGVtSWRUeXBlPjtcbn07XG5cblxuLyoqIFRoZSByb290IGVudHJ5IHBvaW50IGludG8gdGhlIEdyYXBoICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlNZWRpYUl0ZW1CeUFyZ3MgPSB7XG4gIGlkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPjtcbiAgbWVkaWFJdGVtSWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgc2x1Zz86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICB1cmk/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbn07XG5cblxuLyoqIFRoZSByb290IGVudHJ5IHBvaW50IGludG8gdGhlIEdyYXBoICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlNZWRpYUl0ZW1zQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPFJvb3RRdWVyeVRvTWVkaWFJdGVtQ29ubmVjdGlvbldoZXJlQXJncz47XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBlbnRyeSBwb2ludCBpbnRvIHRoZSBHcmFwaCAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5TWVudUFyZ3MgPSB7XG4gIGlkOiBTY2FsYXJzWydJRCddWydpbnB1dCddO1xuICBpZFR5cGU/OiBJbnB1dE1heWJlPE1lbnVOb2RlSWRUeXBlRW51bT47XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBlbnRyeSBwb2ludCBpbnRvIHRoZSBHcmFwaCAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5TWVudUl0ZW1BcmdzID0ge1xuICBpZDogU2NhbGFyc1snSUQnXVsnaW5wdXQnXTtcbiAgaWRUeXBlPzogSW5wdXRNYXliZTxNZW51SXRlbU5vZGVJZFR5cGVFbnVtPjtcbn07XG5cblxuLyoqIFRoZSByb290IGVudHJ5IHBvaW50IGludG8gdGhlIEdyYXBoICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlNZW51SXRlbXNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICB3aGVyZT86IElucHV0TWF5YmU8Um9vdFF1ZXJ5VG9NZW51SXRlbUNvbm5lY3Rpb25XaGVyZUFyZ3M+O1xufTtcblxuXG4vKiogVGhlIHJvb3QgZW50cnkgcG9pbnQgaW50byB0aGUgR3JhcGggKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeU1lbnVzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPFJvb3RRdWVyeVRvTWVudUNvbm5lY3Rpb25XaGVyZUFyZ3M+O1xufTtcblxuXG4vKiogVGhlIHJvb3QgZW50cnkgcG9pbnQgaW50byB0aGUgR3JhcGggKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeU5vZGVBcmdzID0ge1xuICBpZD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBlbnRyeSBwb2ludCBpbnRvIHRoZSBHcmFwaCAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5Tm9kZUJ5VXJpQXJncyA9IHtcbiAgdXJpOiBTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXTtcbn07XG5cblxuLyoqIFRoZSByb290IGVudHJ5IHBvaW50IGludG8gdGhlIEdyYXBoICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlQYWdlQXJncyA9IHtcbiAgYXNQcmV2aWV3PzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICBpZDogU2NhbGFyc1snSUQnXVsnaW5wdXQnXTtcbiAgaWRUeXBlPzogSW5wdXRNYXliZTxQYWdlSWRUeXBlPjtcbn07XG5cblxuLyoqIFRoZSByb290IGVudHJ5IHBvaW50IGludG8gdGhlIEdyYXBoICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlQYWdlQnlBcmdzID0ge1xuICBpZD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG4gIHBhZ2VJZD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICB1cmk/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbn07XG5cblxuLyoqIFRoZSByb290IGVudHJ5IHBvaW50IGludG8gdGhlIEdyYXBoICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlQYWdlc0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIHdoZXJlPzogSW5wdXRNYXliZTxSb290UXVlcnlUb1BhZ2VDb25uZWN0aW9uV2hlcmVBcmdzPjtcbn07XG5cblxuLyoqIFRoZSByb290IGVudHJ5IHBvaW50IGludG8gdGhlIEdyYXBoICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlQbHVnaW5BcmdzID0ge1xuICBpZDogU2NhbGFyc1snSUQnXVsnaW5wdXQnXTtcbn07XG5cblxuLyoqIFRoZSByb290IGVudHJ5IHBvaW50IGludG8gdGhlIEdyYXBoICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlQbHVnaW5zQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPFJvb3RRdWVyeVRvUGx1Z2luQ29ubmVjdGlvbldoZXJlQXJncz47XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBlbnRyeSBwb2ludCBpbnRvIHRoZSBHcmFwaCAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5UG9zdEFyZ3MgPSB7XG4gIGFzUHJldmlldz86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ2lucHV0J107XG4gIGlkVHlwZT86IElucHV0TWF5YmU8UG9zdElkVHlwZT47XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBlbnRyeSBwb2ludCBpbnRvIHRoZSBHcmFwaCAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5UG9zdEJ5QXJncyA9IHtcbiAgaWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+O1xuICBwb3N0SWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgc2x1Zz86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICB1cmk/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbn07XG5cblxuLyoqIFRoZSByb290IGVudHJ5IHBvaW50IGludG8gdGhlIEdyYXBoICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlQb3N0Rm9ybWF0QXJncyA9IHtcbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ2lucHV0J107XG4gIGlkVHlwZT86IElucHV0TWF5YmU8UG9zdEZvcm1hdElkVHlwZT47XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBlbnRyeSBwb2ludCBpbnRvIHRoZSBHcmFwaCAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5UG9zdEZvcm1hdHNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICB3aGVyZT86IElucHV0TWF5YmU8Um9vdFF1ZXJ5VG9Qb3N0Rm9ybWF0Q29ubmVjdGlvbldoZXJlQXJncz47XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBlbnRyeSBwb2ludCBpbnRvIHRoZSBHcmFwaCAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5UG9zdHNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICB3aGVyZT86IElucHV0TWF5YmU8Um9vdFF1ZXJ5VG9Qb3N0Q29ubmVjdGlvbldoZXJlQXJncz47XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBlbnRyeSBwb2ludCBpbnRvIHRoZSBHcmFwaCAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5UmVnaXN0ZXJlZFNjcmlwdHNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xufTtcblxuXG4vKiogVGhlIHJvb3QgZW50cnkgcG9pbnQgaW50byB0aGUgR3JhcGggKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVJlZ2lzdGVyZWRTdHlsZXNoZWV0c0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBlbnRyeSBwb2ludCBpbnRvIHRoZSBHcmFwaCAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5UmV2aXNpb25zQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPFJvb3RRdWVyeVRvUmV2aXNpb25zQ29ubmVjdGlvbldoZXJlQXJncz47XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBlbnRyeSBwb2ludCBpbnRvIHRoZSBHcmFwaCAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VGFnQXJncyA9IHtcbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ2lucHV0J107XG4gIGlkVHlwZT86IElucHV0TWF5YmU8VGFnSWRUeXBlPjtcbn07XG5cblxuLyoqIFRoZSByb290IGVudHJ5IHBvaW50IGludG8gdGhlIEdyYXBoICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUYWdzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPFJvb3RRdWVyeVRvVGFnQ29ubmVjdGlvbldoZXJlQXJncz47XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBlbnRyeSBwb2ludCBpbnRvIHRoZSBHcmFwaCAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VGF4b25vbWllc0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBlbnRyeSBwb2ludCBpbnRvIHRoZSBHcmFwaCAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VGF4b25vbXlBcmdzID0ge1xuICBpZDogU2NhbGFyc1snSUQnXVsnaW5wdXQnXTtcbiAgaWRUeXBlPzogSW5wdXRNYXliZTxUYXhvbm9teUlkVHlwZUVudW0+O1xufTtcblxuXG4vKiogVGhlIHJvb3QgZW50cnkgcG9pbnQgaW50byB0aGUgR3JhcGggKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRlcm1Ob2RlQXJncyA9IHtcbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ2lucHV0J107XG4gIGlkVHlwZT86IElucHV0TWF5YmU8VGVybU5vZGVJZFR5cGVFbnVtPjtcbiAgdGF4b25vbXk/OiBJbnB1dE1heWJlPFRheG9ub215RW51bT47XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBlbnRyeSBwb2ludCBpbnRvIHRoZSBHcmFwaCAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VGVybXNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICB3aGVyZT86IElucHV0TWF5YmU8Um9vdFF1ZXJ5VG9UZXJtTm9kZUNvbm5lY3Rpb25XaGVyZUFyZ3M+O1xufTtcblxuXG4vKiogVGhlIHJvb3QgZW50cnkgcG9pbnQgaW50byB0aGUgR3JhcGggKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRoZW1lQXJncyA9IHtcbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ2lucHV0J107XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBlbnRyeSBwb2ludCBpbnRvIHRoZSBHcmFwaCAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VGhlbWVzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbn07XG5cblxuLyoqIFRoZSByb290IGVudHJ5IHBvaW50IGludG8gdGhlIEdyYXBoICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlVc2VyQXJncyA9IHtcbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ2lucHV0J107XG4gIGlkVHlwZT86IElucHV0TWF5YmU8VXNlck5vZGVJZFR5cGVFbnVtPjtcbn07XG5cblxuLyoqIFRoZSByb290IGVudHJ5IHBvaW50IGludG8gdGhlIEdyYXBoICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlVc2VyUm9sZUFyZ3MgPSB7XG4gIGlkOiBTY2FsYXJzWydJRCddWydpbnB1dCddO1xufTtcblxuXG4vKiogVGhlIHJvb3QgZW50cnkgcG9pbnQgaW50byB0aGUgR3JhcGggKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVVzZXJSb2xlc0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG59O1xuXG5cbi8qKiBUaGUgcm9vdCBlbnRyeSBwb2ludCBpbnRvIHRoZSBHcmFwaCAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VXNlcnNBcmdzID0ge1xuICBhZnRlcj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBiZWZvcmU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgZmlyc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgbGFzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICB3aGVyZT86IElucHV0TWF5YmU8Um9vdFF1ZXJ5VG9Vc2VyQ29ubmVjdGlvbldoZXJlQXJncz47XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBSb290UXVlcnkgdHlwZSBhbmQgdGhlIGNhdGVnb3J5IHR5cGUgKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvQ2F0ZWdvcnlDb25uZWN0aW9uID0gQ2F0ZWdvcnlDb25uZWN0aW9uICYgQ29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnlUb0NhdGVnb3J5Q29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIFJvb3RRdWVyeVRvQ2F0ZWdvcnlDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbiAgZWRnZXM6IEFycmF5PFJvb3RRdWVyeVRvQ2F0ZWdvcnlDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxDYXRlZ29yeT47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFJvb3RRdWVyeVRvQ2F0ZWdvcnlDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvQ2F0ZWdvcnlDb25uZWN0aW9uRWRnZSA9IENhdGVnb3J5Q29ubmVjdGlvbkVkZ2UgJiBFZGdlICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvQ2F0ZWdvcnlDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogQ2F0ZWdvcnk7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtSb290UXVlcnlUb0NhdGVnb3J5Q29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9DYXRlZ29yeUNvbm5lY3Rpb25QYWdlSW5mbyA9IENhdGVnb3J5Q29ubmVjdGlvblBhZ2VJbmZvICYgUGFnZUluZm8gJiBXcFBhZ2VJbmZvICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvQ2F0ZWdvcnlDb25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIEFyZ3VtZW50cyBmb3IgZmlsdGVyaW5nIHRoZSBSb290UXVlcnlUb0NhdGVnb3J5Q29ubmVjdGlvbiBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb0NhdGVnb3J5Q29ubmVjdGlvbldoZXJlQXJncyA9IHtcbiAgLyoqIFVuaXF1ZSBjYWNoZSBrZXkgdG8gYmUgcHJvZHVjZWQgd2hlbiB0aGlzIHF1ZXJ5IGlzIHN0b3JlZCBpbiBhbiBvYmplY3QgY2FjaGUuIERlZmF1bHQgaXMgJ2NvcmUnLiAqL1xuICBjYWNoZURvbWFpbj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGVybSBJRCB0byByZXRyaWV2ZSBjaGlsZCB0ZXJtcyBvZi4gSWYgbXVsdGlwbGUgdGF4b25vbWllcyBhcmUgcGFzc2VkLCAkY2hpbGRfb2YgaXMgaWdub3JlZC4gRGVmYXVsdCAwLiAqL1xuICBjaGlsZE9mPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBUcnVlIHRvIGxpbWl0IHJlc3VsdHMgdG8gdGVybXMgdGhhdCBoYXZlIG5vIGNoaWxkcmVuLiBUaGlzIHBhcmFtZXRlciBoYXMgbm8gZWZmZWN0IG9uIG5vbi1oaWVyYXJjaGljYWwgdGF4b25vbWllcy4gRGVmYXVsdCBmYWxzZS4gKi9cbiAgY2hpbGRsZXNzPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogUmV0cmlldmUgdGVybXMgd2hlcmUgdGhlIGRlc2NyaXB0aW9uIGlzIExJS0UgdGhlIGlucHV0IHZhbHVlLiBEZWZhdWx0IGVtcHR5LiAqL1xuICBkZXNjcmlwdGlvbkxpa2U/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIHRlcm0gaWRzIHRvIGV4Y2x1ZGUuIElmICRpbmNsdWRlIGlzIG5vbi1lbXB0eSwgJGV4Y2x1ZGUgaXMgaWdub3JlZC4gRGVmYXVsdCBlbXB0eSBhcnJheS4gKi9cbiAgZXhjbHVkZT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgdGVybSBpZHMgdG8gZXhjbHVkZSBhbG9uZyB3aXRoIGFsbCBvZiB0aGVpciBkZXNjZW5kYW50IHRlcm1zLiBJZiAkaW5jbHVkZSBpcyBub24tZW1wdHksICRleGNsdWRlX3RyZWUgaXMgaWdub3JlZC4gRGVmYXVsdCBlbXB0eSBhcnJheS4gKi9cbiAgZXhjbHVkZVRyZWU/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFdoZXRoZXIgdG8gaGlkZSB0ZXJtcyBub3QgYXNzaWduZWQgdG8gYW55IHBvc3RzLiBBY2NlcHRzIHRydWUgb3IgZmFsc2UuIERlZmF1bHQgZmFsc2UgKi9cbiAgaGlkZUVtcHR5PzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogV2hldGhlciB0byBpbmNsdWRlIHRlcm1zIHRoYXQgaGF2ZSBub24tZW1wdHkgZGVzY2VuZGFudHMgKGV2ZW4gaWYgJGhpZGVfZW1wdHkgaXMgc2V0IHRvIHRydWUpLiBEZWZhdWx0IHRydWUuICovXG4gIGhpZXJhcmNoaWNhbD86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIHRlcm0gaWRzIHRvIGluY2x1ZGUuIERlZmF1bHQgZW1wdHkgYXJyYXkuICovXG4gIGluY2x1ZGU/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIG5hbWVzIHRvIHJldHVybiB0ZXJtKHMpIGZvci4gRGVmYXVsdCBlbXB0eS4gKi9cbiAgbmFtZT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFJldHJpZXZlIHRlcm1zIHdoZXJlIHRoZSBuYW1lIGlzIExJS0UgdGhlIGlucHV0IHZhbHVlLiBEZWZhdWx0IGVtcHR5LiAqL1xuICBuYW1lTGlrZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2Ygb2JqZWN0IElEcy4gUmVzdWx0cyB3aWxsIGJlIGxpbWl0ZWQgdG8gdGVybXMgYXNzb2NpYXRlZCB3aXRoIHRoZXNlIG9iamVjdHMuICovXG4gIG9iamVjdElkcz86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogRGlyZWN0aW9uIHRoZSBjb25uZWN0aW9uIHNob3VsZCBiZSBvcmRlcmVkIGluICovXG4gIG9yZGVyPzogSW5wdXRNYXliZTxPcmRlckVudW0+O1xuICAvKiogRmllbGQocykgdG8gb3JkZXIgdGVybXMgYnkuIERlZmF1bHRzIHRvICduYW1lJy4gKi9cbiAgb3JkZXJieT86IElucHV0TWF5YmU8VGVybU9iamVjdHNDb25uZWN0aW9uT3JkZXJieUVudW0+O1xuICAvKiogV2hldGhlciB0byBwYWQgdGhlIHF1YW50aXR5IG9mIGEgdGVybSdzIGNoaWxkcmVuIGluIHRoZSBxdWFudGl0eSBvZiBlYWNoIHRlcm0ncyBcImNvdW50XCIgb2JqZWN0IHZhcmlhYmxlLiBEZWZhdWx0IGZhbHNlLiAqL1xuICBwYWRDb3VudHM/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBQYXJlbnQgdGVybSBJRCB0byByZXRyaWV2ZSBkaXJlY3QtY2hpbGQgdGVybXMgb2YuIERlZmF1bHQgZW1wdHkuICovXG4gIHBhcmVudD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogU2VhcmNoIGNyaXRlcmlhIHRvIG1hdGNoIHRlcm1zLiBXaWxsIGJlIFNRTC1mb3JtYXR0ZWQgd2l0aCB3aWxkY2FyZHMgYmVmb3JlIGFuZCBhZnRlci4gRGVmYXVsdCBlbXB0eS4gKi9cbiAgc2VhcmNoPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBzbHVncyB0byByZXR1cm4gdGVybShzKSBmb3IuIERlZmF1bHQgZW1wdHkuICovXG4gIHNsdWc/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiB0ZXJtIHRheG9ub215IElEcywgdG8gbWF0Y2ggd2hlbiBxdWVyeWluZyB0ZXJtcy4gKi9cbiAgdGVybVRheG9ub21JZD86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgdGVybSB0YXhvbm9teSBJRHMsIHRvIG1hdGNoIHdoZW4gcXVlcnlpbmcgdGVybXMuICovXG4gIHRlcm1UYXhvbm9teUlkPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBXaGV0aGVyIHRvIHByaW1lIG1ldGEgY2FjaGVzIGZvciBtYXRjaGVkIHRlcm1zLiBEZWZhdWx0IHRydWUuICovXG4gIHVwZGF0ZVRlcm1NZXRhQ2FjaGU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBSb290UXVlcnkgdHlwZSBhbmQgdGhlIENvbW1lbnQgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9Db21tZW50Q29ubmVjdGlvbiA9IENvbW1lbnRDb25uZWN0aW9uICYgQ29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnlUb0NvbW1lbnRDb25uZWN0aW9uJztcbiAgLyoqIEVkZ2VzIGZvciB0aGUgUm9vdFF1ZXJ5VG9Db21tZW50Q29ubmVjdGlvbiBjb25uZWN0aW9uICovXG4gIGVkZ2VzOiBBcnJheTxSb290UXVlcnlUb0NvbW1lbnRDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxDb21tZW50PjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogUm9vdFF1ZXJ5VG9Db21tZW50Q29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEFuIGVkZ2UgaW4gYSBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb0NvbW1lbnRDb25uZWN0aW9uRWRnZSA9IENvbW1lbnRDb25uZWN0aW9uRWRnZSAmIEVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5VG9Db21tZW50Q29ubmVjdGlvbkVkZ2UnO1xuICAvKiogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaXRlbSBhdCB0aGUgZW5kIG9mIHRoZSBlZGdlICovXG4gIG5vZGU6IENvbW1lbnQ7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtSb290UXVlcnlUb0NvbW1lbnRDb25uZWN0aW9uJnF1b3Q7ICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb0NvbW1lbnRDb25uZWN0aW9uUGFnZUluZm8gPSBDb21tZW50Q29ubmVjdGlvblBhZ2VJbmZvICYgUGFnZUluZm8gJiBXcFBhZ2VJbmZvICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvQ29tbWVudENvbm5lY3Rpb25QYWdlSW5mbyc7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogQXJndW1lbnRzIGZvciBmaWx0ZXJpbmcgdGhlIFJvb3RRdWVyeVRvQ29tbWVudENvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9Db21tZW50Q29ubmVjdGlvbldoZXJlQXJncyA9IHtcbiAgLyoqIENvbW1lbnQgYXV0aG9yIGVtYWlsIGFkZHJlc3MuICovXG4gIGF1dGhvckVtYWlsPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBhdXRob3IgSURzIHRvIGluY2x1ZGUgY29tbWVudHMgZm9yLiAqL1xuICBhdXRob3JJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgYXV0aG9yIElEcyB0byBleGNsdWRlIGNvbW1lbnRzIGZvci4gKi9cbiAgYXV0aG9yTm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIENvbW1lbnQgYXV0aG9yIFVSTC4gKi9cbiAgYXV0aG9yVXJsPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBjb21tZW50IElEcyB0byBpbmNsdWRlLiAqL1xuICBjb21tZW50SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIElEcyBvZiB1c2VycyB3aG9zZSB1bmFwcHJvdmVkIGNvbW1lbnRzIHdpbGwgYmUgcmV0dXJuZWQgYnkgdGhlIHF1ZXJ5IHJlZ2FyZGxlc3Mgb2Ygc3RhdHVzLiAqL1xuICBjb21tZW50Tm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEluY2x1ZGUgY29tbWVudHMgb2YgYSBnaXZlbiB0eXBlLiAqL1xuICBjb21tZW50VHlwZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogSW5jbHVkZSBjb21tZW50cyBmcm9tIGEgZ2l2ZW4gYXJyYXkgb2YgY29tbWVudCB0eXBlcy4gKi9cbiAgY29tbWVudFR5cGVJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEV4Y2x1ZGUgY29tbWVudHMgZnJvbSBhIGdpdmVuIGFycmF5IG9mIGNvbW1lbnQgdHlwZXMuICovXG4gIGNvbW1lbnRUeXBlTm90SW4/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIENvbnRlbnQgb2JqZWN0IGF1dGhvciBJRCB0byBsaW1pdCByZXN1bHRzIGJ5LiAqL1xuICBjb250ZW50QXV0aG9yPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBhdXRob3IgSURzIHRvIHJldHJpZXZlIGNvbW1lbnRzIGZvci4gKi9cbiAgY29udGVudEF1dGhvckluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBhdXRob3IgSURzICpub3QqIHRvIHJldHJpZXZlIGNvbW1lbnRzIGZvci4gKi9cbiAgY29udGVudEF1dGhvck5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBMaW1pdCByZXN1bHRzIHRvIHRob3NlIGFmZmlsaWF0ZWQgd2l0aCBhIGdpdmVuIGNvbnRlbnQgb2JqZWN0IElELiAqL1xuICBjb250ZW50SWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgY29udGVudCBvYmplY3QgSURzIHRvIGluY2x1ZGUgYWZmaWxpYXRlZCBjb21tZW50cyBmb3IuICovXG4gIGNvbnRlbnRJZEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBjb250ZW50IG9iamVjdCBJRHMgdG8gZXhjbHVkZSBhZmZpbGlhdGVkIGNvbW1lbnRzIGZvci4gKi9cbiAgY29udGVudElkTm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIENvbnRlbnQgb2JqZWN0IG5hbWUgKGkuZS4gc2x1ZyApIHRvIHJldHJpZXZlIGFmZmlsaWF0ZWQgY29tbWVudHMgZm9yLiAqL1xuICBjb250ZW50TmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQ29udGVudCBPYmplY3QgcGFyZW50IElEIHRvIHJldHJpZXZlIGFmZmlsaWF0ZWQgY29tbWVudHMgZm9yLiAqL1xuICBjb250ZW50UGFyZW50PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBjb250ZW50IG9iamVjdCBzdGF0dXNlcyB0byByZXRyaWV2ZSBhZmZpbGlhdGVkIGNvbW1lbnRzIGZvci4gUGFzcyAnYW55JyB0byBtYXRjaCBhbnkgdmFsdWUuICovXG4gIGNvbnRlbnRTdGF0dXM/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+Pj47XG4gIC8qKiBDb250ZW50IG9iamVjdCB0eXBlIG9yIGFycmF5IG9mIHR5cGVzIHRvIHJldHJpZXZlIGFmZmlsaWF0ZWQgY29tbWVudHMgZm9yLiBQYXNzICdhbnknIHRvIG1hdGNoIGFueSB2YWx1ZS4gKi9cbiAgY29udGVudFR5cGU/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8Q29udGVudFR5cGVFbnVtPj4+O1xuICAvKiogQXJyYXkgb2YgSURzIG9yIGVtYWlsIGFkZHJlc3NlcyBvZiB1c2VycyB3aG9zZSB1bmFwcHJvdmVkIGNvbW1lbnRzIHdpbGwgYmUgcmV0dXJuZWQgYnkgdGhlIHF1ZXJ5IHJlZ2FyZGxlc3Mgb2YgJHN0YXR1cy4gRGVmYXVsdCBlbXB0eSAqL1xuICBpbmNsdWRlVW5hcHByb3ZlZD86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogS2FybWEgc2NvcmUgdG8gcmV0cmlldmUgbWF0Y2hpbmcgY29tbWVudHMgZm9yLiAqL1xuICBrYXJtYT86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogVGhlIGNhcmRpbmFsaXR5IG9mIHRoZSBvcmRlciBvZiB0aGUgY29ubmVjdGlvbiAqL1xuICBvcmRlcj86IElucHV0TWF5YmU8T3JkZXJFbnVtPjtcbiAgLyoqIEZpZWxkIHRvIG9yZGVyIHRoZSBjb21tZW50cyBieS4gKi9cbiAgb3JkZXJieT86IElucHV0TWF5YmU8Q29tbWVudHNDb25uZWN0aW9uT3JkZXJieUVudW0+O1xuICAvKiogUGFyZW50IElEIG9mIGNvbW1lbnQgdG8gcmV0cmlldmUgY2hpbGRyZW4gb2YuICovXG4gIHBhcmVudD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgcGFyZW50IElEcyBvZiBjb21tZW50cyB0byByZXRyaWV2ZSBjaGlsZHJlbiBmb3IuICovXG4gIHBhcmVudEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBwYXJlbnQgSURzIG9mIGNvbW1lbnRzICpub3QqIHRvIHJldHJpZXZlIGNoaWxkcmVuIGZvci4gKi9cbiAgcGFyZW50Tm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNlYXJjaCB0ZXJtKHMpIHRvIHJldHJpZXZlIG1hdGNoaW5nIGNvbW1lbnRzIGZvci4gKi9cbiAgc2VhcmNoPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBDb21tZW50IHN0YXR1cyB0byBsaW1pdCByZXN1bHRzIGJ5LiAqL1xuICBzdGF0dXM/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEluY2x1ZGUgY29tbWVudHMgZm9yIGEgc3BlY2lmaWMgdXNlciBJRC4gKi9cbiAgdXNlcklkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFJvb3RRdWVyeSB0eXBlIGFuZCB0aGUgQ29udGVudE5vZGUgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9Db250ZW50Tm9kZUNvbm5lY3Rpb24gPSBDb25uZWN0aW9uICYgQ29udGVudE5vZGVDb25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvQ29udGVudE5vZGVDb25uZWN0aW9uJztcbiAgLyoqIEVkZ2VzIGZvciB0aGUgUm9vdFF1ZXJ5VG9Db250ZW50Tm9kZUNvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8Um9vdFF1ZXJ5VG9Db250ZW50Tm9kZUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBub2RlcyBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZXM6IEFycmF5PENvbnRlbnROb2RlPjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogUm9vdFF1ZXJ5VG9Db250ZW50Tm9kZUNvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBBbiBlZGdlIGluIGEgY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9Db250ZW50Tm9kZUNvbm5lY3Rpb25FZGdlID0gQ29udGVudE5vZGVDb25uZWN0aW9uRWRnZSAmIEVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5VG9Db250ZW50Tm9kZUNvbm5lY3Rpb25FZGdlJztcbiAgLyoqIEEgY3Vyc29yIGZvciB1c2UgaW4gcGFnaW5hdGlvbiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGl0ZW0gYXQgdGhlIGVuZCBvZiB0aGUgZWRnZSAqL1xuICBub2RlOiBDb250ZW50Tm9kZTtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlICZxdW90O1Jvb3RRdWVyeVRvQ29udGVudE5vZGVDb25uZWN0aW9uJnF1b3Q7ICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb0NvbnRlbnROb2RlQ29ubmVjdGlvblBhZ2VJbmZvID0gQ29udGVudE5vZGVDb25uZWN0aW9uUGFnZUluZm8gJiBQYWdlSW5mbyAmIFdwUGFnZUluZm8gJiB7XG4gIF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5VG9Db250ZW50Tm9kZUNvbm5lY3Rpb25QYWdlSW5mbyc7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogQXJndW1lbnRzIGZvciBmaWx0ZXJpbmcgdGhlIFJvb3RRdWVyeVRvQ29udGVudE5vZGVDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvQ29udGVudE5vZGVDb25uZWN0aW9uV2hlcmVBcmdzID0ge1xuICAvKiogVGhlIFR5cGVzIG9mIGNvbnRlbnQgdG8gZmlsdGVyICovXG4gIGNvbnRlbnRUeXBlcz86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxDb250ZW50VHlwZUVudW0+Pj47XG4gIC8qKiBGaWx0ZXIgdGhlIGNvbm5lY3Rpb24gYmFzZWQgb24gZGF0ZXMgKi9cbiAgZGF0ZVF1ZXJ5PzogSW5wdXRNYXliZTxEYXRlUXVlcnlJbnB1dD47XG4gIC8qKiBUcnVlIGZvciBvYmplY3RzIHdpdGggcGFzc3dvcmRzOyBGYWxzZSBmb3Igb2JqZWN0cyB3aXRob3V0IHBhc3N3b3JkczsgbnVsbCBmb3IgYWxsIG9iamVjdHMgd2l0aCBvciB3aXRob3V0IHBhc3N3b3JkcyAqL1xuICBoYXNQYXNzd29yZD86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIFNwZWNpZmljIGRhdGFiYXNlIElEIG9mIHRoZSBvYmplY3QgKi9cbiAgaWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIElEcyBmb3IgdGhlIG9iamVjdHMgdG8gcmV0cmlldmUgKi9cbiAgaW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEdldCBvYmplY3RzIHdpdGggYSBzcGVjaWZpYyBtaW1lVHlwZSBwcm9wZXJ0eSAqL1xuICBtaW1lVHlwZT86IElucHV0TWF5YmU8TWltZVR5cGVFbnVtPjtcbiAgLyoqIFNsdWcgLyBwb3N0X25hbWUgb2YgdGhlIG9iamVjdCAqL1xuICBuYW1lPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBTcGVjaWZ5IG9iamVjdHMgdG8gcmV0cmlldmUuIFVzZSBzbHVncyAqL1xuICBuYW1lSW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTcGVjaWZ5IElEcyBOT1QgdG8gcmV0cmlldmUuIElmIHRoaXMgaXMgdXNlZCBpbiB0aGUgc2FtZSBxdWVyeSBhcyBcImluXCIsIGl0IHdpbGwgYmUgaWdub3JlZCAqL1xuICBub3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogV2hhdCBwYXJhbWV0ZXIgdG8gdXNlIHRvIG9yZGVyIHRoZSBvYmplY3RzIGJ5LiAqL1xuICBvcmRlcmJ5PzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFBvc3RPYmplY3RzQ29ubmVjdGlvbk9yZGVyYnlJbnB1dD4+PjtcbiAgLyoqIFVzZSBJRCB0byByZXR1cm4gb25seSBjaGlsZHJlbi4gVXNlIDAgdG8gcmV0dXJuIG9ubHkgdG9wLWxldmVsIGl0ZW1zICovXG4gIHBhcmVudD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG4gIC8qKiBTcGVjaWZ5IG9iamVjdHMgd2hvc2UgcGFyZW50IGlzIGluIGFuIGFycmF5ICovXG4gIHBhcmVudEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTcGVjaWZ5IHBvc3RzIHdob3NlIHBhcmVudCBpcyBub3QgaW4gYW4gYXJyYXkgKi9cbiAgcGFyZW50Tm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNob3cgcG9zdHMgd2l0aCBhIHNwZWNpZmljIHBhc3N3b3JkLiAqL1xuICBwYXNzd29yZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogU2hvdyBQb3N0cyBiYXNlZCBvbiBhIGtleXdvcmQgc2VhcmNoICovXG4gIHNlYXJjaD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogUmV0cmlldmUgcG9zdHMgd2hlcmUgcG9zdCBzdGF0dXMgaXMgaW4gYW4gYXJyYXkuICovXG4gIHN0YXRpPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFBvc3RTdGF0dXNFbnVtPj4+O1xuICAvKiogU2hvdyBwb3N0cyB3aXRoIGEgc3BlY2lmaWMgc3RhdHVzLiAqL1xuICBzdGF0dXM/OiBJbnB1dE1heWJlPFBvc3RTdGF0dXNFbnVtPjtcbiAgLyoqIFRpdGxlIG9mIHRoZSBvYmplY3QgKi9cbiAgdGl0bGU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFJvb3RRdWVyeSB0eXBlIGFuZCB0aGUgQ29udGVudFR5cGUgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9Db250ZW50VHlwZUNvbm5lY3Rpb24gPSBDb25uZWN0aW9uICYgQ29udGVudFR5cGVDb25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvQ29udGVudFR5cGVDb25uZWN0aW9uJztcbiAgLyoqIEVkZ2VzIGZvciB0aGUgUm9vdFF1ZXJ5VG9Db250ZW50VHlwZUNvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8Um9vdFF1ZXJ5VG9Db250ZW50VHlwZUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBub2RlcyBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZXM6IEFycmF5PENvbnRlbnRUeXBlPjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogUm9vdFF1ZXJ5VG9Db250ZW50VHlwZUNvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBBbiBlZGdlIGluIGEgY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9Db250ZW50VHlwZUNvbm5lY3Rpb25FZGdlID0gQ29udGVudFR5cGVDb25uZWN0aW9uRWRnZSAmIEVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5VG9Db250ZW50VHlwZUNvbm5lY3Rpb25FZGdlJztcbiAgLyoqIEEgY3Vyc29yIGZvciB1c2UgaW4gcGFnaW5hdGlvbiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGl0ZW0gYXQgdGhlIGVuZCBvZiB0aGUgZWRnZSAqL1xuICBub2RlOiBDb250ZW50VHlwZTtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlICZxdW90O1Jvb3RRdWVyeVRvQ29udGVudFR5cGVDb25uZWN0aW9uJnF1b3Q7ICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb0NvbnRlbnRUeXBlQ29ubmVjdGlvblBhZ2VJbmZvID0gQ29udGVudFR5cGVDb25uZWN0aW9uUGFnZUluZm8gJiBQYWdlSW5mbyAmIFdwUGFnZUluZm8gJiB7XG4gIF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5VG9Db250ZW50VHlwZUNvbm5lY3Rpb25QYWdlSW5mbyc7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBSb290UXVlcnkgdHlwZSBhbmQgdGhlIEVucXVldWVkU2NyaXB0IHR5cGUgKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIEVucXVldWVkU2NyaXB0Q29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnlUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIFJvb3RRdWVyeVRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbiAgZWRnZXM6IEFycmF5PFJvb3RRdWVyeVRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxFbnF1ZXVlZFNjcmlwdD47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFJvb3RRdWVyeVRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uRWRnZSA9IEVkZ2UgJiBFbnF1ZXVlZFNjcmlwdENvbm5lY3Rpb25FZGdlICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogRW5xdWV1ZWRTY3JpcHQ7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtSb290UXVlcnlUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9FbnF1ZXVlZFNjcmlwdENvbm5lY3Rpb25QYWdlSW5mbyA9IEVucXVldWVkU2NyaXB0Q29ubmVjdGlvblBhZ2VJbmZvICYgUGFnZUluZm8gJiBXcFBhZ2VJbmZvICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgUm9vdFF1ZXJ5IHR5cGUgYW5kIHRoZSBFbnF1ZXVlZFN0eWxlc2hlZXQgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIEVucXVldWVkU3R5bGVzaGVldENvbm5lY3Rpb24gJiB7XG4gIF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5VG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uJztcbiAgLyoqIEVkZ2VzIGZvciB0aGUgUm9vdFF1ZXJ5VG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbiAgZWRnZXM6IEFycmF5PFJvb3RRdWVyeVRvRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIG5vZGVzIG9mIHRoZSBjb25uZWN0aW9uLCB3aXRob3V0IHRoZSBlZGdlcyAqL1xuICBub2RlczogQXJyYXk8RW5xdWV1ZWRTdHlsZXNoZWV0PjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogUm9vdFF1ZXJ5VG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvbkVkZ2UgPSBFZGdlICYgRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvbkVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5VG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogRW5xdWV1ZWRTdHlsZXNoZWV0O1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgJnF1b3Q7Um9vdFF1ZXJ5VG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uJnF1b3Q7ICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb0VucXVldWVkU3R5bGVzaGVldENvbm5lY3Rpb25QYWdlSW5mbyA9IEVucXVldWVkU3R5bGVzaGVldENvbm5lY3Rpb25QYWdlSW5mbyAmIFBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnlUb0VucXVldWVkU3R5bGVzaGVldENvbm5lY3Rpb25QYWdlSW5mbyc7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBSb290UXVlcnkgdHlwZSBhbmQgdGhlIG1lZGlhSXRlbSB0eXBlICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb01lZGlhSXRlbUNvbm5lY3Rpb24gPSBDb25uZWN0aW9uICYgTWVkaWFJdGVtQ29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnlUb01lZGlhSXRlbUNvbm5lY3Rpb24nO1xuICAvKiogRWRnZXMgZm9yIHRoZSBSb290UXVlcnlUb01lZGlhSXRlbUNvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8Um9vdFF1ZXJ5VG9NZWRpYUl0ZW1Db25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxNZWRpYUl0ZW0+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBSb290UXVlcnlUb01lZGlhSXRlbUNvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBBbiBlZGdlIGluIGEgY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9NZWRpYUl0ZW1Db25uZWN0aW9uRWRnZSA9IEVkZ2UgJiBNZWRpYUl0ZW1Db25uZWN0aW9uRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnlUb01lZGlhSXRlbUNvbm5lY3Rpb25FZGdlJztcbiAgLyoqIEEgY3Vyc29yIGZvciB1c2UgaW4gcGFnaW5hdGlvbiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGl0ZW0gYXQgdGhlIGVuZCBvZiB0aGUgZWRnZSAqL1xuICBub2RlOiBNZWRpYUl0ZW07XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtSb290UXVlcnlUb01lZGlhSXRlbUNvbm5lY3Rpb24mcXVvdDsgKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvTWVkaWFJdGVtQ29ubmVjdGlvblBhZ2VJbmZvID0gTWVkaWFJdGVtQ29ubmVjdGlvblBhZ2VJbmZvICYgUGFnZUluZm8gJiBXcFBhZ2VJbmZvICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvTWVkaWFJdGVtQ29ubmVjdGlvblBhZ2VJbmZvJztcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBBcmd1bWVudHMgZm9yIGZpbHRlcmluZyB0aGUgUm9vdFF1ZXJ5VG9NZWRpYUl0ZW1Db25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvTWVkaWFJdGVtQ29ubmVjdGlvbldoZXJlQXJncyA9IHtcbiAgLyoqIFRoZSB1c2VyIHRoYXQncyBjb25uZWN0ZWQgYXMgdGhlIGF1dGhvciBvZiB0aGUgb2JqZWN0LiBVc2UgdGhlIHVzZXJJZCBmb3IgdGhlIGF1dGhvciBvYmplY3QuICovXG4gIGF1dGhvcj86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogRmluZCBvYmplY3RzIGNvbm5lY3RlZCB0byBhdXRob3IocykgaW4gdGhlIGFycmF5IG9mIGF1dGhvcidzIHVzZXJJZHMgKi9cbiAgYXV0aG9ySW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEZpbmQgb2JqZWN0cyBjb25uZWN0ZWQgdG8gdGhlIGF1dGhvciBieSB0aGUgYXV0aG9yJ3MgbmljZW5hbWUgKi9cbiAgYXV0aG9yTmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogRmluZCBvYmplY3RzIE5PVCBjb25uZWN0ZWQgdG8gYXV0aG9yKHMpIGluIHRoZSBhcnJheSBvZiBhdXRob3IncyB1c2VySWRzICovXG4gIGF1dGhvck5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBGaWx0ZXIgdGhlIGNvbm5lY3Rpb24gYmFzZWQgb24gZGF0ZXMgKi9cbiAgZGF0ZVF1ZXJ5PzogSW5wdXRNYXliZTxEYXRlUXVlcnlJbnB1dD47XG4gIC8qKiBUcnVlIGZvciBvYmplY3RzIHdpdGggcGFzc3dvcmRzOyBGYWxzZSBmb3Igb2JqZWN0cyB3aXRob3V0IHBhc3N3b3JkczsgbnVsbCBmb3IgYWxsIG9iamVjdHMgd2l0aCBvciB3aXRob3V0IHBhc3N3b3JkcyAqL1xuICBoYXNQYXNzd29yZD86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIFNwZWNpZmljIGRhdGFiYXNlIElEIG9mIHRoZSBvYmplY3QgKi9cbiAgaWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIElEcyBmb3IgdGhlIG9iamVjdHMgdG8gcmV0cmlldmUgKi9cbiAgaW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEdldCBvYmplY3RzIHdpdGggYSBzcGVjaWZpYyBtaW1lVHlwZSBwcm9wZXJ0eSAqL1xuICBtaW1lVHlwZT86IElucHV0TWF5YmU8TWltZVR5cGVFbnVtPjtcbiAgLyoqIFNsdWcgLyBwb3N0X25hbWUgb2YgdGhlIG9iamVjdCAqL1xuICBuYW1lPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBTcGVjaWZ5IG9iamVjdHMgdG8gcmV0cmlldmUuIFVzZSBzbHVncyAqL1xuICBuYW1lSW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTcGVjaWZ5IElEcyBOT1QgdG8gcmV0cmlldmUuIElmIHRoaXMgaXMgdXNlZCBpbiB0aGUgc2FtZSBxdWVyeSBhcyBcImluXCIsIGl0IHdpbGwgYmUgaWdub3JlZCAqL1xuICBub3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogV2hhdCBwYXJhbWV0ZXIgdG8gdXNlIHRvIG9yZGVyIHRoZSBvYmplY3RzIGJ5LiAqL1xuICBvcmRlcmJ5PzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFBvc3RPYmplY3RzQ29ubmVjdGlvbk9yZGVyYnlJbnB1dD4+PjtcbiAgLyoqIFVzZSBJRCB0byByZXR1cm4gb25seSBjaGlsZHJlbi4gVXNlIDAgdG8gcmV0dXJuIG9ubHkgdG9wLWxldmVsIGl0ZW1zICovXG4gIHBhcmVudD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG4gIC8qKiBTcGVjaWZ5IG9iamVjdHMgd2hvc2UgcGFyZW50IGlzIGluIGFuIGFycmF5ICovXG4gIHBhcmVudEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTcGVjaWZ5IHBvc3RzIHdob3NlIHBhcmVudCBpcyBub3QgaW4gYW4gYXJyYXkgKi9cbiAgcGFyZW50Tm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNob3cgcG9zdHMgd2l0aCBhIHNwZWNpZmljIHBhc3N3b3JkLiAqL1xuICBwYXNzd29yZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogU2hvdyBQb3N0cyBiYXNlZCBvbiBhIGtleXdvcmQgc2VhcmNoICovXG4gIHNlYXJjaD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogUmV0cmlldmUgcG9zdHMgd2hlcmUgcG9zdCBzdGF0dXMgaXMgaW4gYW4gYXJyYXkuICovXG4gIHN0YXRpPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFBvc3RTdGF0dXNFbnVtPj4+O1xuICAvKiogU2hvdyBwb3N0cyB3aXRoIGEgc3BlY2lmaWMgc3RhdHVzLiAqL1xuICBzdGF0dXM/OiBJbnB1dE1heWJlPFBvc3RTdGF0dXNFbnVtPjtcbiAgLyoqIFRpdGxlIG9mIHRoZSBvYmplY3QgKi9cbiAgdGl0bGU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFJvb3RRdWVyeSB0eXBlIGFuZCB0aGUgTWVudSB0eXBlICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb01lbnVDb25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIE1lbnVDb25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvTWVudUNvbm5lY3Rpb24nO1xuICAvKiogRWRnZXMgZm9yIHRoZSBSb290UXVlcnlUb01lbnVDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbiAgZWRnZXM6IEFycmF5PFJvb3RRdWVyeVRvTWVudUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBub2RlcyBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZXM6IEFycmF5PE1lbnU+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBSb290UXVlcnlUb01lbnVDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvTWVudUNvbm5lY3Rpb25FZGdlID0gRWRnZSAmIE1lbnVDb25uZWN0aW9uRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnlUb01lbnVDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogTWVudTtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlICZxdW90O1Jvb3RRdWVyeVRvTWVudUNvbm5lY3Rpb24mcXVvdDsgKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvTWVudUNvbm5lY3Rpb25QYWdlSW5mbyA9IE1lbnVDb25uZWN0aW9uUGFnZUluZm8gJiBQYWdlSW5mbyAmIFdwUGFnZUluZm8gJiB7XG4gIF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5VG9NZW51Q29ubmVjdGlvblBhZ2VJbmZvJztcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBBcmd1bWVudHMgZm9yIGZpbHRlcmluZyB0aGUgUm9vdFF1ZXJ5VG9NZW51Q29ubmVjdGlvbiBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb01lbnVDb25uZWN0aW9uV2hlcmVBcmdzID0ge1xuICAvKiogVGhlIGRhdGFiYXNlIElEIG9mIHRoZSBvYmplY3QgKi9cbiAgaWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBtZW51IGxvY2F0aW9uIGZvciB0aGUgbWVudSBiZWluZyBxdWVyaWVkICovXG4gIGxvY2F0aW9uPzogSW5wdXRNYXliZTxNZW51TG9jYXRpb25FbnVtPjtcbiAgLyoqIFRoZSBzbHVnIG9mIHRoZSBtZW51IHRvIHF1ZXJ5IGl0ZW1zIGZvciAqL1xuICBzbHVnPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBSb290UXVlcnkgdHlwZSBhbmQgdGhlIE1lbnVJdGVtIHR5cGUgKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvTWVudUl0ZW1Db25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIE1lbnVJdGVtQ29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnlUb01lbnVJdGVtQ29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIFJvb3RRdWVyeVRvTWVudUl0ZW1Db25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbiAgZWRnZXM6IEFycmF5PFJvb3RRdWVyeVRvTWVudUl0ZW1Db25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxNZW51SXRlbT47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFJvb3RRdWVyeVRvTWVudUl0ZW1Db25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvTWVudUl0ZW1Db25uZWN0aW9uRWRnZSA9IEVkZ2UgJiBNZW51SXRlbUNvbm5lY3Rpb25FZGdlICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvTWVudUl0ZW1Db25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogTWVudUl0ZW07XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtSb290UXVlcnlUb01lbnVJdGVtQ29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9NZW51SXRlbUNvbm5lY3Rpb25QYWdlSW5mbyA9IE1lbnVJdGVtQ29ubmVjdGlvblBhZ2VJbmZvICYgUGFnZUluZm8gJiBXcFBhZ2VJbmZvICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvTWVudUl0ZW1Db25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIEFyZ3VtZW50cyBmb3IgZmlsdGVyaW5nIHRoZSBSb290UXVlcnlUb01lbnVJdGVtQ29ubmVjdGlvbiBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb01lbnVJdGVtQ29ubmVjdGlvbldoZXJlQXJncyA9IHtcbiAgLyoqIFRoZSBkYXRhYmFzZSBJRCBvZiB0aGUgb2JqZWN0ICovXG4gIGlkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgbWVudSBsb2NhdGlvbiBmb3IgdGhlIG1lbnUgYmVpbmcgcXVlcmllZCAqL1xuICBsb2NhdGlvbj86IElucHV0TWF5YmU8TWVudUxvY2F0aW9uRW51bT47XG4gIC8qKiBUaGUgZGF0YWJhc2UgSUQgb2YgdGhlIHBhcmVudCBtZW51IG9iamVjdCAqL1xuICBwYXJlbnREYXRhYmFzZUlkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgSUQgb2YgdGhlIHBhcmVudCBtZW51IG9iamVjdCAqL1xuICBwYXJlbnRJZD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBSb290UXVlcnkgdHlwZSBhbmQgdGhlIHBhZ2UgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9QYWdlQ29ubmVjdGlvbiA9IENvbm5lY3Rpb24gJiBQYWdlQ29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnlUb1BhZ2VDb25uZWN0aW9uJztcbiAgLyoqIEVkZ2VzIGZvciB0aGUgUm9vdFF1ZXJ5VG9QYWdlQ29ubmVjdGlvbiBjb25uZWN0aW9uICovXG4gIGVkZ2VzOiBBcnJheTxSb290UXVlcnlUb1BhZ2VDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxQYWdlPjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogUm9vdFF1ZXJ5VG9QYWdlQ29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEFuIGVkZ2UgaW4gYSBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb1BhZ2VDb25uZWN0aW9uRWRnZSA9IEVkZ2UgJiBQYWdlQ29ubmVjdGlvbkVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5VG9QYWdlQ29ubmVjdGlvbkVkZ2UnO1xuICAvKiogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaXRlbSBhdCB0aGUgZW5kIG9mIHRoZSBlZGdlICovXG4gIG5vZGU6IFBhZ2U7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtSb290UXVlcnlUb1BhZ2VDb25uZWN0aW9uJnF1b3Q7ICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb1BhZ2VDb25uZWN0aW9uUGFnZUluZm8gPSBQYWdlQ29ubmVjdGlvblBhZ2VJbmZvICYgUGFnZUluZm8gJiBXcFBhZ2VJbmZvICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvUGFnZUNvbm5lY3Rpb25QYWdlSW5mbyc7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogQXJndW1lbnRzIGZvciBmaWx0ZXJpbmcgdGhlIFJvb3RRdWVyeVRvUGFnZUNvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9QYWdlQ29ubmVjdGlvbldoZXJlQXJncyA9IHtcbiAgLyoqIFRoZSB1c2VyIHRoYXQncyBjb25uZWN0ZWQgYXMgdGhlIGF1dGhvciBvZiB0aGUgb2JqZWN0LiBVc2UgdGhlIHVzZXJJZCBmb3IgdGhlIGF1dGhvciBvYmplY3QuICovXG4gIGF1dGhvcj86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogRmluZCBvYmplY3RzIGNvbm5lY3RlZCB0byBhdXRob3IocykgaW4gdGhlIGFycmF5IG9mIGF1dGhvcidzIHVzZXJJZHMgKi9cbiAgYXV0aG9ySW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEZpbmQgb2JqZWN0cyBjb25uZWN0ZWQgdG8gdGhlIGF1dGhvciBieSB0aGUgYXV0aG9yJ3MgbmljZW5hbWUgKi9cbiAgYXV0aG9yTmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogRmluZCBvYmplY3RzIE5PVCBjb25uZWN0ZWQgdG8gYXV0aG9yKHMpIGluIHRoZSBhcnJheSBvZiBhdXRob3IncyB1c2VySWRzICovXG4gIGF1dGhvck5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBGaWx0ZXIgdGhlIGNvbm5lY3Rpb24gYmFzZWQgb24gZGF0ZXMgKi9cbiAgZGF0ZVF1ZXJ5PzogSW5wdXRNYXliZTxEYXRlUXVlcnlJbnB1dD47XG4gIC8qKiBUcnVlIGZvciBvYmplY3RzIHdpdGggcGFzc3dvcmRzOyBGYWxzZSBmb3Igb2JqZWN0cyB3aXRob3V0IHBhc3N3b3JkczsgbnVsbCBmb3IgYWxsIG9iamVjdHMgd2l0aCBvciB3aXRob3V0IHBhc3N3b3JkcyAqL1xuICBoYXNQYXNzd29yZD86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIFNwZWNpZmljIGRhdGFiYXNlIElEIG9mIHRoZSBvYmplY3QgKi9cbiAgaWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIElEcyBmb3IgdGhlIG9iamVjdHMgdG8gcmV0cmlldmUgKi9cbiAgaW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEdldCBvYmplY3RzIHdpdGggYSBzcGVjaWZpYyBtaW1lVHlwZSBwcm9wZXJ0eSAqL1xuICBtaW1lVHlwZT86IElucHV0TWF5YmU8TWltZVR5cGVFbnVtPjtcbiAgLyoqIFNsdWcgLyBwb3N0X25hbWUgb2YgdGhlIG9iamVjdCAqL1xuICBuYW1lPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBTcGVjaWZ5IG9iamVjdHMgdG8gcmV0cmlldmUuIFVzZSBzbHVncyAqL1xuICBuYW1lSW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTcGVjaWZ5IElEcyBOT1QgdG8gcmV0cmlldmUuIElmIHRoaXMgaXMgdXNlZCBpbiB0aGUgc2FtZSBxdWVyeSBhcyBcImluXCIsIGl0IHdpbGwgYmUgaWdub3JlZCAqL1xuICBub3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogV2hhdCBwYXJhbWV0ZXIgdG8gdXNlIHRvIG9yZGVyIHRoZSBvYmplY3RzIGJ5LiAqL1xuICBvcmRlcmJ5PzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFBvc3RPYmplY3RzQ29ubmVjdGlvbk9yZGVyYnlJbnB1dD4+PjtcbiAgLyoqIFVzZSBJRCB0byByZXR1cm4gb25seSBjaGlsZHJlbi4gVXNlIDAgdG8gcmV0dXJuIG9ubHkgdG9wLWxldmVsIGl0ZW1zICovXG4gIHBhcmVudD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG4gIC8qKiBTcGVjaWZ5IG9iamVjdHMgd2hvc2UgcGFyZW50IGlzIGluIGFuIGFycmF5ICovXG4gIHBhcmVudEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTcGVjaWZ5IHBvc3RzIHdob3NlIHBhcmVudCBpcyBub3QgaW4gYW4gYXJyYXkgKi9cbiAgcGFyZW50Tm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNob3cgcG9zdHMgd2l0aCBhIHNwZWNpZmljIHBhc3N3b3JkLiAqL1xuICBwYXNzd29yZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogU2hvdyBQb3N0cyBiYXNlZCBvbiBhIGtleXdvcmQgc2VhcmNoICovXG4gIHNlYXJjaD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogUmV0cmlldmUgcG9zdHMgd2hlcmUgcG9zdCBzdGF0dXMgaXMgaW4gYW4gYXJyYXkuICovXG4gIHN0YXRpPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFBvc3RTdGF0dXNFbnVtPj4+O1xuICAvKiogU2hvdyBwb3N0cyB3aXRoIGEgc3BlY2lmaWMgc3RhdHVzLiAqL1xuICBzdGF0dXM/OiBJbnB1dE1heWJlPFBvc3RTdGF0dXNFbnVtPjtcbiAgLyoqIFRpdGxlIG9mIHRoZSBvYmplY3QgKi9cbiAgdGl0bGU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFJvb3RRdWVyeSB0eXBlIGFuZCB0aGUgUGx1Z2luIHR5cGUgKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvUGx1Z2luQ29ubmVjdGlvbiA9IENvbm5lY3Rpb24gJiBQbHVnaW5Db25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvUGx1Z2luQ29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIFJvb3RRdWVyeVRvUGx1Z2luQ29ubmVjdGlvbiBjb25uZWN0aW9uICovXG4gIGVkZ2VzOiBBcnJheTxSb290UXVlcnlUb1BsdWdpbkNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBub2RlcyBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZXM6IEFycmF5PFBsdWdpbj47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFJvb3RRdWVyeVRvUGx1Z2luQ29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEFuIGVkZ2UgaW4gYSBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb1BsdWdpbkNvbm5lY3Rpb25FZGdlID0gRWRnZSAmIFBsdWdpbkNvbm5lY3Rpb25FZGdlICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvUGx1Z2luQ29ubmVjdGlvbkVkZ2UnO1xuICAvKiogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaXRlbSBhdCB0aGUgZW5kIG9mIHRoZSBlZGdlICovXG4gIG5vZGU6IFBsdWdpbjtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlICZxdW90O1Jvb3RRdWVyeVRvUGx1Z2luQ29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9QbHVnaW5Db25uZWN0aW9uUGFnZUluZm8gPSBQYWdlSW5mbyAmIFBsdWdpbkNvbm5lY3Rpb25QYWdlSW5mbyAmIFdwUGFnZUluZm8gJiB7XG4gIF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5VG9QbHVnaW5Db25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIEFyZ3VtZW50cyBmb3IgZmlsdGVyaW5nIHRoZSBSb290UXVlcnlUb1BsdWdpbkNvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9QbHVnaW5Db25uZWN0aW9uV2hlcmVBcmdzID0ge1xuICAvKiogU2hvdyBwbHVnaW4gYmFzZWQgb24gYSBrZXl3b3JkIHNlYXJjaC4gKi9cbiAgc2VhcmNoPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBSZXRyaWV2ZSBwbHVnaW5zIHdoZXJlIHBsdWdpbiBzdGF0dXMgaXMgaW4gYW4gYXJyYXkuICovXG4gIHN0YXRpPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFBsdWdpblN0YXR1c0VudW0+Pj47XG4gIC8qKiBTaG93IHBsdWdpbnMgd2l0aCBhIHNwZWNpZmljIHN0YXR1cy4gKi9cbiAgc3RhdHVzPzogSW5wdXRNYXliZTxQbHVnaW5TdGF0dXNFbnVtPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFJvb3RRdWVyeSB0eXBlIGFuZCB0aGUgcG9zdCB0eXBlICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb1Bvc3RDb25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIFBvc3RDb25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvUG9zdENvbm5lY3Rpb24nO1xuICAvKiogRWRnZXMgZm9yIHRoZSBSb290UXVlcnlUb1Bvc3RDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbiAgZWRnZXM6IEFycmF5PFJvb3RRdWVyeVRvUG9zdENvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBub2RlcyBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZXM6IEFycmF5PFBvc3Q+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBSb290UXVlcnlUb1Bvc3RDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvUG9zdENvbm5lY3Rpb25FZGdlID0gRWRnZSAmIFBvc3RDb25uZWN0aW9uRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnlUb1Bvc3RDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogUG9zdDtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlICZxdW90O1Jvb3RRdWVyeVRvUG9zdENvbm5lY3Rpb24mcXVvdDsgKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvUG9zdENvbm5lY3Rpb25QYWdlSW5mbyA9IFBhZ2VJbmZvICYgUG9zdENvbm5lY3Rpb25QYWdlSW5mbyAmIFdwUGFnZUluZm8gJiB7XG4gIF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5VG9Qb3N0Q29ubmVjdGlvblBhZ2VJbmZvJztcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBBcmd1bWVudHMgZm9yIGZpbHRlcmluZyB0aGUgUm9vdFF1ZXJ5VG9Qb3N0Q29ubmVjdGlvbiBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb1Bvc3RDb25uZWN0aW9uV2hlcmVBcmdzID0ge1xuICAvKiogVGhlIHVzZXIgdGhhdCdzIGNvbm5lY3RlZCBhcyB0aGUgYXV0aG9yIG9mIHRoZSBvYmplY3QuIFVzZSB0aGUgdXNlcklkIGZvciB0aGUgYXV0aG9yIG9iamVjdC4gKi9cbiAgYXV0aG9yPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBGaW5kIG9iamVjdHMgY29ubmVjdGVkIHRvIGF1dGhvcihzKSBpbiB0aGUgYXJyYXkgb2YgYXV0aG9yJ3MgdXNlcklkcyAqL1xuICBhdXRob3JJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogRmluZCBvYmplY3RzIGNvbm5lY3RlZCB0byB0aGUgYXV0aG9yIGJ5IHRoZSBhdXRob3IncyBuaWNlbmFtZSAqL1xuICBhdXRob3JOYW1lPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBGaW5kIG9iamVjdHMgTk9UIGNvbm5lY3RlZCB0byBhdXRob3IocykgaW4gdGhlIGFycmF5IG9mIGF1dGhvcidzIHVzZXJJZHMgKi9cbiAgYXV0aG9yTm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIENhdGVnb3J5IElEICovXG4gIGNhdGVnb3J5SWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIGNhdGVnb3J5IElEcywgdXNlZCB0byBkaXNwbGF5IG9iamVjdHMgZnJvbSBvbmUgY2F0ZWdvcnkgT1IgYW5vdGhlciAqL1xuICBjYXRlZ29yeUluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBVc2UgQ2F0ZWdvcnkgU2x1ZyAqL1xuICBjYXRlZ29yeU5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIGNhdGVnb3J5IElEcywgdXNlZCB0byBkaXNwbGF5IG9iamVjdHMgZnJvbSBvbmUgY2F0ZWdvcnkgT1IgYW5vdGhlciAqL1xuICBjYXRlZ29yeU5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBGaWx0ZXIgdGhlIGNvbm5lY3Rpb24gYmFzZWQgb24gZGF0ZXMgKi9cbiAgZGF0ZVF1ZXJ5PzogSW5wdXRNYXliZTxEYXRlUXVlcnlJbnB1dD47XG4gIC8qKiBUcnVlIGZvciBvYmplY3RzIHdpdGggcGFzc3dvcmRzOyBGYWxzZSBmb3Igb2JqZWN0cyB3aXRob3V0IHBhc3N3b3JkczsgbnVsbCBmb3IgYWxsIG9iamVjdHMgd2l0aCBvciB3aXRob3V0IHBhc3N3b3JkcyAqL1xuICBoYXNQYXNzd29yZD86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIFNwZWNpZmljIGRhdGFiYXNlIElEIG9mIHRoZSBvYmplY3QgKi9cbiAgaWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIElEcyBmb3IgdGhlIG9iamVjdHMgdG8gcmV0cmlldmUgKi9cbiAgaW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEdldCBvYmplY3RzIHdpdGggYSBzcGVjaWZpYyBtaW1lVHlwZSBwcm9wZXJ0eSAqL1xuICBtaW1lVHlwZT86IElucHV0TWF5YmU8TWltZVR5cGVFbnVtPjtcbiAgLyoqIFNsdWcgLyBwb3N0X25hbWUgb2YgdGhlIG9iamVjdCAqL1xuICBuYW1lPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBTcGVjaWZ5IG9iamVjdHMgdG8gcmV0cmlldmUuIFVzZSBzbHVncyAqL1xuICBuYW1lSW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTcGVjaWZ5IElEcyBOT1QgdG8gcmV0cmlldmUuIElmIHRoaXMgaXMgdXNlZCBpbiB0aGUgc2FtZSBxdWVyeSBhcyBcImluXCIsIGl0IHdpbGwgYmUgaWdub3JlZCAqL1xuICBub3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogV2hhdCBwYXJhbWV0ZXIgdG8gdXNlIHRvIG9yZGVyIHRoZSBvYmplY3RzIGJ5LiAqL1xuICBvcmRlcmJ5PzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFBvc3RPYmplY3RzQ29ubmVjdGlvbk9yZGVyYnlJbnB1dD4+PjtcbiAgLyoqIFVzZSBJRCB0byByZXR1cm4gb25seSBjaGlsZHJlbi4gVXNlIDAgdG8gcmV0dXJuIG9ubHkgdG9wLWxldmVsIGl0ZW1zICovXG4gIHBhcmVudD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG4gIC8qKiBTcGVjaWZ5IG9iamVjdHMgd2hvc2UgcGFyZW50IGlzIGluIGFuIGFycmF5ICovXG4gIHBhcmVudEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTcGVjaWZ5IHBvc3RzIHdob3NlIHBhcmVudCBpcyBub3QgaW4gYW4gYXJyYXkgKi9cbiAgcGFyZW50Tm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNob3cgcG9zdHMgd2l0aCBhIHNwZWNpZmljIHBhc3N3b3JkLiAqL1xuICBwYXNzd29yZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogU2hvdyBQb3N0cyBiYXNlZCBvbiBhIGtleXdvcmQgc2VhcmNoICovXG4gIHNlYXJjaD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogUmV0cmlldmUgcG9zdHMgd2hlcmUgcG9zdCBzdGF0dXMgaXMgaW4gYW4gYXJyYXkuICovXG4gIHN0YXRpPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFBvc3RTdGF0dXNFbnVtPj4+O1xuICAvKiogU2hvdyBwb3N0cyB3aXRoIGEgc3BlY2lmaWMgc3RhdHVzLiAqL1xuICBzdGF0dXM/OiBJbnB1dE1heWJlPFBvc3RTdGF0dXNFbnVtPjtcbiAgLyoqIFRhZyBTbHVnICovXG4gIHRhZz86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVXNlIFRhZyBJRCAqL1xuICB0YWdJZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgdGFnIElEcywgdXNlZCB0byBkaXNwbGF5IG9iamVjdHMgZnJvbSBvbmUgdGFnIE9SIGFub3RoZXIgKi9cbiAgdGFnSW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIHRhZyBJRHMsIHVzZWQgdG8gZGlzcGxheSBvYmplY3RzIGZyb20gb25lIHRhZyBPUiBhbm90aGVyICovXG4gIHRhZ05vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiB0YWcgc2x1Z3MsIHVzZWQgdG8gZGlzcGxheSBvYmplY3RzIGZyb20gb25lIHRhZyBBTkQgYW5vdGhlciAqL1xuICB0YWdTbHVnQW5kPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgdGFnIHNsdWdzLCB1c2VkIHRvIGluY2x1ZGUgb2JqZWN0cyBpbiBBTlkgc3BlY2lmaWVkIHRhZ3MgKi9cbiAgdGFnU2x1Z0luPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogVGl0bGUgb2YgdGhlIG9iamVjdCAqL1xuICB0aXRsZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgUm9vdFF1ZXJ5IHR5cGUgYW5kIHRoZSBwb3N0Rm9ybWF0IHR5cGUgKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvUG9zdEZvcm1hdENvbm5lY3Rpb24gPSBDb25uZWN0aW9uICYgUG9zdEZvcm1hdENvbm5lY3Rpb24gJiB7XG4gIF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5VG9Qb3N0Rm9ybWF0Q29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIFJvb3RRdWVyeVRvUG9zdEZvcm1hdENvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8Um9vdFF1ZXJ5VG9Qb3N0Rm9ybWF0Q29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIG5vZGVzIG9mIHRoZSBjb25uZWN0aW9uLCB3aXRob3V0IHRoZSBlZGdlcyAqL1xuICBub2RlczogQXJyYXk8UG9zdEZvcm1hdD47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFJvb3RRdWVyeVRvUG9zdEZvcm1hdENvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBBbiBlZGdlIGluIGEgY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9Qb3N0Rm9ybWF0Q29ubmVjdGlvbkVkZ2UgPSBFZGdlICYgUG9zdEZvcm1hdENvbm5lY3Rpb25FZGdlICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvUG9zdEZvcm1hdENvbm5lY3Rpb25FZGdlJztcbiAgLyoqIEEgY3Vyc29yIGZvciB1c2UgaW4gcGFnaW5hdGlvbiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGl0ZW0gYXQgdGhlIGVuZCBvZiB0aGUgZWRnZSAqL1xuICBub2RlOiBQb3N0Rm9ybWF0O1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgJnF1b3Q7Um9vdFF1ZXJ5VG9Qb3N0Rm9ybWF0Q29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9Qb3N0Rm9ybWF0Q29ubmVjdGlvblBhZ2VJbmZvID0gUGFnZUluZm8gJiBQb3N0Rm9ybWF0Q29ubmVjdGlvblBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnlUb1Bvc3RGb3JtYXRDb25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIEFyZ3VtZW50cyBmb3IgZmlsdGVyaW5nIHRoZSBSb290UXVlcnlUb1Bvc3RGb3JtYXRDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvUG9zdEZvcm1hdENvbm5lY3Rpb25XaGVyZUFyZ3MgPSB7XG4gIC8qKiBVbmlxdWUgY2FjaGUga2V5IHRvIGJlIHByb2R1Y2VkIHdoZW4gdGhpcyBxdWVyeSBpcyBzdG9yZWQgaW4gYW4gb2JqZWN0IGNhY2hlLiBEZWZhdWx0IGlzICdjb3JlJy4gKi9cbiAgY2FjaGVEb21haW4/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRlcm0gSUQgdG8gcmV0cmlldmUgY2hpbGQgdGVybXMgb2YuIElmIG11bHRpcGxlIHRheG9ub21pZXMgYXJlIHBhc3NlZCwgJGNoaWxkX29mIGlzIGlnbm9yZWQuIERlZmF1bHQgMC4gKi9cbiAgY2hpbGRPZj86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogVHJ1ZSB0byBsaW1pdCByZXN1bHRzIHRvIHRlcm1zIHRoYXQgaGF2ZSBubyBjaGlsZHJlbi4gVGhpcyBwYXJhbWV0ZXIgaGFzIG5vIGVmZmVjdCBvbiBub24taGllcmFyY2hpY2FsIHRheG9ub21pZXMuIERlZmF1bHQgZmFsc2UuICovXG4gIGNoaWxkbGVzcz86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIFJldHJpZXZlIHRlcm1zIHdoZXJlIHRoZSBkZXNjcmlwdGlvbiBpcyBMSUtFIHRoZSBpbnB1dCB2YWx1ZS4gRGVmYXVsdCBlbXB0eS4gKi9cbiAgZGVzY3JpcHRpb25MaWtlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiB0ZXJtIGlkcyB0byBleGNsdWRlLiBJZiAkaW5jbHVkZSBpcyBub24tZW1wdHksICRleGNsdWRlIGlzIGlnbm9yZWQuIERlZmF1bHQgZW1wdHkgYXJyYXkuICovXG4gIGV4Y2x1ZGU/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIHRlcm0gaWRzIHRvIGV4Y2x1ZGUgYWxvbmcgd2l0aCBhbGwgb2YgdGhlaXIgZGVzY2VuZGFudCB0ZXJtcy4gSWYgJGluY2x1ZGUgaXMgbm9uLWVtcHR5LCAkZXhjbHVkZV90cmVlIGlzIGlnbm9yZWQuIERlZmF1bHQgZW1wdHkgYXJyYXkuICovXG4gIGV4Y2x1ZGVUcmVlPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBXaGV0aGVyIHRvIGhpZGUgdGVybXMgbm90IGFzc2lnbmVkIHRvIGFueSBwb3N0cy4gQWNjZXB0cyB0cnVlIG9yIGZhbHNlLiBEZWZhdWx0IGZhbHNlICovXG4gIGhpZGVFbXB0eT86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdG8gaW5jbHVkZSB0ZXJtcyB0aGF0IGhhdmUgbm9uLWVtcHR5IGRlc2NlbmRhbnRzIChldmVuIGlmICRoaWRlX2VtcHR5IGlzIHNldCB0byB0cnVlKS4gRGVmYXVsdCB0cnVlLiAqL1xuICBoaWVyYXJjaGljYWw/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiB0ZXJtIGlkcyB0byBpbmNsdWRlLiBEZWZhdWx0IGVtcHR5IGFycmF5LiAqL1xuICBpbmNsdWRlPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBuYW1lcyB0byByZXR1cm4gdGVybShzKSBmb3IuIERlZmF1bHQgZW1wdHkuICovXG4gIG5hbWU/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBSZXRyaWV2ZSB0ZXJtcyB3aGVyZSB0aGUgbmFtZSBpcyBMSUtFIHRoZSBpbnB1dCB2YWx1ZS4gRGVmYXVsdCBlbXB0eS4gKi9cbiAgbmFtZUxpa2U/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIG9iamVjdCBJRHMuIFJlc3VsdHMgd2lsbCBiZSBsaW1pdGVkIHRvIHRlcm1zIGFzc29jaWF0ZWQgd2l0aCB0aGVzZSBvYmplY3RzLiAqL1xuICBvYmplY3RJZHM/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIERpcmVjdGlvbiB0aGUgY29ubmVjdGlvbiBzaG91bGQgYmUgb3JkZXJlZCBpbiAqL1xuICBvcmRlcj86IElucHV0TWF5YmU8T3JkZXJFbnVtPjtcbiAgLyoqIEZpZWxkKHMpIHRvIG9yZGVyIHRlcm1zIGJ5LiBEZWZhdWx0cyB0byAnbmFtZScuICovXG4gIG9yZGVyYnk/OiBJbnB1dE1heWJlPFRlcm1PYmplY3RzQ29ubmVjdGlvbk9yZGVyYnlFbnVtPjtcbiAgLyoqIFdoZXRoZXIgdG8gcGFkIHRoZSBxdWFudGl0eSBvZiBhIHRlcm0ncyBjaGlsZHJlbiBpbiB0aGUgcXVhbnRpdHkgb2YgZWFjaCB0ZXJtJ3MgXCJjb3VudFwiIG9iamVjdCB2YXJpYWJsZS4gRGVmYXVsdCBmYWxzZS4gKi9cbiAgcGFkQ291bnRzPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogUGFyZW50IHRlcm0gSUQgdG8gcmV0cmlldmUgZGlyZWN0LWNoaWxkIHRlcm1zIG9mLiBEZWZhdWx0IGVtcHR5LiAqL1xuICBwYXJlbnQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIFNlYXJjaCBjcml0ZXJpYSB0byBtYXRjaCB0ZXJtcy4gV2lsbCBiZSBTUUwtZm9ybWF0dGVkIHdpdGggd2lsZGNhcmRzIGJlZm9yZSBhbmQgYWZ0ZXIuIERlZmF1bHQgZW1wdHkuICovXG4gIHNlYXJjaD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2Ygc2x1Z3MgdG8gcmV0dXJuIHRlcm0ocykgZm9yLiBEZWZhdWx0IGVtcHR5LiAqL1xuICBzbHVnPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgdGVybSB0YXhvbm9teSBJRHMsIHRvIG1hdGNoIHdoZW4gcXVlcnlpbmcgdGVybXMuICovXG4gIHRlcm1UYXhvbm9tSWQ/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIHRlcm0gdGF4b25vbXkgSURzLCB0byBtYXRjaCB3aGVuIHF1ZXJ5aW5nIHRlcm1zLiAqL1xuICB0ZXJtVGF4b25vbXlJZD86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogV2hldGhlciB0byBwcmltZSBtZXRhIGNhY2hlcyBmb3IgbWF0Y2hlZCB0ZXJtcy4gRGVmYXVsdCB0cnVlLiAqL1xuICB1cGRhdGVUZXJtTWV0YUNhY2hlPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgUm9vdFF1ZXJ5IHR5cGUgYW5kIHRoZSBDb250ZW50Tm9kZSB0eXBlICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb1JldmlzaW9uc0Nvbm5lY3Rpb24gPSBDb25uZWN0aW9uICYgQ29udGVudE5vZGVDb25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvUmV2aXNpb25zQ29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIFJvb3RRdWVyeVRvUmV2aXNpb25zQ29ubmVjdGlvbiBjb25uZWN0aW9uICovXG4gIGVkZ2VzOiBBcnJheTxSb290UXVlcnlUb1JldmlzaW9uc0Nvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBub2RlcyBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZXM6IEFycmF5PENvbnRlbnROb2RlPjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogUm9vdFF1ZXJ5VG9SZXZpc2lvbnNDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvUmV2aXNpb25zQ29ubmVjdGlvbkVkZ2UgPSBDb250ZW50Tm9kZUNvbm5lY3Rpb25FZGdlICYgRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnlUb1JldmlzaW9uc0Nvbm5lY3Rpb25FZGdlJztcbiAgLyoqIEEgY3Vyc29yIGZvciB1c2UgaW4gcGFnaW5hdGlvbiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGl0ZW0gYXQgdGhlIGVuZCBvZiB0aGUgZWRnZSAqL1xuICBub2RlOiBDb250ZW50Tm9kZTtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlICZxdW90O1Jvb3RRdWVyeVRvUmV2aXNpb25zQ29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9SZXZpc2lvbnNDb25uZWN0aW9uUGFnZUluZm8gPSBDb250ZW50Tm9kZUNvbm5lY3Rpb25QYWdlSW5mbyAmIFBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnlUb1JldmlzaW9uc0Nvbm5lY3Rpb25QYWdlSW5mbyc7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogQXJndW1lbnRzIGZvciBmaWx0ZXJpbmcgdGhlIFJvb3RRdWVyeVRvUmV2aXNpb25zQ29ubmVjdGlvbiBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb1JldmlzaW9uc0Nvbm5lY3Rpb25XaGVyZUFyZ3MgPSB7XG4gIC8qKiBUaGUgVHlwZXMgb2YgY29udGVudCB0byBmaWx0ZXIgKi9cbiAgY29udGVudFR5cGVzPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPENvbnRlbnRUeXBlRW51bT4+PjtcbiAgLyoqIEZpbHRlciB0aGUgY29ubmVjdGlvbiBiYXNlZCBvbiBkYXRlcyAqL1xuICBkYXRlUXVlcnk/OiBJbnB1dE1heWJlPERhdGVRdWVyeUlucHV0PjtcbiAgLyoqIFRydWUgZm9yIG9iamVjdHMgd2l0aCBwYXNzd29yZHM7IEZhbHNlIGZvciBvYmplY3RzIHdpdGhvdXQgcGFzc3dvcmRzOyBudWxsIGZvciBhbGwgb2JqZWN0cyB3aXRoIG9yIHdpdGhvdXQgcGFzc3dvcmRzICovXG4gIGhhc1Bhc3N3b3JkPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmaWMgZGF0YWJhc2UgSUQgb2YgdGhlIG9iamVjdCAqL1xuICBpZD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgSURzIGZvciB0aGUgb2JqZWN0cyB0byByZXRyaWV2ZSAqL1xuICBpbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogR2V0IG9iamVjdHMgd2l0aCBhIHNwZWNpZmljIG1pbWVUeXBlIHByb3BlcnR5ICovXG4gIG1pbWVUeXBlPzogSW5wdXRNYXliZTxNaW1lVHlwZUVudW0+O1xuICAvKiogU2x1ZyAvIHBvc3RfbmFtZSBvZiB0aGUgb2JqZWN0ICovXG4gIG5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFNwZWNpZnkgb2JqZWN0cyB0byByZXRyaWV2ZS4gVXNlIHNsdWdzICovXG4gIG5hbWVJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNwZWNpZnkgSURzIE5PVCB0byByZXRyaWV2ZS4gSWYgdGhpcyBpcyB1c2VkIGluIHRoZSBzYW1lIHF1ZXJ5IGFzIFwiaW5cIiwgaXQgd2lsbCBiZSBpZ25vcmVkICovXG4gIG5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBXaGF0IHBhcmFtZXRlciB0byB1c2UgdG8gb3JkZXIgdGhlIG9iamVjdHMgYnkuICovXG4gIG9yZGVyYnk/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8UG9zdE9iamVjdHNDb25uZWN0aW9uT3JkZXJieUlucHV0Pj4+O1xuICAvKiogVXNlIElEIHRvIHJldHVybiBvbmx5IGNoaWxkcmVuLiBVc2UgMCB0byByZXR1cm4gb25seSB0b3AtbGV2ZWwgaXRlbXMgKi9cbiAgcGFyZW50PzogSW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPjtcbiAgLyoqIFNwZWNpZnkgb2JqZWN0cyB3aG9zZSBwYXJlbnQgaXMgaW4gYW4gYXJyYXkgKi9cbiAgcGFyZW50SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNwZWNpZnkgcG9zdHMgd2hvc2UgcGFyZW50IGlzIG5vdCBpbiBhbiBhcnJheSAqL1xuICBwYXJlbnROb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogU2hvdyBwb3N0cyB3aXRoIGEgc3BlY2lmaWMgcGFzc3dvcmQuICovXG4gIHBhc3N3b3JkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBTaG93IFBvc3RzIGJhc2VkIG9uIGEga2V5d29yZCBzZWFyY2ggKi9cbiAgc2VhcmNoPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBSZXRyaWV2ZSBwb3N0cyB3aGVyZSBwb3N0IHN0YXR1cyBpcyBpbiBhbiBhcnJheS4gKi9cbiAgc3RhdGk/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+Pj47XG4gIC8qKiBTaG93IHBvc3RzIHdpdGggYSBzcGVjaWZpYyBzdGF0dXMuICovXG4gIHN0YXR1cz86IElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+O1xuICAvKiogVGl0bGUgb2YgdGhlIG9iamVjdCAqL1xuICB0aXRsZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgUm9vdFF1ZXJ5IHR5cGUgYW5kIHRoZSB0YWcgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9UYWdDb25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIFRhZ0Nvbm5lY3Rpb24gJiB7XG4gIF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5VG9UYWdDb25uZWN0aW9uJztcbiAgLyoqIEVkZ2VzIGZvciB0aGUgUm9vdFF1ZXJ5VG9UYWdDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbiAgZWRnZXM6IEFycmF5PFJvb3RRdWVyeVRvVGFnQ29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIG5vZGVzIG9mIHRoZSBjb25uZWN0aW9uLCB3aXRob3V0IHRoZSBlZGdlcyAqL1xuICBub2RlczogQXJyYXk8VGFnPjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogUm9vdFF1ZXJ5VG9UYWdDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvVGFnQ29ubmVjdGlvbkVkZ2UgPSBFZGdlICYgVGFnQ29ubmVjdGlvbkVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5VG9UYWdDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogVGFnO1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgJnF1b3Q7Um9vdFF1ZXJ5VG9UYWdDb25uZWN0aW9uJnF1b3Q7ICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb1RhZ0Nvbm5lY3Rpb25QYWdlSW5mbyA9IFBhZ2VJbmZvICYgVGFnQ29ubmVjdGlvblBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnlUb1RhZ0Nvbm5lY3Rpb25QYWdlSW5mbyc7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogQXJndW1lbnRzIGZvciBmaWx0ZXJpbmcgdGhlIFJvb3RRdWVyeVRvVGFnQ29ubmVjdGlvbiBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb1RhZ0Nvbm5lY3Rpb25XaGVyZUFyZ3MgPSB7XG4gIC8qKiBVbmlxdWUgY2FjaGUga2V5IHRvIGJlIHByb2R1Y2VkIHdoZW4gdGhpcyBxdWVyeSBpcyBzdG9yZWQgaW4gYW4gb2JqZWN0IGNhY2hlLiBEZWZhdWx0IGlzICdjb3JlJy4gKi9cbiAgY2FjaGVEb21haW4/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRlcm0gSUQgdG8gcmV0cmlldmUgY2hpbGQgdGVybXMgb2YuIElmIG11bHRpcGxlIHRheG9ub21pZXMgYXJlIHBhc3NlZCwgJGNoaWxkX29mIGlzIGlnbm9yZWQuIERlZmF1bHQgMC4gKi9cbiAgY2hpbGRPZj86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogVHJ1ZSB0byBsaW1pdCByZXN1bHRzIHRvIHRlcm1zIHRoYXQgaGF2ZSBubyBjaGlsZHJlbi4gVGhpcyBwYXJhbWV0ZXIgaGFzIG5vIGVmZmVjdCBvbiBub24taGllcmFyY2hpY2FsIHRheG9ub21pZXMuIERlZmF1bHQgZmFsc2UuICovXG4gIGNoaWxkbGVzcz86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIFJldHJpZXZlIHRlcm1zIHdoZXJlIHRoZSBkZXNjcmlwdGlvbiBpcyBMSUtFIHRoZSBpbnB1dCB2YWx1ZS4gRGVmYXVsdCBlbXB0eS4gKi9cbiAgZGVzY3JpcHRpb25MaWtlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiB0ZXJtIGlkcyB0byBleGNsdWRlLiBJZiAkaW5jbHVkZSBpcyBub24tZW1wdHksICRleGNsdWRlIGlzIGlnbm9yZWQuIERlZmF1bHQgZW1wdHkgYXJyYXkuICovXG4gIGV4Y2x1ZGU/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIHRlcm0gaWRzIHRvIGV4Y2x1ZGUgYWxvbmcgd2l0aCBhbGwgb2YgdGhlaXIgZGVzY2VuZGFudCB0ZXJtcy4gSWYgJGluY2x1ZGUgaXMgbm9uLWVtcHR5LCAkZXhjbHVkZV90cmVlIGlzIGlnbm9yZWQuIERlZmF1bHQgZW1wdHkgYXJyYXkuICovXG4gIGV4Y2x1ZGVUcmVlPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBXaGV0aGVyIHRvIGhpZGUgdGVybXMgbm90IGFzc2lnbmVkIHRvIGFueSBwb3N0cy4gQWNjZXB0cyB0cnVlIG9yIGZhbHNlLiBEZWZhdWx0IGZhbHNlICovXG4gIGhpZGVFbXB0eT86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdG8gaW5jbHVkZSB0ZXJtcyB0aGF0IGhhdmUgbm9uLWVtcHR5IGRlc2NlbmRhbnRzIChldmVuIGlmICRoaWRlX2VtcHR5IGlzIHNldCB0byB0cnVlKS4gRGVmYXVsdCB0cnVlLiAqL1xuICBoaWVyYXJjaGljYWw/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiB0ZXJtIGlkcyB0byBpbmNsdWRlLiBEZWZhdWx0IGVtcHR5IGFycmF5LiAqL1xuICBpbmNsdWRlPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBuYW1lcyB0byByZXR1cm4gdGVybShzKSBmb3IuIERlZmF1bHQgZW1wdHkuICovXG4gIG5hbWU/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBSZXRyaWV2ZSB0ZXJtcyB3aGVyZSB0aGUgbmFtZSBpcyBMSUtFIHRoZSBpbnB1dCB2YWx1ZS4gRGVmYXVsdCBlbXB0eS4gKi9cbiAgbmFtZUxpa2U/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIG9iamVjdCBJRHMuIFJlc3VsdHMgd2lsbCBiZSBsaW1pdGVkIHRvIHRlcm1zIGFzc29jaWF0ZWQgd2l0aCB0aGVzZSBvYmplY3RzLiAqL1xuICBvYmplY3RJZHM/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIERpcmVjdGlvbiB0aGUgY29ubmVjdGlvbiBzaG91bGQgYmUgb3JkZXJlZCBpbiAqL1xuICBvcmRlcj86IElucHV0TWF5YmU8T3JkZXJFbnVtPjtcbiAgLyoqIEZpZWxkKHMpIHRvIG9yZGVyIHRlcm1zIGJ5LiBEZWZhdWx0cyB0byAnbmFtZScuICovXG4gIG9yZGVyYnk/OiBJbnB1dE1heWJlPFRlcm1PYmplY3RzQ29ubmVjdGlvbk9yZGVyYnlFbnVtPjtcbiAgLyoqIFdoZXRoZXIgdG8gcGFkIHRoZSBxdWFudGl0eSBvZiBhIHRlcm0ncyBjaGlsZHJlbiBpbiB0aGUgcXVhbnRpdHkgb2YgZWFjaCB0ZXJtJ3MgXCJjb3VudFwiIG9iamVjdCB2YXJpYWJsZS4gRGVmYXVsdCBmYWxzZS4gKi9cbiAgcGFkQ291bnRzPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogUGFyZW50IHRlcm0gSUQgdG8gcmV0cmlldmUgZGlyZWN0LWNoaWxkIHRlcm1zIG9mLiBEZWZhdWx0IGVtcHR5LiAqL1xuICBwYXJlbnQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIFNlYXJjaCBjcml0ZXJpYSB0byBtYXRjaCB0ZXJtcy4gV2lsbCBiZSBTUUwtZm9ybWF0dGVkIHdpdGggd2lsZGNhcmRzIGJlZm9yZSBhbmQgYWZ0ZXIuIERlZmF1bHQgZW1wdHkuICovXG4gIHNlYXJjaD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2Ygc2x1Z3MgdG8gcmV0dXJuIHRlcm0ocykgZm9yLiBEZWZhdWx0IGVtcHR5LiAqL1xuICBzbHVnPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgdGVybSB0YXhvbm9teSBJRHMsIHRvIG1hdGNoIHdoZW4gcXVlcnlpbmcgdGVybXMuICovXG4gIHRlcm1UYXhvbm9tSWQ/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIHRlcm0gdGF4b25vbXkgSURzLCB0byBtYXRjaCB3aGVuIHF1ZXJ5aW5nIHRlcm1zLiAqL1xuICB0ZXJtVGF4b25vbXlJZD86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogV2hldGhlciB0byBwcmltZSBtZXRhIGNhY2hlcyBmb3IgbWF0Y2hlZCB0ZXJtcy4gRGVmYXVsdCB0cnVlLiAqL1xuICB1cGRhdGVUZXJtTWV0YUNhY2hlPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgUm9vdFF1ZXJ5IHR5cGUgYW5kIHRoZSBUYXhvbm9teSB0eXBlICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb1RheG9ub215Q29ubmVjdGlvbiA9IENvbm5lY3Rpb24gJiBUYXhvbm9teUNvbm5lY3Rpb24gJiB7XG4gIF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5VG9UYXhvbm9teUNvbm5lY3Rpb24nO1xuICAvKiogRWRnZXMgZm9yIHRoZSBSb290UXVlcnlUb1RheG9ub215Q29ubmVjdGlvbiBjb25uZWN0aW9uICovXG4gIGVkZ2VzOiBBcnJheTxSb290UXVlcnlUb1RheG9ub215Q29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIG5vZGVzIG9mIHRoZSBjb25uZWN0aW9uLCB3aXRob3V0IHRoZSBlZGdlcyAqL1xuICBub2RlczogQXJyYXk8VGF4b25vbXk+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBSb290UXVlcnlUb1RheG9ub215Q29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEFuIGVkZ2UgaW4gYSBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb1RheG9ub215Q29ubmVjdGlvbkVkZ2UgPSBFZGdlICYgVGF4b25vbXlDb25uZWN0aW9uRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnlUb1RheG9ub215Q29ubmVjdGlvbkVkZ2UnO1xuICAvKiogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaXRlbSBhdCB0aGUgZW5kIG9mIHRoZSBlZGdlICovXG4gIG5vZGU6IFRheG9ub215O1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgJnF1b3Q7Um9vdFF1ZXJ5VG9UYXhvbm9teUNvbm5lY3Rpb24mcXVvdDsgKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvVGF4b25vbXlDb25uZWN0aW9uUGFnZUluZm8gPSBQYWdlSW5mbyAmIFRheG9ub215Q29ubmVjdGlvblBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnlUb1RheG9ub215Q29ubmVjdGlvblBhZ2VJbmZvJztcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFJvb3RRdWVyeSB0eXBlIGFuZCB0aGUgVGVybU5vZGUgdHlwZSAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9UZXJtTm9kZUNvbm5lY3Rpb24gPSBDb25uZWN0aW9uICYgVGVybU5vZGVDb25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvVGVybU5vZGVDb25uZWN0aW9uJztcbiAgLyoqIEVkZ2VzIGZvciB0aGUgUm9vdFF1ZXJ5VG9UZXJtTm9kZUNvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8Um9vdFF1ZXJ5VG9UZXJtTm9kZUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBub2RlcyBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZXM6IEFycmF5PFRlcm1Ob2RlPjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogUm9vdFF1ZXJ5VG9UZXJtTm9kZUNvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBBbiBlZGdlIGluIGEgY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9UZXJtTm9kZUNvbm5lY3Rpb25FZGdlID0gRWRnZSAmIFRlcm1Ob2RlQ29ubmVjdGlvbkVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5VG9UZXJtTm9kZUNvbm5lY3Rpb25FZGdlJztcbiAgLyoqIEEgY3Vyc29yIGZvciB1c2UgaW4gcGFnaW5hdGlvbiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGl0ZW0gYXQgdGhlIGVuZCBvZiB0aGUgZWRnZSAqL1xuICBub2RlOiBUZXJtTm9kZTtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlICZxdW90O1Jvb3RRdWVyeVRvVGVybU5vZGVDb25uZWN0aW9uJnF1b3Q7ICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb1Rlcm1Ob2RlQ29ubmVjdGlvblBhZ2VJbmZvID0gUGFnZUluZm8gJiBUZXJtTm9kZUNvbm5lY3Rpb25QYWdlSW5mbyAmIFdwUGFnZUluZm8gJiB7XG4gIF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5VG9UZXJtTm9kZUNvbm5lY3Rpb25QYWdlSW5mbyc7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogQXJndW1lbnRzIGZvciBmaWx0ZXJpbmcgdGhlIFJvb3RRdWVyeVRvVGVybU5vZGVDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvVGVybU5vZGVDb25uZWN0aW9uV2hlcmVBcmdzID0ge1xuICAvKiogVW5pcXVlIGNhY2hlIGtleSB0byBiZSBwcm9kdWNlZCB3aGVuIHRoaXMgcXVlcnkgaXMgc3RvcmVkIGluIGFuIG9iamVjdCBjYWNoZS4gRGVmYXVsdCBpcyAnY29yZScuICovXG4gIGNhY2hlRG9tYWluPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUZXJtIElEIHRvIHJldHJpZXZlIGNoaWxkIHRlcm1zIG9mLiBJZiBtdWx0aXBsZSB0YXhvbm9taWVzIGFyZSBwYXNzZWQsICRjaGlsZF9vZiBpcyBpZ25vcmVkLiBEZWZhdWx0IDAuICovXG4gIGNoaWxkT2Y/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIFRydWUgdG8gbGltaXQgcmVzdWx0cyB0byB0ZXJtcyB0aGF0IGhhdmUgbm8gY2hpbGRyZW4uIFRoaXMgcGFyYW1ldGVyIGhhcyBubyBlZmZlY3Qgb24gbm9uLWhpZXJhcmNoaWNhbCB0YXhvbm9taWVzLiBEZWZhdWx0IGZhbHNlLiAqL1xuICBjaGlsZGxlc3M/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBSZXRyaWV2ZSB0ZXJtcyB3aGVyZSB0aGUgZGVzY3JpcHRpb24gaXMgTElLRSB0aGUgaW5wdXQgdmFsdWUuIERlZmF1bHQgZW1wdHkuICovXG4gIGRlc2NyaXB0aW9uTGlrZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgdGVybSBpZHMgdG8gZXhjbHVkZS4gSWYgJGluY2x1ZGUgaXMgbm9uLWVtcHR5LCAkZXhjbHVkZSBpcyBpZ25vcmVkLiBEZWZhdWx0IGVtcHR5IGFycmF5LiAqL1xuICBleGNsdWRlPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiB0ZXJtIGlkcyB0byBleGNsdWRlIGFsb25nIHdpdGggYWxsIG9mIHRoZWlyIGRlc2NlbmRhbnQgdGVybXMuIElmICRpbmNsdWRlIGlzIG5vbi1lbXB0eSwgJGV4Y2x1ZGVfdHJlZSBpcyBpZ25vcmVkLiBEZWZhdWx0IGVtcHR5IGFycmF5LiAqL1xuICBleGNsdWRlVHJlZT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogV2hldGhlciB0byBoaWRlIHRlcm1zIG5vdCBhc3NpZ25lZCB0byBhbnkgcG9zdHMuIEFjY2VwdHMgdHJ1ZSBvciBmYWxzZS4gRGVmYXVsdCBmYWxzZSAqL1xuICBoaWRlRW1wdHk/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBXaGV0aGVyIHRvIGluY2x1ZGUgdGVybXMgdGhhdCBoYXZlIG5vbi1lbXB0eSBkZXNjZW5kYW50cyAoZXZlbiBpZiAkaGlkZV9lbXB0eSBpcyBzZXQgdG8gdHJ1ZSkuIERlZmF1bHQgdHJ1ZS4gKi9cbiAgaGllcmFyY2hpY2FsPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgdGVybSBpZHMgdG8gaW5jbHVkZS4gRGVmYXVsdCBlbXB0eSBhcnJheS4gKi9cbiAgaW5jbHVkZT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgbmFtZXMgdG8gcmV0dXJuIHRlcm0ocykgZm9yLiBEZWZhdWx0IGVtcHR5LiAqL1xuICBuYW1lPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogUmV0cmlldmUgdGVybXMgd2hlcmUgdGhlIG5hbWUgaXMgTElLRSB0aGUgaW5wdXQgdmFsdWUuIERlZmF1bHQgZW1wdHkuICovXG4gIG5hbWVMaWtlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBvYmplY3QgSURzLiBSZXN1bHRzIHdpbGwgYmUgbGltaXRlZCB0byB0ZXJtcyBhc3NvY2lhdGVkIHdpdGggdGhlc2Ugb2JqZWN0cy4gKi9cbiAgb2JqZWN0SWRzPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBEaXJlY3Rpb24gdGhlIGNvbm5lY3Rpb24gc2hvdWxkIGJlIG9yZGVyZWQgaW4gKi9cbiAgb3JkZXI/OiBJbnB1dE1heWJlPE9yZGVyRW51bT47XG4gIC8qKiBGaWVsZChzKSB0byBvcmRlciB0ZXJtcyBieS4gRGVmYXVsdHMgdG8gJ25hbWUnLiAqL1xuICBvcmRlcmJ5PzogSW5wdXRNYXliZTxUZXJtT2JqZWN0c0Nvbm5lY3Rpb25PcmRlcmJ5RW51bT47XG4gIC8qKiBXaGV0aGVyIHRvIHBhZCB0aGUgcXVhbnRpdHkgb2YgYSB0ZXJtJ3MgY2hpbGRyZW4gaW4gdGhlIHF1YW50aXR5IG9mIGVhY2ggdGVybSdzIFwiY291bnRcIiBvYmplY3QgdmFyaWFibGUuIERlZmF1bHQgZmFsc2UuICovXG4gIHBhZENvdW50cz86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIFBhcmVudCB0ZXJtIElEIHRvIHJldHJpZXZlIGRpcmVjdC1jaGlsZCB0ZXJtcyBvZi4gRGVmYXVsdCBlbXB0eS4gKi9cbiAgcGFyZW50PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBTZWFyY2ggY3JpdGVyaWEgdG8gbWF0Y2ggdGVybXMuIFdpbGwgYmUgU1FMLWZvcm1hdHRlZCB3aXRoIHdpbGRjYXJkcyBiZWZvcmUgYW5kIGFmdGVyLiBEZWZhdWx0IGVtcHR5LiAqL1xuICBzZWFyY2g/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIHNsdWdzIHRvIHJldHVybiB0ZXJtKHMpIGZvci4gRGVmYXVsdCBlbXB0eS4gKi9cbiAgc2x1Zz86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFRoZSBUYXhvbm9teSB0byBmaWx0ZXIgdGVybXMgYnkgKi9cbiAgdGF4b25vbWllcz86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxUYXhvbm9teUVudW0+Pj47XG4gIC8qKiBBcnJheSBvZiB0ZXJtIHRheG9ub215IElEcywgdG8gbWF0Y2ggd2hlbiBxdWVyeWluZyB0ZXJtcy4gKi9cbiAgdGVybVRheG9ub21JZD86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgdGVybSB0YXhvbm9teSBJRHMsIHRvIG1hdGNoIHdoZW4gcXVlcnlpbmcgdGVybXMuICovXG4gIHRlcm1UYXhvbm9teUlkPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBXaGV0aGVyIHRvIHByaW1lIG1ldGEgY2FjaGVzIGZvciBtYXRjaGVkIHRlcm1zLiBEZWZhdWx0IHRydWUuICovXG4gIHVwZGF0ZVRlcm1NZXRhQ2FjaGU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBSb290UXVlcnkgdHlwZSBhbmQgdGhlIFRoZW1lIHR5cGUgKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvVGhlbWVDb25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIFRoZW1lQ29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnlUb1RoZW1lQ29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIFJvb3RRdWVyeVRvVGhlbWVDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbiAgZWRnZXM6IEFycmF5PFJvb3RRdWVyeVRvVGhlbWVDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxUaGVtZT47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFJvb3RRdWVyeVRvVGhlbWVDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvVGhlbWVDb25uZWN0aW9uRWRnZSA9IEVkZ2UgJiBUaGVtZUNvbm5lY3Rpb25FZGdlICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvVGhlbWVDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogVGhlbWU7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtSb290UXVlcnlUb1RoZW1lQ29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9UaGVtZUNvbm5lY3Rpb25QYWdlSW5mbyA9IFBhZ2VJbmZvICYgVGhlbWVDb25uZWN0aW9uUGFnZUluZm8gJiBXcFBhZ2VJbmZvICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvVGhlbWVDb25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgUm9vdFF1ZXJ5IHR5cGUgYW5kIHRoZSBVc2VyIHR5cGUgKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvVXNlckNvbm5lY3Rpb24gPSBDb25uZWN0aW9uICYgVXNlckNvbm5lY3Rpb24gJiB7XG4gIF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5VG9Vc2VyQ29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIFJvb3RRdWVyeVRvVXNlckNvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8Um9vdFF1ZXJ5VG9Vc2VyQ29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIG5vZGVzIG9mIHRoZSBjb25uZWN0aW9uLCB3aXRob3V0IHRoZSBlZGdlcyAqL1xuICBub2RlczogQXJyYXk8VXNlcj47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFJvb3RRdWVyeVRvVXNlckNvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBBbiBlZGdlIGluIGEgY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9Vc2VyQ29ubmVjdGlvbkVkZ2UgPSBFZGdlICYgVXNlckNvbm5lY3Rpb25FZGdlICYge1xuICBfX3R5cGVuYW1lPzogJ1Jvb3RRdWVyeVRvVXNlckNvbm5lY3Rpb25FZGdlJztcbiAgLyoqIEEgY3Vyc29yIGZvciB1c2UgaW4gcGFnaW5hdGlvbiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGl0ZW0gYXQgdGhlIGVuZCBvZiB0aGUgZWRnZSAqL1xuICBub2RlOiBVc2VyO1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgJnF1b3Q7Um9vdFF1ZXJ5VG9Vc2VyQ29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgUm9vdFF1ZXJ5VG9Vc2VyQ29ubmVjdGlvblBhZ2VJbmZvID0gUGFnZUluZm8gJiBVc2VyQ29ubmVjdGlvblBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnlUb1VzZXJDb25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIEFyZ3VtZW50cyBmb3IgZmlsdGVyaW5nIHRoZSBSb290UXVlcnlUb1VzZXJDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvVXNlckNvbm5lY3Rpb25XaGVyZUFyZ3MgPSB7XG4gIC8qKiBBcnJheSBvZiB1c2VySWRzIHRvIGV4Y2x1ZGUuICovXG4gIGV4Y2x1ZGU/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+Pj47XG4gIC8qKiBQYXNzIGFuIGFycmF5IG9mIHBvc3QgdHlwZXMgdG8gZmlsdGVyIHJlc3VsdHMgdG8gdXNlcnMgd2hvIGhhdmUgcHVibGlzaGVkIHBvc3RzIGluIHRob3NlIHBvc3QgdHlwZXMuICovXG4gIGhhc1B1Ymxpc2hlZFBvc3RzPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPENvbnRlbnRUeXBlRW51bT4+PjtcbiAgLyoqIEFycmF5IG9mIHVzZXJJZHMgdG8gaW5jbHVkZS4gKi9cbiAgaW5jbHVkZT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFRoZSB1c2VyIGxvZ2luLiAqL1xuICBsb2dpbj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQW4gYXJyYXkgb2YgbG9naW5zIHRvIGluY2x1ZGUuIFVzZXJzIG1hdGNoaW5nIG9uZSBvZiB0aGVzZSBsb2dpbnMgd2lsbCBiZSBpbmNsdWRlZCBpbiByZXN1bHRzLiAqL1xuICBsb2dpbkluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogQW4gYXJyYXkgb2YgbG9naW5zIHRvIGV4Y2x1ZGUuIFVzZXJzIG1hdGNoaW5nIG9uZSBvZiB0aGVzZSBsb2dpbnMgd2lsbCBub3QgYmUgaW5jbHVkZWQgaW4gcmVzdWx0cy4gKi9cbiAgbG9naW5Ob3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFRoZSB1c2VyIG5pY2VuYW1lLiAqL1xuICBuaWNlbmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQW4gYXJyYXkgb2YgbmljZW5hbWVzIHRvIGluY2x1ZGUuIFVzZXJzIG1hdGNoaW5nIG9uZSBvZiB0aGVzZSBuaWNlbmFtZXMgd2lsbCBiZSBpbmNsdWRlZCBpbiByZXN1bHRzLiAqL1xuICBuaWNlbmFtZUluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogQW4gYXJyYXkgb2YgbmljZW5hbWVzIHRvIGV4Y2x1ZGUuIFVzZXJzIG1hdGNoaW5nIG9uZSBvZiB0aGVzZSBuaWNlbmFtZXMgd2lsbCBub3QgYmUgaW5jbHVkZWQgaW4gcmVzdWx0cy4gKi9cbiAgbmljZW5hbWVOb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFdoYXQgcGFyYW1ldGVyIHRvIHVzZSB0byBvcmRlciB0aGUgb2JqZWN0cyBieS4gKi9cbiAgb3JkZXJieT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxVc2Vyc0Nvbm5lY3Rpb25PcmRlcmJ5SW5wdXQ+Pj47XG4gIC8qKiBBbiBhcnJheSBvZiByb2xlIG5hbWVzIHRoYXQgdXNlcnMgbXVzdCBtYXRjaCB0byBiZSBpbmNsdWRlZCBpbiByZXN1bHRzLiBOb3RlIHRoYXQgdGhpcyBpcyBhbiBpbmNsdXNpdmUgbGlzdDogdXNlcnMgbXVzdCBtYXRjaCAqZWFjaCogcm9sZS4gKi9cbiAgcm9sZT86IElucHV0TWF5YmU8VXNlclJvbGVFbnVtPjtcbiAgLyoqIEFuIGFycmF5IG9mIHJvbGUgbmFtZXMuIE1hdGNoZWQgdXNlcnMgbXVzdCBoYXZlIGF0IGxlYXN0IG9uZSBvZiB0aGVzZSByb2xlcy4gKi9cbiAgcm9sZUluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFVzZXJSb2xlRW51bT4+PjtcbiAgLyoqIEFuIGFycmF5IG9mIHJvbGUgbmFtZXMgdG8gZXhjbHVkZS4gVXNlcnMgbWF0Y2hpbmcgb25lIG9yIG1vcmUgb2YgdGhlc2Ugcm9sZXMgd2lsbCBub3QgYmUgaW5jbHVkZWQgaW4gcmVzdWx0cy4gKi9cbiAgcm9sZU5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFVzZXJSb2xlRW51bT4+PjtcbiAgLyoqIFNlYXJjaCBrZXl3b3JkLiBTZWFyY2hlcyBmb3IgcG9zc2libGUgc3RyaW5nIG1hdGNoZXMgb24gY29sdW1ucy4gV2hlbiBcInNlYXJjaENvbHVtbnNcIiBpcyBsZWZ0IGVtcHR5LCBpdCB0cmllcyB0byBkZXRlcm1pbmUgd2hpY2ggY29sdW1uIHRvIHNlYXJjaCBpbiBiYXNlZCBvbiBzZWFyY2ggc3RyaW5nLiAqL1xuICBzZWFyY2g/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIGNvbHVtbiBuYW1lcyB0byBiZSBzZWFyY2hlZC4gQWNjZXB0cyAnSUQnLCAnbG9naW4nLCAnbmljZW5hbWUnLCAnZW1haWwnLCAndXJsJy4gKi9cbiAgc2VhcmNoQ29sdW1ucz86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxVc2Vyc0Nvbm5lY3Rpb25TZWFyY2hDb2x1bW5FbnVtPj4+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgUm9vdFF1ZXJ5IHR5cGUgYW5kIHRoZSBVc2VyUm9sZSB0eXBlICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb1VzZXJSb2xlQ29ubmVjdGlvbiA9IENvbm5lY3Rpb24gJiBVc2VyUm9sZUNvbm5lY3Rpb24gJiB7XG4gIF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5VG9Vc2VyUm9sZUNvbm5lY3Rpb24nO1xuICAvKiogRWRnZXMgZm9yIHRoZSBSb290UXVlcnlUb1VzZXJSb2xlQ29ubmVjdGlvbiBjb25uZWN0aW9uICovXG4gIGVkZ2VzOiBBcnJheTxSb290UXVlcnlUb1VzZXJSb2xlQ29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIG5vZGVzIG9mIHRoZSBjb25uZWN0aW9uLCB3aXRob3V0IHRoZSBlZGdlcyAqL1xuICBub2RlczogQXJyYXk8VXNlclJvbGU+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBSb290UXVlcnlUb1VzZXJSb2xlQ29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEFuIGVkZ2UgaW4gYSBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBSb290UXVlcnlUb1VzZXJSb2xlQ29ubmVjdGlvbkVkZ2UgPSBFZGdlICYgVXNlclJvbGVDb25uZWN0aW9uRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnlUb1VzZXJSb2xlQ29ubmVjdGlvbkVkZ2UnO1xuICAvKiogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaXRlbSBhdCB0aGUgZW5kIG9mIHRoZSBlZGdlICovXG4gIG5vZGU6IFVzZXJSb2xlO1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgJnF1b3Q7Um9vdFF1ZXJ5VG9Vc2VyUm9sZUNvbm5lY3Rpb24mcXVvdDsgKi9cbmV4cG9ydCB0eXBlIFJvb3RRdWVyeVRvVXNlclJvbGVDb25uZWN0aW9uUGFnZUluZm8gPSBQYWdlSW5mbyAmIFVzZXJSb2xlQ29ubmVjdGlvblBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdSb290UXVlcnlUb1VzZXJSb2xlQ29ubmVjdGlvblBhZ2VJbmZvJztcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBUaGUgc3RyYXRlZ3kgdG8gdXNlIHdoZW4gbG9hZGluZyB0aGUgc2NyaXB0ICovXG5leHBvcnQgZW51bSBTY3JpcHRMb2FkaW5nU3RyYXRlZ3lFbnVtIHtcbiAgLyoqIFVzZSB0aGUgc2NyaXB0IGBhc3luY2AgYXR0cmlidXRlICovXG4gIEFzeW5jID0gJ0FTWU5DJyxcbiAgLyoqIFVzZSB0aGUgc2NyaXB0IGBkZWZlcmAgYXR0cmlidXRlICovXG4gIERlZmVyID0gJ0RFRkVSJ1xufVxuXG4vKiogSW5wdXQgZm9yIHRoZSBzZW5kUGFzc3dvcmRSZXNldEVtYWlsIG11dGF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgU2VuZFBhc3N3b3JkUmVzZXRFbWFpbElucHV0ID0ge1xuICAvKiogVGhpcyBpcyBhbiBJRCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gYSBtdXRhdGlvbiBieSB0aGUgY2xpZW50IHRvIHRyYWNrIHRoZSBwcm9ncmVzcyBvZiBtdXRhdGlvbnMgYW5kIGNhdGNoIHBvc3NpYmxlIGR1cGxpY2F0ZSBtdXRhdGlvbiBzdWJtaXNzaW9ucy4gKi9cbiAgY2xpZW50TXV0YXRpb25JZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQSBzdHJpbmcgdGhhdCBjb250YWlucyB0aGUgdXNlcidzIHVzZXJuYW1lIG9yIGVtYWlsIGFkZHJlc3MuICovXG4gIHVzZXJuYW1lOiBTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXTtcbn07XG5cbi8qKiBUaGUgcGF5bG9hZCBmb3IgdGhlIHNlbmRQYXNzd29yZFJlc2V0RW1haWwgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBTZW5kUGFzc3dvcmRSZXNldEVtYWlsUGF5bG9hZCA9IHtcbiAgX190eXBlbmFtZT86ICdTZW5kUGFzc3dvcmRSZXNldEVtYWlsUGF5bG9hZCc7XG4gIC8qKiBJZiBhICYjMDM5O2NsaWVudE11dGF0aW9uSWQmIzAzOTsgaW5wdXQgaXMgcHJvdmlkZWQgdG8gdGhlIG11dGF0aW9uLCBpdCB3aWxsIGJlIHJldHVybmVkIGFzIG91dHB1dCBvbiB0aGUgbXV0YXRpb24uIFRoaXMgSUQgY2FuIGJlIHVzZWQgYnkgdGhlIGNsaWVudCB0byB0cmFjayB0aGUgcHJvZ3Jlc3Mgb2YgbXV0YXRpb25zIGFuZCBjYXRjaCBwb3NzaWJsZSBkdXBsaWNhdGUgbXV0YXRpb24gc3VibWlzc2lvbnMuICovXG4gIGNsaWVudE11dGF0aW9uSWQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hldGhlciB0aGUgbXV0YXRpb24gY29tcGxldGVkIHN1Y2Nlc3NmdWxseS4gVGhpcyBkb2VzIE5PVCBuZWNlc3NhcmlseSBtZWFuIHRoYXQgYW4gZW1haWwgd2FzIHNlbnQuICovXG4gIHN1Y2Nlc3M/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqXG4gICAqIFRoZSB1c2VyIHRoYXQgdGhlIHBhc3N3b3JkIHJlc2V0IGVtYWlsIHdhcyBzZW50IHRvXG4gICAqIEBkZXByZWNhdGVkIFRoaXMgZmllbGQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHZlcnNpb24gb2YgV1BHcmFwaFFMXG4gICAqL1xuICB1c2VyPzogTWF5YmU8VXNlcj47XG59O1xuXG4vKiogQWxsIG9mIHRoZSByZWdpc3RlcmVkIHNldHRpbmdzICovXG5leHBvcnQgdHlwZSBTZXR0aW5ncyA9IHtcbiAgX190eXBlbmFtZT86ICdTZXR0aW5ncyc7XG4gIC8qKiBTZXR0aW5ncyBvZiB0aGUgdGhlIHN0cmluZyBTZXR0aW5ncyBHcm91cCAqL1xuICBkaXNjdXNzaW9uU2V0dGluZ3NEZWZhdWx0Q29tbWVudFN0YXR1cz86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBTZXR0aW5ncyBvZiB0aGUgdGhlIHN0cmluZyBTZXR0aW5ncyBHcm91cCAqL1xuICBkaXNjdXNzaW9uU2V0dGluZ3NEZWZhdWx0UGluZ1N0YXR1cz86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBTZXR0aW5ncyBvZiB0aGUgdGhlIHN0cmluZyBTZXR0aW5ncyBHcm91cCAqL1xuICBnZW5lcmFsU2V0dGluZ3NEYXRlRm9ybWF0PzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFNldHRpbmdzIG9mIHRoZSB0aGUgc3RyaW5nIFNldHRpbmdzIEdyb3VwICovXG4gIGdlbmVyYWxTZXR0aW5nc0Rlc2NyaXB0aW9uPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFNldHRpbmdzIG9mIHRoZSB0aGUgc3RyaW5nIFNldHRpbmdzIEdyb3VwICovXG4gIGdlbmVyYWxTZXR0aW5nc0VtYWlsPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFNldHRpbmdzIG9mIHRoZSB0aGUgc3RyaW5nIFNldHRpbmdzIEdyb3VwICovXG4gIGdlbmVyYWxTZXR0aW5nc0xhbmd1YWdlPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFNldHRpbmdzIG9mIHRoZSB0aGUgaW50ZWdlciBTZXR0aW5ncyBHcm91cCAqL1xuICBnZW5lcmFsU2V0dGluZ3NTdGFydE9mV2Vlaz86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBTZXR0aW5ncyBvZiB0aGUgdGhlIHN0cmluZyBTZXR0aW5ncyBHcm91cCAqL1xuICBnZW5lcmFsU2V0dGluZ3NUaW1lRm9ybWF0PzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFNldHRpbmdzIG9mIHRoZSB0aGUgc3RyaW5nIFNldHRpbmdzIEdyb3VwICovXG4gIGdlbmVyYWxTZXR0aW5nc1RpbWV6b25lPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFNldHRpbmdzIG9mIHRoZSB0aGUgc3RyaW5nIFNldHRpbmdzIEdyb3VwICovXG4gIGdlbmVyYWxTZXR0aW5nc1RpdGxlPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFNldHRpbmdzIG9mIHRoZSB0aGUgc3RyaW5nIFNldHRpbmdzIEdyb3VwICovXG4gIGdlbmVyYWxTZXR0aW5nc1VybD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBTZXR0aW5ncyBvZiB0aGUgdGhlIGJvb2xlYW4gU2V0dGluZ3MgR3JvdXAgKi9cbiAgcGRmcFNldHRpbmdzU2V0dGluZ3NCcG1HdXRlbmJlcmdFbmFibGU/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFNldHRpbmdzIG9mIHRoZSB0aGUgYm9vbGVhbiBTZXR0aW5ncyBHcm91cCAqL1xuICBwZGZwU2V0dGluZ3NTZXR0aW5nc1BkZnBHdXRlbmJlcmdFbmFibGU/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFNldHRpbmdzIG9mIHRoZSB0aGUgaW50ZWdlciBTZXR0aW5ncyBHcm91cCAqL1xuICByZWFkaW5nU2V0dGluZ3NQYWdlRm9yUG9zdHM/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogU2V0dGluZ3Mgb2YgdGhlIHRoZSBpbnRlZ2VyIFNldHRpbmdzIEdyb3VwICovXG4gIHJlYWRpbmdTZXR0aW5nc1BhZ2VPbkZyb250PzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIFNldHRpbmdzIG9mIHRoZSB0aGUgaW50ZWdlciBTZXR0aW5ncyBHcm91cCAqL1xuICByZWFkaW5nU2V0dGluZ3NQb3N0c1BlclBhZ2U/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogU2V0dGluZ3Mgb2YgdGhlIHRoZSBzdHJpbmcgU2V0dGluZ3MgR3JvdXAgKi9cbiAgcmVhZGluZ1NldHRpbmdzU2hvd09uRnJvbnQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogU2V0dGluZ3Mgb2YgdGhlIHRoZSBzdHJpbmcgU2V0dGluZ3MgR3JvdXAgKi9cbiAgdGhlbWVpc2xlU2RrU2V0dGluZ3NTZXR0aW5nc1RoZW1laXNsZVNka1Byb21vdGlvbnM/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogU2V0dGluZ3Mgb2YgdGhlIHRoZSBib29sZWFuIFNldHRpbmdzIEdyb3VwICovXG4gIHRoZW1laXNsZVNka1NldHRpbmdzU2V0dGluZ3NUaGVtZWlzbGVTZGtQcm9tb3Rpb25zTmV2ZUZzZUluc3RhbGxlZD86IE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J10+O1xuICAvKiogU2V0dGluZ3Mgb2YgdGhlIHRoZSBib29sZWFuIFNldHRpbmdzIEdyb3VwICovXG4gIHRoZW1laXNsZVNka1NldHRpbmdzU2V0dGluZ3NUaGVtZWlzbGVTZGtQcm9tb3Rpb25zT3B0aW1vbGVJbnN0YWxsZWQ/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFNldHRpbmdzIG9mIHRoZSB0aGUgYm9vbGVhbiBTZXR0aW5ncyBHcm91cCAqL1xuICB0aGVtZWlzbGVTZGtTZXR0aW5nc1NldHRpbmdzVGhlbWVpc2xlU2RrUHJvbW90aW9uc090dGVySW5zdGFsbGVkPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBTZXR0aW5ncyBvZiB0aGUgdGhlIGJvb2xlYW4gU2V0dGluZ3MgR3JvdXAgKi9cbiAgdGhlbWVpc2xlU2RrU2V0dGluZ3NTZXR0aW5nc1RoZW1laXNsZVNka1Byb21vdGlvbnNSb3BJbnN0YWxsZWQ/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFNldHRpbmdzIG9mIHRoZSB0aGUgaW50ZWdlciBTZXR0aW5ncyBHcm91cCAqL1xuICB3cml0aW5nU2V0dGluZ3NEZWZhdWx0Q2F0ZWdvcnk/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogU2V0dGluZ3Mgb2YgdGhlIHRoZSBzdHJpbmcgU2V0dGluZ3MgR3JvdXAgKi9cbiAgd3JpdGluZ1NldHRpbmdzRGVmYXVsdFBvc3RGb3JtYXQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogU2V0dGluZ3Mgb2YgdGhlIHRoZSBib29sZWFuIFNldHRpbmdzIEdyb3VwICovXG4gIHdyaXRpbmdTZXR0aW5nc1VzZVNtaWxpZXM/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBUaGUgdGFnIHR5cGUgKi9cbmV4cG9ydCB0eXBlIFRhZyA9IERhdGFiYXNlSWRlbnRpZmllciAmIE1lbnVJdGVtTGlua2FibGUgJiBOb2RlICYgVGVybU5vZGUgJiBVbmlmb3JtUmVzb3VyY2VJZGVudGlmaWFibGUgJiB7XG4gIF9fdHlwZW5hbWU/OiAnVGFnJztcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgVGFnIHR5cGUgYW5kIHRoZSBDb250ZW50Tm9kZSB0eXBlICovXG4gIGNvbnRlbnROb2Rlcz86IE1heWJlPFRhZ1RvQ29udGVudE5vZGVDb25uZWN0aW9uPjtcbiAgLyoqIFRoZSBudW1iZXIgb2Ygb2JqZWN0cyBjb25uZWN0ZWQgdG8gdGhlIG9iamVjdCAqL1xuICBjb3VudD86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgdW5pcXVlIGlkZW50aWZpZXIgc3RvcmVkIGluIHRoZSBkYXRhYmFzZSAqL1xuICBkYXRhYmFzZUlkOiBTY2FsYXJzWydJbnQnXVsnb3V0cHV0J107XG4gIC8qKiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIG9iamVjdCAqL1xuICBkZXNjcmlwdGlvbj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFRlcm1Ob2RlIHR5cGUgYW5kIHRoZSBFbnF1ZXVlZFNjcmlwdCB0eXBlICovXG4gIGVucXVldWVkU2NyaXB0cz86IE1heWJlPFRlcm1Ob2RlVG9FbnF1ZXVlZFNjcmlwdENvbm5lY3Rpb24+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBUZXJtTm9kZSB0eXBlIGFuZCB0aGUgRW5xdWV1ZWRTdHlsZXNoZWV0IHR5cGUgKi9cbiAgZW5xdWV1ZWRTdHlsZXNoZWV0cz86IE1heWJlPFRlcm1Ob2RlVG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uPjtcbiAgLyoqIFRoZSB1bmlxdWUgcmVzb3VyY2UgaWRlbnRpZmllciBwYXRoICovXG4gIGlkOiBTY2FsYXJzWydJRCddWydvdXRwdXQnXTtcbiAgLyoqIFdoZXRoZXIgdGhlIG5vZGUgaXMgYSBDb250ZW50IE5vZGUgKi9cbiAgaXNDb250ZW50Tm9kZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZXRoZXIgdGhlIG9iamVjdCBpcyByZXN0cmljdGVkIGZyb20gdGhlIGN1cnJlbnQgdmlld2VyICovXG4gIGlzUmVzdHJpY3RlZD86IE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J10+O1xuICAvKiogV2hldGhlciB0aGUgbm9kZSBpcyBhIFRlcm0gKi9cbiAgaXNUZXJtTm9kZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFRoZSBsaW5rIHRvIHRoZSB0ZXJtICovXG4gIGxpbms/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGh1bWFuIGZyaWVuZGx5IG5hbWUgb2YgdGhlIG9iamVjdC4gKi9cbiAgbmFtZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFRhZyB0eXBlIGFuZCB0aGUgcG9zdCB0eXBlICovXG4gIHBvc3RzPzogTWF5YmU8VGFnVG9Qb3N0Q29ubmVjdGlvbj47XG4gIC8qKiBBbiBhbHBoYW51bWVyaWMgaWRlbnRpZmllciBmb3IgdGhlIG9iamVjdCB1bmlxdWUgdG8gaXRzIHR5cGUuICovXG4gIHNsdWc/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKipcbiAgICogVGhlIGlkIGZpZWxkIG1hdGNoZXMgdGhlIFdQX1Bvc3QtJmd0O0lEIGZpZWxkLlxuICAgKiBAZGVwcmVjYXRlZCBEZXByZWNhdGVkIGluIGZhdm9yIG9mIGRhdGFiYXNlSWRcbiAgICovXG4gIHRhZ0lkPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgVGFnIHR5cGUgYW5kIHRoZSBUYXhvbm9teSB0eXBlICovXG4gIHRheG9ub215PzogTWF5YmU8VGFnVG9UYXhvbm9teUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBuYW1lIG9mIHRoZSB0YXhvbm9teSB0aGF0IHRoZSBvYmplY3QgaXMgYXNzb2NpYXRlZCB3aXRoICovXG4gIHRheG9ub215TmFtZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgSUQgb2YgdGhlIHRlcm0gZ3JvdXAgdGhhdCB0aGlzIHRlcm0gb2JqZWN0IGJlbG9uZ3MgdG8gKi9cbiAgdGVybUdyb3VwSWQ/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIHRheG9ub215IElEIHRoYXQgdGhlIG9iamVjdCBpcyBhc3NvY2lhdGVkIHdpdGggKi9cbiAgdGVybVRheG9ub215SWQ/OiBNYXliZTxTY2FsYXJzWydJbnQnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIHVuaXF1ZSByZXNvdXJjZSBpZGVudGlmaWVyIHBhdGggKi9cbiAgdXJpPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cblxuLyoqIFRoZSB0YWcgdHlwZSAqL1xuZXhwb3J0IHR5cGUgVGFnQ29udGVudE5vZGVzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPFRhZ1RvQ29udGVudE5vZGVDb25uZWN0aW9uV2hlcmVBcmdzPjtcbn07XG5cblxuLyoqIFRoZSB0YWcgdHlwZSAqL1xuZXhwb3J0IHR5cGUgVGFnRW5xdWV1ZWRTY3JpcHRzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbn07XG5cblxuLyoqIFRoZSB0YWcgdHlwZSAqL1xuZXhwb3J0IHR5cGUgVGFnRW5xdWV1ZWRTdHlsZXNoZWV0c0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG59O1xuXG5cbi8qKiBUaGUgdGFnIHR5cGUgKi9cbmV4cG9ydCB0eXBlIFRhZ1Bvc3RzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPFRhZ1RvUG9zdENvbm5lY3Rpb25XaGVyZUFyZ3M+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gdG8gdGFnIE5vZGVzICovXG5leHBvcnQgdHlwZSBUYWdDb25uZWN0aW9uID0ge1xuICAvKiogQSBsaXN0IG9mIGVkZ2VzIChyZWxhdGlvbmFsIGNvbnRleHQpIGJldHdlZW4gUm9vdFF1ZXJ5IGFuZCBjb25uZWN0ZWQgdGFnIE5vZGVzICovXG4gIGVkZ2VzOiBBcnJheTxUYWdDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBBIGxpc3Qgb2YgY29ubmVjdGVkIHRhZyBOb2RlcyAqL1xuICBub2RlczogQXJyYXk8VGFnPjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogVGFnQ29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEVkZ2UgYmV0d2VlbiBhIE5vZGUgYW5kIGEgY29ubmVjdGVkIHRhZyAqL1xuZXhwb3J0IHR5cGUgVGFnQ29ubmVjdGlvbkVkZ2UgPSB7XG4gIC8qKiBPcGFxdWUgcmVmZXJlbmNlIHRvIHRoZSBub2RlcyBwb3NpdGlvbiBpbiB0aGUgY29ubmVjdGlvbi4gVmFsdWUgY2FuIGJlIHVzZWQgd2l0aCBwYWdpbmF0aW9uIGFyZ3MuICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgY29ubmVjdGVkIHRhZyBOb2RlICovXG4gIG5vZGU6IFRhZztcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlIGNvbm5lY3RlZCBUYWdDb25uZWN0aW9uRWRnZSAqL1xuZXhwb3J0IHR5cGUgVGFnQ29ubmVjdGlvblBhZ2VJbmZvID0ge1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIFRoZSBUeXBlIG9mIElkZW50aWZpZXIgdXNlZCB0byBmZXRjaCBhIHNpbmdsZSByZXNvdXJjZS4gRGVmYXVsdCBpcyBJRC4gKi9cbmV4cG9ydCBlbnVtIFRhZ0lkVHlwZSB7XG4gIC8qKiBUaGUgRGF0YWJhc2UgSUQgZm9yIHRoZSBub2RlICovXG4gIERhdGFiYXNlSWQgPSAnREFUQUJBU0VfSUQnLFxuICAvKiogVGhlIGhhc2hlZCBHbG9iYWwgSUQgKi9cbiAgSWQgPSAnSUQnLFxuICAvKiogVGhlIG5hbWUgb2YgdGhlIG5vZGUgKi9cbiAgTmFtZSA9ICdOQU1FJyxcbiAgLyoqIFVybCBmcmllbmRseSBuYW1lIG9mIHRoZSBub2RlICovXG4gIFNsdWcgPSAnU0xVRycsXG4gIC8qKiBUaGUgVVJJIGZvciB0aGUgbm9kZSAqL1xuICBVcmkgPSAnVVJJJ1xufVxuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBUYWcgdHlwZSBhbmQgdGhlIENvbnRlbnROb2RlIHR5cGUgKi9cbmV4cG9ydCB0eXBlIFRhZ1RvQ29udGVudE5vZGVDb25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIENvbnRlbnROb2RlQ29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdUYWdUb0NvbnRlbnROb2RlQ29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIFRhZ1RvQ29udGVudE5vZGVDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbiAgZWRnZXM6IEFycmF5PFRhZ1RvQ29udGVudE5vZGVDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxDb250ZW50Tm9kZT47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFRhZ1RvQ29udGVudE5vZGVDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFRhZ1RvQ29udGVudE5vZGVDb25uZWN0aW9uRWRnZSA9IENvbnRlbnROb2RlQ29ubmVjdGlvbkVkZ2UgJiBFZGdlICYge1xuICBfX3R5cGVuYW1lPzogJ1RhZ1RvQ29udGVudE5vZGVDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogQ29udGVudE5vZGU7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtUYWdUb0NvbnRlbnROb2RlQ29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgVGFnVG9Db250ZW50Tm9kZUNvbm5lY3Rpb25QYWdlSW5mbyA9IENvbnRlbnROb2RlQ29ubmVjdGlvblBhZ2VJbmZvICYgUGFnZUluZm8gJiBXcFBhZ2VJbmZvICYge1xuICBfX3R5cGVuYW1lPzogJ1RhZ1RvQ29udGVudE5vZGVDb25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIEFyZ3VtZW50cyBmb3IgZmlsdGVyaW5nIHRoZSBUYWdUb0NvbnRlbnROb2RlQ29ubmVjdGlvbiBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBUYWdUb0NvbnRlbnROb2RlQ29ubmVjdGlvbldoZXJlQXJncyA9IHtcbiAgLyoqIFRoZSBUeXBlcyBvZiBjb250ZW50IHRvIGZpbHRlciAqL1xuICBjb250ZW50VHlwZXM/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8Q29udGVudFR5cGVzT2ZUYWdFbnVtPj4+O1xuICAvKiogRmlsdGVyIHRoZSBjb25uZWN0aW9uIGJhc2VkIG9uIGRhdGVzICovXG4gIGRhdGVRdWVyeT86IElucHV0TWF5YmU8RGF0ZVF1ZXJ5SW5wdXQ+O1xuICAvKiogVHJ1ZSBmb3Igb2JqZWN0cyB3aXRoIHBhc3N3b3JkczsgRmFsc2UgZm9yIG9iamVjdHMgd2l0aG91dCBwYXNzd29yZHM7IG51bGwgZm9yIGFsbCBvYmplY3RzIHdpdGggb3Igd2l0aG91dCBwYXNzd29yZHMgKi9cbiAgaGFzUGFzc3dvcmQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBTcGVjaWZpYyBkYXRhYmFzZSBJRCBvZiB0aGUgb2JqZWN0ICovXG4gIGlkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBJRHMgZm9yIHRoZSBvYmplY3RzIHRvIHJldHJpZXZlICovXG4gIGluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBHZXQgb2JqZWN0cyB3aXRoIGEgc3BlY2lmaWMgbWltZVR5cGUgcHJvcGVydHkgKi9cbiAgbWltZVR5cGU/OiBJbnB1dE1heWJlPE1pbWVUeXBlRW51bT47XG4gIC8qKiBTbHVnIC8gcG9zdF9uYW1lIG9mIHRoZSBvYmplY3QgKi9cbiAgbmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmeSBvYmplY3RzIHRvIHJldHJpZXZlLiBVc2Ugc2x1Z3MgKi9cbiAgbmFtZUluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogU3BlY2lmeSBJRHMgTk9UIHRvIHJldHJpZXZlLiBJZiB0aGlzIGlzIHVzZWQgaW4gdGhlIHNhbWUgcXVlcnkgYXMgXCJpblwiLCBpdCB3aWxsIGJlIGlnbm9yZWQgKi9cbiAgbm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFdoYXQgcGFyYW1ldGVyIHRvIHVzZSB0byBvcmRlciB0aGUgb2JqZWN0cyBieS4gKi9cbiAgb3JkZXJieT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxQb3N0T2JqZWN0c0Nvbm5lY3Rpb25PcmRlcmJ5SW5wdXQ+Pj47XG4gIC8qKiBVc2UgSUQgdG8gcmV0dXJuIG9ubHkgY2hpbGRyZW4uIFVzZSAwIHRvIHJldHVybiBvbmx5IHRvcC1sZXZlbCBpdGVtcyAqL1xuICBwYXJlbnQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmeSBvYmplY3RzIHdob3NlIHBhcmVudCBpcyBpbiBhbiBhcnJheSAqL1xuICBwYXJlbnRJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogU3BlY2lmeSBwb3N0cyB3aG9zZSBwYXJlbnQgaXMgbm90IGluIGFuIGFycmF5ICovXG4gIHBhcmVudE5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTaG93IHBvc3RzIHdpdGggYSBzcGVjaWZpYyBwYXNzd29yZC4gKi9cbiAgcGFzc3dvcmQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFNob3cgUG9zdHMgYmFzZWQgb24gYSBrZXl3b3JkIHNlYXJjaCAqL1xuICBzZWFyY2g/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFJldHJpZXZlIHBvc3RzIHdoZXJlIHBvc3Qgc3RhdHVzIGlzIGluIGFuIGFycmF5LiAqL1xuICBzdGF0aT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxQb3N0U3RhdHVzRW51bT4+PjtcbiAgLyoqIFNob3cgcG9zdHMgd2l0aCBhIHNwZWNpZmljIHN0YXR1cy4gKi9cbiAgc3RhdHVzPzogSW5wdXRNYXliZTxQb3N0U3RhdHVzRW51bT47XG4gIC8qKiBUaXRsZSBvZiB0aGUgb2JqZWN0ICovXG4gIHRpdGxlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBUYWcgdHlwZSBhbmQgdGhlIHBvc3QgdHlwZSAqL1xuZXhwb3J0IHR5cGUgVGFnVG9Qb3N0Q29ubmVjdGlvbiA9IENvbm5lY3Rpb24gJiBQb3N0Q29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdUYWdUb1Bvc3RDb25uZWN0aW9uJztcbiAgLyoqIEVkZ2VzIGZvciB0aGUgVGFnVG9Qb3N0Q29ubmVjdGlvbiBjb25uZWN0aW9uICovXG4gIGVkZ2VzOiBBcnJheTxUYWdUb1Bvc3RDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxQb3N0PjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogVGFnVG9Qb3N0Q29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEFuIGVkZ2UgaW4gYSBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBUYWdUb1Bvc3RDb25uZWN0aW9uRWRnZSA9IEVkZ2UgJiBQb3N0Q29ubmVjdGlvbkVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnVGFnVG9Qb3N0Q29ubmVjdGlvbkVkZ2UnO1xuICAvKiogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaXRlbSBhdCB0aGUgZW5kIG9mIHRoZSBlZGdlICovXG4gIG5vZGU6IFBvc3Q7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtUYWdUb1Bvc3RDb25uZWN0aW9uJnF1b3Q7ICovXG5leHBvcnQgdHlwZSBUYWdUb1Bvc3RDb25uZWN0aW9uUGFnZUluZm8gPSBQYWdlSW5mbyAmIFBvc3RDb25uZWN0aW9uUGFnZUluZm8gJiBXcFBhZ2VJbmZvICYge1xuICBfX3R5cGVuYW1lPzogJ1RhZ1RvUG9zdENvbm5lY3Rpb25QYWdlSW5mbyc7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogQXJndW1lbnRzIGZvciBmaWx0ZXJpbmcgdGhlIFRhZ1RvUG9zdENvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgVGFnVG9Qb3N0Q29ubmVjdGlvbldoZXJlQXJncyA9IHtcbiAgLyoqIFRoZSB1c2VyIHRoYXQncyBjb25uZWN0ZWQgYXMgdGhlIGF1dGhvciBvZiB0aGUgb2JqZWN0LiBVc2UgdGhlIHVzZXJJZCBmb3IgdGhlIGF1dGhvciBvYmplY3QuICovXG4gIGF1dGhvcj86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogRmluZCBvYmplY3RzIGNvbm5lY3RlZCB0byBhdXRob3IocykgaW4gdGhlIGFycmF5IG9mIGF1dGhvcidzIHVzZXJJZHMgKi9cbiAgYXV0aG9ySW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEZpbmQgb2JqZWN0cyBjb25uZWN0ZWQgdG8gdGhlIGF1dGhvciBieSB0aGUgYXV0aG9yJ3MgbmljZW5hbWUgKi9cbiAgYXV0aG9yTmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogRmluZCBvYmplY3RzIE5PVCBjb25uZWN0ZWQgdG8gYXV0aG9yKHMpIGluIHRoZSBhcnJheSBvZiBhdXRob3IncyB1c2VySWRzICovXG4gIGF1dGhvck5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBDYXRlZ29yeSBJRCAqL1xuICBjYXRlZ29yeUlkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBjYXRlZ29yeSBJRHMsIHVzZWQgdG8gZGlzcGxheSBvYmplY3RzIGZyb20gb25lIGNhdGVnb3J5IE9SIGFub3RoZXIgKi9cbiAgY2F0ZWdvcnlJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogVXNlIENhdGVnb3J5IFNsdWcgKi9cbiAgY2F0ZWdvcnlOYW1lPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBjYXRlZ29yeSBJRHMsIHVzZWQgdG8gZGlzcGxheSBvYmplY3RzIGZyb20gb25lIGNhdGVnb3J5IE9SIGFub3RoZXIgKi9cbiAgY2F0ZWdvcnlOb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogRmlsdGVyIHRoZSBjb25uZWN0aW9uIGJhc2VkIG9uIGRhdGVzICovXG4gIGRhdGVRdWVyeT86IElucHV0TWF5YmU8RGF0ZVF1ZXJ5SW5wdXQ+O1xuICAvKiogVHJ1ZSBmb3Igb2JqZWN0cyB3aXRoIHBhc3N3b3JkczsgRmFsc2UgZm9yIG9iamVjdHMgd2l0aG91dCBwYXNzd29yZHM7IG51bGwgZm9yIGFsbCBvYmplY3RzIHdpdGggb3Igd2l0aG91dCBwYXNzd29yZHMgKi9cbiAgaGFzUGFzc3dvcmQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBTcGVjaWZpYyBkYXRhYmFzZSBJRCBvZiB0aGUgb2JqZWN0ICovXG4gIGlkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBJRHMgZm9yIHRoZSBvYmplY3RzIHRvIHJldHJpZXZlICovXG4gIGluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBHZXQgb2JqZWN0cyB3aXRoIGEgc3BlY2lmaWMgbWltZVR5cGUgcHJvcGVydHkgKi9cbiAgbWltZVR5cGU/OiBJbnB1dE1heWJlPE1pbWVUeXBlRW51bT47XG4gIC8qKiBTbHVnIC8gcG9zdF9uYW1lIG9mIHRoZSBvYmplY3QgKi9cbiAgbmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmeSBvYmplY3RzIHRvIHJldHJpZXZlLiBVc2Ugc2x1Z3MgKi9cbiAgbmFtZUluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogU3BlY2lmeSBJRHMgTk9UIHRvIHJldHJpZXZlLiBJZiB0aGlzIGlzIHVzZWQgaW4gdGhlIHNhbWUgcXVlcnkgYXMgXCJpblwiLCBpdCB3aWxsIGJlIGlnbm9yZWQgKi9cbiAgbm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFdoYXQgcGFyYW1ldGVyIHRvIHVzZSB0byBvcmRlciB0aGUgb2JqZWN0cyBieS4gKi9cbiAgb3JkZXJieT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxQb3N0T2JqZWN0c0Nvbm5lY3Rpb25PcmRlcmJ5SW5wdXQ+Pj47XG4gIC8qKiBVc2UgSUQgdG8gcmV0dXJuIG9ubHkgY2hpbGRyZW4uIFVzZSAwIHRvIHJldHVybiBvbmx5IHRvcC1sZXZlbCBpdGVtcyAqL1xuICBwYXJlbnQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmeSBvYmplY3RzIHdob3NlIHBhcmVudCBpcyBpbiBhbiBhcnJheSAqL1xuICBwYXJlbnRJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogU3BlY2lmeSBwb3N0cyB3aG9zZSBwYXJlbnQgaXMgbm90IGluIGFuIGFycmF5ICovXG4gIHBhcmVudE5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTaG93IHBvc3RzIHdpdGggYSBzcGVjaWZpYyBwYXNzd29yZC4gKi9cbiAgcGFzc3dvcmQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFNob3cgUG9zdHMgYmFzZWQgb24gYSBrZXl3b3JkIHNlYXJjaCAqL1xuICBzZWFyY2g/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFJldHJpZXZlIHBvc3RzIHdoZXJlIHBvc3Qgc3RhdHVzIGlzIGluIGFuIGFycmF5LiAqL1xuICBzdGF0aT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxQb3N0U3RhdHVzRW51bT4+PjtcbiAgLyoqIFNob3cgcG9zdHMgd2l0aCBhIHNwZWNpZmljIHN0YXR1cy4gKi9cbiAgc3RhdHVzPzogSW5wdXRNYXliZTxQb3N0U3RhdHVzRW51bT47XG4gIC8qKiBUYWcgU2x1ZyAqL1xuICB0YWc/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFVzZSBUYWcgSUQgKi9cbiAgdGFnSWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEFycmF5IG9mIHRhZyBJRHMsIHVzZWQgdG8gZGlzcGxheSBvYmplY3RzIGZyb20gb25lIHRhZyBPUiBhbm90aGVyICovXG4gIHRhZ0luPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiB0YWcgSURzLCB1c2VkIHRvIGRpc3BsYXkgb2JqZWN0cyBmcm9tIG9uZSB0YWcgT1IgYW5vdGhlciAqL1xuICB0YWdOb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgdGFnIHNsdWdzLCB1c2VkIHRvIGRpc3BsYXkgb2JqZWN0cyBmcm9tIG9uZSB0YWcgQU5EIGFub3RoZXIgKi9cbiAgdGFnU2x1Z0FuZD86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIHRhZyBzbHVncywgdXNlZCB0byBpbmNsdWRlIG9iamVjdHMgaW4gQU5ZIHNwZWNpZmllZCB0YWdzICovXG4gIHRhZ1NsdWdJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFRpdGxlIG9mIHRoZSBvYmplY3QgKi9cbiAgdGl0bGU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFRhZyB0eXBlIGFuZCB0aGUgVGF4b25vbXkgdHlwZSAqL1xuZXhwb3J0IHR5cGUgVGFnVG9UYXhvbm9teUNvbm5lY3Rpb25FZGdlID0gRWRnZSAmIE9uZVRvT25lQ29ubmVjdGlvbiAmIFRheG9ub215Q29ubmVjdGlvbkVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnVGFnVG9UYXhvbm9teUNvbm5lY3Rpb25FZGdlJztcbiAgLyoqIE9wYXF1ZSByZWZlcmVuY2UgdG8gdGhlIG5vZGVzIHBvc2l0aW9uIGluIHRoZSBjb25uZWN0aW9uLiBWYWx1ZSBjYW4gYmUgdXNlZCB3aXRoIHBhZ2luYXRpb24gYXJncy4gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBub2RlIG9mIHRoZSBjb25uZWN0aW9uLCB3aXRob3V0IHRoZSBlZGdlcyAqL1xuICBub2RlOiBUYXhvbm9teTtcbn07XG5cbi8qKiBBIHRheG9ub215IG9iamVjdCAqL1xuZXhwb3J0IHR5cGUgVGF4b25vbXkgPSBOb2RlICYge1xuICBfX3R5cGVuYW1lPzogJ1RheG9ub215JztcbiAgLyoqIExpc3Qgb2YgQ29udGVudCBUeXBlcyBhc3NvY2lhdGVkIHdpdGggdGhlIFRheG9ub215ICovXG4gIGNvbm5lY3RlZENvbnRlbnRUeXBlcz86IE1heWJlPFRheG9ub215VG9Db250ZW50VHlwZUNvbm5lY3Rpb24+O1xuICAvKiogTGlzdCBvZiBUZXJtIE5vZGVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgVGF4b25vbXkgKi9cbiAgY29ubmVjdGVkVGVybXM/OiBNYXliZTxUYXhvbm9teVRvVGVybU5vZGVDb25uZWN0aW9uPjtcbiAgLyoqIERlc2NyaXB0aW9uIG9mIHRoZSB0YXhvbm9teS4gVGhpcyBmaWVsZCBpcyBlcXVpdmFsZW50IHRvIFdQX1RheG9ub215LSZndDtkZXNjcmlwdGlvbiAqL1xuICBkZXNjcmlwdGlvbj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgcGx1cmFsIG5hbWUgb2YgdGhlIHBvc3QgdHlwZSB3aXRoaW4gdGhlIEdyYXBoUUwgU2NoZW1hLiAqL1xuICBncmFwaHFsUGx1cmFsTmFtZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgc2luZ3VsYXIgbmFtZSBvZiB0aGUgcG9zdCB0eXBlIHdpdGhpbiB0aGUgR3JhcGhRTCBTY2hlbWEuICovXG4gIGdyYXBocWxTaW5nbGVOYW1lPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdGhlIHRheG9ub215IGlzIGhpZXJhcmNoaWNhbCAqL1xuICBoaWVyYXJjaGljYWw/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgdGF4b25vbXkgb2JqZWN0LiAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnb3V0cHV0J107XG4gIC8qKiBXaGV0aGVyIHRoZSBvYmplY3QgaXMgcmVzdHJpY3RlZCBmcm9tIHRoZSBjdXJyZW50IHZpZXdlciAqL1xuICBpc1Jlc3RyaWN0ZWQ/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIE5hbWUgb2YgdGhlIHRheG9ub215IHNob3duIGluIHRoZSBtZW51LiBVc3VhbGx5IHBsdXJhbC4gKi9cbiAgbGFiZWw/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGRpc3BsYXkgbmFtZSBvZiB0aGUgdGF4b25vbXkuIFRoaXMgZmllbGQgaXMgZXF1aXZhbGVudCB0byBXUF9UYXhvbm9teS0mZ3Q7bGFiZWwgKi9cbiAgbmFtZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGV0aGVyIHRoZSB0YXhvbm9teSBpcyBwdWJsaWNseSBxdWVyeWFibGUgKi9cbiAgcHVibGljPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBOYW1lIG9mIGNvbnRlbnQgdHlwZSB0byBkaXNwbGF5IGluIFJFU1QgQVBJICZxdW90O3dwL3YyJnF1b3Q7IG5hbWVzcGFjZS4gKi9cbiAgcmVzdEJhc2U/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIFJFU1QgQ29udHJvbGxlciBjbGFzcyBhc3NpZ25lZCB0byBoYW5kbGluZyB0aGlzIGNvbnRlbnQgdHlwZS4gKi9cbiAgcmVzdENvbnRyb2xsZXJDbGFzcz86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGV0aGVyIHRvIHNob3cgdGhlIHRheG9ub215IGFzIHBhcnQgb2YgYSB0YWcgY2xvdWQgd2lkZ2V0LiBUaGlzIGZpZWxkIGlzIGVxdWl2YWxlbnQgdG8gV1BfVGF4b25vbXktJmd0O3Nob3dfdGFnY2xvdWQgKi9cbiAgc2hvd0Nsb3VkPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBXaGV0aGVyIHRvIGRpc3BsYXkgYSBjb2x1bW4gZm9yIHRoZSB0YXhvbm9teSBvbiBpdHMgcG9zdCB0eXBlIGxpc3Rpbmcgc2NyZWVucy4gKi9cbiAgc2hvd0luQWRtaW5Db2x1bW4/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdG8gYWRkIHRoZSBwb3N0IHR5cGUgdG8gdGhlIEdyYXBoUUwgU2NoZW1hLiAqL1xuICBzaG93SW5HcmFwaHFsPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBXaGV0aGVyIHRvIHNob3cgdGhlIHRheG9ub215IGluIHRoZSBhZG1pbiBtZW51ICovXG4gIHNob3dJbk1lbnU/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZXRoZXIgdGhlIHRheG9ub215IGlzIGF2YWlsYWJsZSBmb3Igc2VsZWN0aW9uIGluIG5hdmlnYXRpb24gbWVudXMuICovXG4gIHNob3dJbk5hdk1lbnVzPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBXaGV0aGVyIHRvIHNob3cgdGhlIHRheG9ub215IGluIHRoZSBxdWljay9idWxrIGVkaXQgcGFuZWwuICovXG4gIHNob3dJblF1aWNrRWRpdD86IE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J10+O1xuICAvKiogV2hldGhlciB0byBhZGQgdGhlIHBvc3QgdHlwZSByb3V0ZSBpbiB0aGUgUkVTVCBBUEkgJnF1b3Q7d3AvdjImcXVvdDsgbmFtZXNwYWNlLiAqL1xuICBzaG93SW5SZXN0PzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBXaGV0aGVyIHRvIGdlbmVyYXRlIGFuZCBhbGxvdyBhIFVJIGZvciBtYW5hZ2luZyB0ZXJtcyBpbiB0aGlzIHRheG9ub215IGluIHRoZSBhZG1pbiAqL1xuICBzaG93VWk/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbn07XG5cblxuLyoqIEEgdGF4b25vbXkgb2JqZWN0ICovXG5leHBvcnQgdHlwZSBUYXhvbm9teUNvbm5lY3RlZENvbnRlbnRUeXBlc0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG59O1xuXG5cbi8qKiBBIHRheG9ub215IG9iamVjdCAqL1xuZXhwb3J0IHR5cGUgVGF4b25vbXlDb25uZWN0ZWRUZXJtc0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG59O1xuXG4vKiogQ29ubmVjdGlvbiB0byBUYXhvbm9teSBOb2RlcyAqL1xuZXhwb3J0IHR5cGUgVGF4b25vbXlDb25uZWN0aW9uID0ge1xuICAvKiogQSBsaXN0IG9mIGVkZ2VzIChyZWxhdGlvbmFsIGNvbnRleHQpIGJldHdlZW4gUm9vdFF1ZXJ5IGFuZCBjb25uZWN0ZWQgVGF4b25vbXkgTm9kZXMgKi9cbiAgZWRnZXM6IEFycmF5PFRheG9ub215Q29ubmVjdGlvbkVkZ2U+O1xuICAvKiogQSBsaXN0IG9mIGNvbm5lY3RlZCBUYXhvbm9teSBOb2RlcyAqL1xuICBub2RlczogQXJyYXk8VGF4b25vbXk+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBUYXhvbm9teUNvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBFZGdlIGJldHdlZW4gYSBOb2RlIGFuZCBhIGNvbm5lY3RlZCBUYXhvbm9teSAqL1xuZXhwb3J0IHR5cGUgVGF4b25vbXlDb25uZWN0aW9uRWRnZSA9IHtcbiAgLyoqIE9wYXF1ZSByZWZlcmVuY2UgdG8gdGhlIG5vZGVzIHBvc2l0aW9uIGluIHRoZSBjb25uZWN0aW9uLiBWYWx1ZSBjYW4gYmUgdXNlZCB3aXRoIHBhZ2luYXRpb24gYXJncy4gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBjb25uZWN0ZWQgVGF4b25vbXkgTm9kZSAqL1xuICBub2RlOiBUYXhvbm9teTtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlIGNvbm5lY3RlZCBUYXhvbm9teUNvbm5lY3Rpb25FZGdlICovXG5leHBvcnQgdHlwZSBUYXhvbm9teUNvbm5lY3Rpb25QYWdlSW5mbyA9IHtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBBbGxvd2VkIHRheG9ub21pZXMgKi9cbmV4cG9ydCBlbnVtIFRheG9ub215RW51bSB7XG4gIC8qKiBUYXhvbm9teSBlbnVtIGNhdGVnb3J5ICovXG4gIENhdGVnb3J5ID0gJ0NBVEVHT1JZJyxcbiAgLyoqIFRheG9ub215IGVudW0gcG9zdF9mb3JtYXQgKi9cbiAgUG9zdGZvcm1hdCA9ICdQT1NURk9STUFUJyxcbiAgLyoqIFRheG9ub215IGVudW0gcG9zdF90YWcgKi9cbiAgVGFnID0gJ1RBRydcbn1cblxuLyoqIFRoZSBUeXBlIG9mIElkZW50aWZpZXIgdXNlZCB0byBmZXRjaCBhIHNpbmdsZSBUYXhvbm9teSBub2RlLiBUbyBiZSB1c2VkIGFsb25nIHdpdGggdGhlIFwiaWRcIiBmaWVsZC4gRGVmYXVsdCBpcyBcIklEXCIuICovXG5leHBvcnQgZW51bSBUYXhvbm9teUlkVHlwZUVudW0ge1xuICAvKiogVGhlIGdsb2JhbGx5IHVuaXF1ZSBJRCAqL1xuICBJZCA9ICdJRCcsXG4gIC8qKiBUaGUgbmFtZSBvZiB0aGUgdGF4b25vbXkgKi9cbiAgTmFtZSA9ICdOQU1FJ1xufVxuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBUYXhvbm9teSB0eXBlIGFuZCB0aGUgQ29udGVudFR5cGUgdHlwZSAqL1xuZXhwb3J0IHR5cGUgVGF4b25vbXlUb0NvbnRlbnRUeXBlQ29ubmVjdGlvbiA9IENvbm5lY3Rpb24gJiBDb250ZW50VHlwZUNvbm5lY3Rpb24gJiB7XG4gIF9fdHlwZW5hbWU/OiAnVGF4b25vbXlUb0NvbnRlbnRUeXBlQ29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIFRheG9ub215VG9Db250ZW50VHlwZUNvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8VGF4b25vbXlUb0NvbnRlbnRUeXBlQ29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIG5vZGVzIG9mIHRoZSBjb25uZWN0aW9uLCB3aXRob3V0IHRoZSBlZGdlcyAqL1xuICBub2RlczogQXJyYXk8Q29udGVudFR5cGU+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBUYXhvbm9teVRvQ29udGVudFR5cGVDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFRheG9ub215VG9Db250ZW50VHlwZUNvbm5lY3Rpb25FZGdlID0gQ29udGVudFR5cGVDb25uZWN0aW9uRWRnZSAmIEVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnVGF4b25vbXlUb0NvbnRlbnRUeXBlQ29ubmVjdGlvbkVkZ2UnO1xuICAvKiogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaXRlbSBhdCB0aGUgZW5kIG9mIHRoZSBlZGdlICovXG4gIG5vZGU6IENvbnRlbnRUeXBlO1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgJnF1b3Q7VGF4b25vbXlUb0NvbnRlbnRUeXBlQ29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgVGF4b25vbXlUb0NvbnRlbnRUeXBlQ29ubmVjdGlvblBhZ2VJbmZvID0gQ29udGVudFR5cGVDb25uZWN0aW9uUGFnZUluZm8gJiBQYWdlSW5mbyAmIFdwUGFnZUluZm8gJiB7XG4gIF9fdHlwZW5hbWU/OiAnVGF4b25vbXlUb0NvbnRlbnRUeXBlQ29ubmVjdGlvblBhZ2VJbmZvJztcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFRheG9ub215IHR5cGUgYW5kIHRoZSBUZXJtTm9kZSB0eXBlICovXG5leHBvcnQgdHlwZSBUYXhvbm9teVRvVGVybU5vZGVDb25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIFRlcm1Ob2RlQ29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdUYXhvbm9teVRvVGVybU5vZGVDb25uZWN0aW9uJztcbiAgLyoqIEVkZ2VzIGZvciB0aGUgVGF4b25vbXlUb1Rlcm1Ob2RlQ29ubmVjdGlvbiBjb25uZWN0aW9uICovXG4gIGVkZ2VzOiBBcnJheTxUYXhvbm9teVRvVGVybU5vZGVDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxUZXJtTm9kZT47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFRheG9ub215VG9UZXJtTm9kZUNvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBBbiBlZGdlIGluIGEgY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgVGF4b25vbXlUb1Rlcm1Ob2RlQ29ubmVjdGlvbkVkZ2UgPSBFZGdlICYgVGVybU5vZGVDb25uZWN0aW9uRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdUYXhvbm9teVRvVGVybU5vZGVDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogVGVybU5vZGU7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtUYXhvbm9teVRvVGVybU5vZGVDb25uZWN0aW9uJnF1b3Q7ICovXG5leHBvcnQgdHlwZSBUYXhvbm9teVRvVGVybU5vZGVDb25uZWN0aW9uUGFnZUluZm8gPSBQYWdlSW5mbyAmIFRlcm1Ob2RlQ29ubmVjdGlvblBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdUYXhvbm9teVRvVGVybU5vZGVDb25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIFRoZSB0ZW1wbGF0ZSBhc3NpZ25lZCB0byB0aGUgbm9kZSAqL1xuZXhwb3J0IHR5cGUgVGVtcGxhdGVfQ29udGFjdFBhZ2UgPSBDb250ZW50VGVtcGxhdGUgJiB7XG4gIF9fdHlwZW5hbWU/OiAnVGVtcGxhdGVfQ29udGFjdFBhZ2UnO1xuICAvKiogVGhlIG5hbWUgb2YgdGhlIHRlbXBsYXRlICovXG4gIHRlbXBsYXRlTmFtZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogVGhlIHRlbXBsYXRlIGFzc2lnbmVkIHRvIHRoZSBub2RlICovXG5leHBvcnQgdHlwZSBUZW1wbGF0ZV9HYWxsZXJ5UGFnZSA9IENvbnRlbnRUZW1wbGF0ZSAmIHtcbiAgX190eXBlbmFtZT86ICdUZW1wbGF0ZV9HYWxsZXJ5UGFnZSc7XG4gIC8qKiBUaGUgbmFtZSBvZiB0aGUgdGVtcGxhdGUgKi9cbiAgdGVtcGxhdGVOYW1lPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBUZXJtcyBhcmUgbm9kZXMgd2l0aGluIGEgVGF4b25vbXksIHVzZWQgdG8gZ3JvdXAgYW5kIHJlbGF0ZSBvdGhlciBub2Rlcy4gKi9cbmV4cG9ydCB0eXBlIFRlcm1Ob2RlID0ge1xuICAvKiogVGhlIG51bWJlciBvZiBvYmplY3RzIGNvbm5lY3RlZCB0byB0aGUgb2JqZWN0ICovXG4gIGNvdW50PzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIElkZW50aWZpZXMgdGhlIHByaW1hcnkga2V5IGZyb20gdGhlIGRhdGFiYXNlLiAqL1xuICBkYXRhYmFzZUlkOiBTY2FsYXJzWydJbnQnXVsnb3V0cHV0J107XG4gIC8qKiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIG9iamVjdCAqL1xuICBkZXNjcmlwdGlvbj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFRlcm1Ob2RlIHR5cGUgYW5kIHRoZSBFbnF1ZXVlZFNjcmlwdCB0eXBlICovXG4gIGVucXVldWVkU2NyaXB0cz86IE1heWJlPFRlcm1Ob2RlVG9FbnF1ZXVlZFNjcmlwdENvbm5lY3Rpb24+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBUZXJtTm9kZSB0eXBlIGFuZCB0aGUgRW5xdWV1ZWRTdHlsZXNoZWV0IHR5cGUgKi9cbiAgZW5xdWV1ZWRTdHlsZXNoZWV0cz86IE1heWJlPFRlcm1Ob2RlVG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uPjtcbiAgLyoqIFRoZSB1bmlxdWUgcmVzb3VyY2UgaWRlbnRpZmllciBwYXRoICovXG4gIGlkOiBTY2FsYXJzWydJRCddWydvdXRwdXQnXTtcbiAgLyoqIFdoZXRoZXIgdGhlIG5vZGUgaXMgYSBDb250ZW50IE5vZGUgKi9cbiAgaXNDb250ZW50Tm9kZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZXRoZXIgdGhlIG9iamVjdCBpcyByZXN0cmljdGVkIGZyb20gdGhlIGN1cnJlbnQgdmlld2VyICovXG4gIGlzUmVzdHJpY3RlZD86IE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J10+O1xuICAvKiogV2hldGhlciB0aGUgbm9kZSBpcyBhIFRlcm0gKi9cbiAgaXNUZXJtTm9kZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFRoZSBsaW5rIHRvIHRoZSB0ZXJtICovXG4gIGxpbms/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGh1bWFuIGZyaWVuZGx5IG5hbWUgb2YgdGhlIG9iamVjdC4gKi9cbiAgbmFtZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBBbiBhbHBoYW51bWVyaWMgaWRlbnRpZmllciBmb3IgdGhlIG9iamVjdCB1bmlxdWUgdG8gaXRzIHR5cGUuICovXG4gIHNsdWc/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIG5hbWUgb2YgdGhlIHRheG9ub215IHRoYXQgdGhlIG9iamVjdCBpcyBhc3NvY2lhdGVkIHdpdGggKi9cbiAgdGF4b25vbXlOYW1lPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBJRCBvZiB0aGUgdGVybSBncm91cCB0aGF0IHRoaXMgdGVybSBvYmplY3QgYmVsb25ncyB0byAqL1xuICB0ZXJtR3JvdXBJZD86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgdGF4b25vbXkgSUQgdGhhdCB0aGUgb2JqZWN0IGlzIGFzc29jaWF0ZWQgd2l0aCAqL1xuICB0ZXJtVGF4b25vbXlJZD86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgdW5pcXVlIHJlc291cmNlIGlkZW50aWZpZXIgcGF0aCAqL1xuICB1cmk/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuXG4vKiogVGVybXMgYXJlIG5vZGVzIHdpdGhpbiBhIFRheG9ub215LCB1c2VkIHRvIGdyb3VwIGFuZCByZWxhdGUgb3RoZXIgbm9kZXMuICovXG5leHBvcnQgdHlwZSBUZXJtTm9kZUVucXVldWVkU2NyaXB0c0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG59O1xuXG5cbi8qKiBUZXJtcyBhcmUgbm9kZXMgd2l0aGluIGEgVGF4b25vbXksIHVzZWQgdG8gZ3JvdXAgYW5kIHJlbGF0ZSBvdGhlciBub2Rlcy4gKi9cbmV4cG9ydCB0eXBlIFRlcm1Ob2RlRW5xdWV1ZWRTdHlsZXNoZWV0c0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG59O1xuXG4vKiogQ29ubmVjdGlvbiB0byBUZXJtTm9kZSBOb2RlcyAqL1xuZXhwb3J0IHR5cGUgVGVybU5vZGVDb25uZWN0aW9uID0ge1xuICAvKiogQSBsaXN0IG9mIGVkZ2VzIChyZWxhdGlvbmFsIGNvbnRleHQpIGJldHdlZW4gUm9vdFF1ZXJ5IGFuZCBjb25uZWN0ZWQgVGVybU5vZGUgTm9kZXMgKi9cbiAgZWRnZXM6IEFycmF5PFRlcm1Ob2RlQ29ubmVjdGlvbkVkZ2U+O1xuICAvKiogQSBsaXN0IG9mIGNvbm5lY3RlZCBUZXJtTm9kZSBOb2RlcyAqL1xuICBub2RlczogQXJyYXk8VGVybU5vZGU+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBUZXJtTm9kZUNvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBFZGdlIGJldHdlZW4gYSBOb2RlIGFuZCBhIGNvbm5lY3RlZCBUZXJtTm9kZSAqL1xuZXhwb3J0IHR5cGUgVGVybU5vZGVDb25uZWN0aW9uRWRnZSA9IHtcbiAgLyoqIE9wYXF1ZSByZWZlcmVuY2UgdG8gdGhlIG5vZGVzIHBvc2l0aW9uIGluIHRoZSBjb25uZWN0aW9uLiBWYWx1ZSBjYW4gYmUgdXNlZCB3aXRoIHBhZ2luYXRpb24gYXJncy4gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBjb25uZWN0ZWQgVGVybU5vZGUgTm9kZSAqL1xuICBub2RlOiBUZXJtTm9kZTtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlIGNvbm5lY3RlZCBUZXJtTm9kZUNvbm5lY3Rpb25FZGdlICovXG5leHBvcnQgdHlwZSBUZXJtTm9kZUNvbm5lY3Rpb25QYWdlSW5mbyA9IHtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBUaGUgVHlwZSBvZiBJZGVudGlmaWVyIHVzZWQgdG8gZmV0Y2ggYSBzaW5nbGUgcmVzb3VyY2UuIERlZmF1bHQgaXMgXCJJRFwiLiBUbyBiZSB1c2VkIGFsb25nIHdpdGggdGhlIFwiaWRcIiBmaWVsZC4gKi9cbmV4cG9ydCBlbnVtIFRlcm1Ob2RlSWRUeXBlRW51bSB7XG4gIC8qKiBUaGUgRGF0YWJhc2UgSUQgZm9yIHRoZSBub2RlICovXG4gIERhdGFiYXNlSWQgPSAnREFUQUJBU0VfSUQnLFxuICAvKiogVGhlIGhhc2hlZCBHbG9iYWwgSUQgKi9cbiAgSWQgPSAnSUQnLFxuICAvKiogVGhlIG5hbWUgb2YgdGhlIG5vZGUgKi9cbiAgTmFtZSA9ICdOQU1FJyxcbiAgLyoqIFVybCBmcmllbmRseSBuYW1lIG9mIHRoZSBub2RlICovXG4gIFNsdWcgPSAnU0xVRycsXG4gIC8qKiBUaGUgVVJJIGZvciB0aGUgbm9kZSAqL1xuICBVcmkgPSAnVVJJJ1xufVxuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBUZXJtTm9kZSB0eXBlIGFuZCB0aGUgRW5xdWV1ZWRTY3JpcHQgdHlwZSAqL1xuZXhwb3J0IHR5cGUgVGVybU5vZGVUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvbiA9IENvbm5lY3Rpb24gJiBFbnF1ZXVlZFNjcmlwdENvbm5lY3Rpb24gJiB7XG4gIF9fdHlwZW5hbWU/OiAnVGVybU5vZGVUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIFRlcm1Ob2RlVG9FbnF1ZXVlZFNjcmlwdENvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8VGVybU5vZGVUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIG5vZGVzIG9mIHRoZSBjb25uZWN0aW9uLCB3aXRob3V0IHRoZSBlZGdlcyAqL1xuICBub2RlczogQXJyYXk8RW5xdWV1ZWRTY3JpcHQ+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBUZXJtTm9kZVRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFRlcm1Ob2RlVG9FbnF1ZXVlZFNjcmlwdENvbm5lY3Rpb25FZGdlID0gRWRnZSAmIEVucXVldWVkU2NyaXB0Q29ubmVjdGlvbkVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnVGVybU5vZGVUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvbkVkZ2UnO1xuICAvKiogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaXRlbSBhdCB0aGUgZW5kIG9mIHRoZSBlZGdlICovXG4gIG5vZGU6IEVucXVldWVkU2NyaXB0O1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgJnF1b3Q7VGVybU5vZGVUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgVGVybU5vZGVUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvblBhZ2VJbmZvID0gRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uUGFnZUluZm8gJiBQYWdlSW5mbyAmIFdwUGFnZUluZm8gJiB7XG4gIF9fdHlwZW5hbWU/OiAnVGVybU5vZGVUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvblBhZ2VJbmZvJztcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFRlcm1Ob2RlIHR5cGUgYW5kIHRoZSBFbnF1ZXVlZFN0eWxlc2hlZXQgdHlwZSAqL1xuZXhwb3J0IHR5cGUgVGVybU5vZGVUb0VucXVldWVkU3R5bGVzaGVldENvbm5lY3Rpb24gPSBDb25uZWN0aW9uICYgRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdUZXJtTm9kZVRvRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIFRlcm1Ob2RlVG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbiAgZWRnZXM6IEFycmF5PFRlcm1Ob2RlVG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxFbnF1ZXVlZFN0eWxlc2hlZXQ+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBUZXJtTm9kZVRvRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEFuIGVkZ2UgaW4gYSBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBUZXJtTm9kZVRvRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvbkVkZ2UgPSBFZGdlICYgRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvbkVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnVGVybU5vZGVUb0VucXVldWVkU3R5bGVzaGVldENvbm5lY3Rpb25FZGdlJztcbiAgLyoqIEEgY3Vyc29yIGZvciB1c2UgaW4gcGFnaW5hdGlvbiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGl0ZW0gYXQgdGhlIGVuZCBvZiB0aGUgZWRnZSAqL1xuICBub2RlOiBFbnF1ZXVlZFN0eWxlc2hlZXQ7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtUZXJtTm9kZVRvRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgVGVybU5vZGVUb0VucXVldWVkU3R5bGVzaGVldENvbm5lY3Rpb25QYWdlSW5mbyA9IEVucXVldWVkU3R5bGVzaGVldENvbm5lY3Rpb25QYWdlSW5mbyAmIFBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdUZXJtTm9kZVRvRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvblBhZ2VJbmZvJztcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBPcHRpb25zIGZvciBvcmRlcmluZyB0aGUgY29ubmVjdGlvbiBieSAqL1xuZXhwb3J0IGVudW0gVGVybU9iamVjdHNDb25uZWN0aW9uT3JkZXJieUVudW0ge1xuICAvKiogT3JkZXIgdGhlIGNvbm5lY3Rpb24gYnkgaXRlbSBjb3VudC4gKi9cbiAgQ291bnQgPSAnQ09VTlQnLFxuICAvKiogT3JkZXIgdGhlIGNvbm5lY3Rpb24gYnkgZGVzY3JpcHRpb24uICovXG4gIERlc2NyaXB0aW9uID0gJ0RFU0NSSVBUSU9OJyxcbiAgLyoqIE9yZGVyIHRoZSBjb25uZWN0aW9uIGJ5IG5hbWUuICovXG4gIE5hbWUgPSAnTkFNRScsXG4gIC8qKiBPcmRlciB0aGUgY29ubmVjdGlvbiBieSBzbHVnLiAqL1xuICBTbHVnID0gJ1NMVUcnLFxuICAvKiogT3JkZXIgdGhlIGNvbm5lY3Rpb24gYnkgdGVybSBncm91cC4gKi9cbiAgVGVybUdyb3VwID0gJ1RFUk1fR1JPVVAnLFxuICAvKiogT3JkZXIgdGhlIGNvbm5lY3Rpb24gYnkgdGVybSBpZC4gKi9cbiAgVGVybUlkID0gJ1RFUk1fSUQnLFxuICAvKiogT3JkZXIgdGhlIGNvbm5lY3Rpb24gYnkgdGVybSBvcmRlci4gKi9cbiAgVGVybU9yZGVyID0gJ1RFUk1fT1JERVInXG59XG5cbi8qKiBBIHRoZW1lIG9iamVjdCAqL1xuZXhwb3J0IHR5cGUgVGhlbWUgPSBOb2RlICYge1xuICBfX3R5cGVuYW1lPzogJ1RoZW1lJztcbiAgLyoqIE5hbWUgb2YgdGhlIHRoZW1lIGF1dGhvcihzKSwgY291bGQgYWxzbyBiZSBhIGNvbXBhbnkgbmFtZS4gVGhpcyBmaWVsZCBpcyBlcXVpdmFsZW50IHRvIFdQX1RoZW1lLSZndDtnZXQoICZxdW90O0F1dGhvciZxdW90OyApLiAqL1xuICBhdXRob3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVVJJIGZvciB0aGUgYXV0aG9yL2NvbXBhbnkgd2Vic2l0ZS4gVGhpcyBmaWVsZCBpcyBlcXVpdmFsZW50IHRvIFdQX1RoZW1lLSZndDtnZXQoICZxdW90O0F1dGhvclVSSSZxdW90OyApLiAqL1xuICBhdXRob3JVcmk/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSB0aGVtZS4gVGhpcyBmaWVsZCBpcyBlcXVpdmFsZW50IHRvIFdQX1RoZW1lLSZndDtnZXQoICZxdW90O0Rlc2NyaXB0aW9uJnF1b3Q7ICkuICovXG4gIGRlc2NyaXB0aW9uPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgdGhlbWUgb2JqZWN0LiAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnb3V0cHV0J107XG4gIC8qKiBXaGV0aGVyIHRoZSBvYmplY3QgaXMgcmVzdHJpY3RlZCBmcm9tIHRoZSBjdXJyZW50IHZpZXdlciAqL1xuICBpc1Jlc3RyaWN0ZWQ/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIERpc3BsYXkgbmFtZSBvZiB0aGUgdGhlbWUuIFRoaXMgZmllbGQgaXMgZXF1aXZhbGVudCB0byBXUF9UaGVtZS0mZ3Q7Z2V0KCAmcXVvdDtOYW1lJnF1b3Q7ICkuICovXG4gIG5hbWU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIFVSTCBvZiB0aGUgc2NyZWVuc2hvdCBmb3IgdGhlIHRoZW1lLiBUaGUgc2NyZWVuc2hvdCBpcyBpbnRlbmRlZCB0byBnaXZlIGFuIG92ZXJ2aWV3IG9mIHdoYXQgdGhlIHRoZW1lIGxvb2tzIGxpa2UuIFRoaXMgZmllbGQgaXMgZXF1aXZhbGVudCB0byBXUF9UaGVtZS0mZ3Q7Z2V0X3NjcmVlbnNob3QoKS4gKi9cbiAgc2NyZWVuc2hvdD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgdGhlbWUgc2x1ZyBpcyB1c2VkIHRvIGludGVybmFsbHkgbWF0Y2ggdGhlbWVzLiBUaGVtZSBzbHVncyBjYW4gaGF2ZSBzdWJkaXJlY3RvcmllcyBsaWtlOiBteS10aGVtZS9zdWItdGhlbWUuIFRoaXMgZmllbGQgaXMgZXF1aXZhbGVudCB0byBXUF9UaGVtZS0mZ3Q7Z2V0X3N0eWxlc2hlZXQoKS4gKi9cbiAgc2x1Zz86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBVUkkgZm9yIHRoZSBhdXRob3IvY29tcGFueSB3ZWJzaXRlLiBUaGlzIGZpZWxkIGlzIGVxdWl2YWxlbnQgdG8gV1BfVGhlbWUtJmd0O2dldCggJnF1b3Q7VGFncyZxdW90OyApLiAqL1xuICB0YWdzPzogTWF5YmU8QXJyYXk8TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPj4+O1xuICAvKiogQSBVUkkgaWYgdGhlIHRoZW1lIGhhcyBhIHdlYnNpdGUgYXNzb2NpYXRlZCB3aXRoIGl0LiBUaGUgVGhlbWUgVVJJIGlzIGhhbmR5IGZvciBkaXJlY3RpbmcgdXNlcnMgdG8gYSB0aGVtZSBzaXRlIGZvciBzdXBwb3J0IGV0Yy4gVGhpcyBmaWVsZCBpcyBlcXVpdmFsZW50IHRvIFdQX1RoZW1lLSZndDtnZXQoICZxdW90O1RoZW1lVVJJJnF1b3Q7ICkuICovXG4gIHRoZW1lVXJpPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgdGhlIHRoZW1lLiBUaGlzIGZpZWxkIGlzIGVxdWl2YWxlbnQgdG8gV1BfVGhlbWUtJmd0O2dldCggJnF1b3Q7VmVyc2lvbiZxdW90OyApLiAqL1xuICB2ZXJzaW9uPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIHRvIFRoZW1lIE5vZGVzICovXG5leHBvcnQgdHlwZSBUaGVtZUNvbm5lY3Rpb24gPSB7XG4gIC8qKiBBIGxpc3Qgb2YgZWRnZXMgKHJlbGF0aW9uYWwgY29udGV4dCkgYmV0d2VlbiBSb290UXVlcnkgYW5kIGNvbm5lY3RlZCBUaGVtZSBOb2RlcyAqL1xuICBlZGdlczogQXJyYXk8VGhlbWVDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBBIGxpc3Qgb2YgY29ubmVjdGVkIFRoZW1lIE5vZGVzICovXG4gIG5vZGVzOiBBcnJheTxUaGVtZT47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFRoZW1lQ29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEVkZ2UgYmV0d2VlbiBhIE5vZGUgYW5kIGEgY29ubmVjdGVkIFRoZW1lICovXG5leHBvcnQgdHlwZSBUaGVtZUNvbm5lY3Rpb25FZGdlID0ge1xuICAvKiogT3BhcXVlIHJlZmVyZW5jZSB0byB0aGUgbm9kZXMgcG9zaXRpb24gaW4gdGhlIGNvbm5lY3Rpb24uIFZhbHVlIGNhbiBiZSB1c2VkIHdpdGggcGFnaW5hdGlvbiBhcmdzLiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGNvbm5lY3RlZCBUaGVtZSBOb2RlICovXG4gIG5vZGU6IFRoZW1lO1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgY29ubmVjdGVkIFRoZW1lQ29ubmVjdGlvbkVkZ2UgKi9cbmV4cG9ydCB0eXBlIFRoZW1lQ29ubmVjdGlvblBhZ2VJbmZvID0ge1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIFRoZSB0aGVtZWlzbGVTZGtTZXR0aW5ncyBzZXR0aW5nIHR5cGUgKi9cbmV4cG9ydCB0eXBlIFRoZW1laXNsZVNka1NldHRpbmdzU2V0dGluZ3MgPSB7XG4gIF9fdHlwZW5hbWU/OiAnVGhlbWVpc2xlU2RrU2V0dGluZ3NTZXR0aW5ncyc7XG4gIC8qKiBUaGUgc3RyaW5nIFNldHRpbmdzIEdyb3VwICovXG4gIHRoZW1laXNsZVNka1Byb21vdGlvbnM/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGJvb2xlYW4gU2V0dGluZ3MgR3JvdXAgKi9cbiAgdGhlbWVpc2xlU2RrUHJvbW90aW9uc05ldmVGc2VJbnN0YWxsZWQ/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBib29sZWFuIFNldHRpbmdzIEdyb3VwICovXG4gIHRoZW1laXNsZVNka1Byb21vdGlvbnNPcHRpbW9sZUluc3RhbGxlZD86IE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGJvb2xlYW4gU2V0dGluZ3MgR3JvdXAgKi9cbiAgdGhlbWVpc2xlU2RrUHJvbW90aW9uc090dGVySW5zdGFsbGVkPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgYm9vbGVhbiBTZXR0aW5ncyBHcm91cCAqL1xuICB0aGVtZWlzbGVTZGtQcm9tb3Rpb25zUm9wSW5zdGFsbGVkPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG59O1xuXG4vKiogQW55IG5vZGUgdGhhdCBoYXMgYSBVUkkgKi9cbmV4cG9ydCB0eXBlIFVuaWZvcm1SZXNvdXJjZUlkZW50aWZpYWJsZSA9IHtcbiAgLyoqIFRoZSB1bmlxdWUgcmVzb3VyY2UgaWRlbnRpZmllciBwYXRoICovXG4gIGlkOiBTY2FsYXJzWydJRCddWydvdXRwdXQnXTtcbiAgLyoqIFdoZXRoZXIgdGhlIG5vZGUgaXMgYSBDb250ZW50IE5vZGUgKi9cbiAgaXNDb250ZW50Tm9kZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZXRoZXIgdGhlIG5vZGUgaXMgYSBUZXJtICovXG4gIGlzVGVybU5vZGU6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBUaGUgdW5pcXVlIHJlc291cmNlIGlkZW50aWZpZXIgcGF0aCAqL1xuICB1cmk/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIElucHV0IGZvciB0aGUgdXBkYXRlQ2F0ZWdvcnkgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBVcGRhdGVDYXRlZ29yeUlucHV0ID0ge1xuICAvKiogVGhlIHNsdWcgdGhhdCB0aGUgY2F0ZWdvcnkgd2lsbCBiZSBhbiBhbGlhcyBvZiAqL1xuICBhbGlhc09mPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGlzIGlzIGFuIElEIHRoYXQgY2FuIGJlIHBhc3NlZCB0byBhIG11dGF0aW9uIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIGNhdGVnb3J5IG9iamVjdCAqL1xuICBkZXNjcmlwdGlvbj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIElEIG9mIHRoZSBjYXRlZ29yeSBvYmplY3QgdG8gdXBkYXRlICovXG4gIGlkOiBTY2FsYXJzWydJRCddWydpbnB1dCddO1xuICAvKiogVGhlIG5hbWUgb2YgdGhlIGNhdGVnb3J5IG9iamVjdCB0byBtdXRhdGUgKi9cbiAgbmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIElEIG9mIHRoZSBjYXRlZ29yeSB0aGF0IHNob3VsZCBiZSBzZXQgYXMgdGhlIHBhcmVudCAqL1xuICBwYXJlbnRJZD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG4gIC8qKiBJZiB0aGlzIGFyZ3VtZW50IGV4aXN0cyB0aGVuIHRoZSBzbHVnIHdpbGwgYmUgY2hlY2tlZCB0byBzZWUgaWYgaXQgaXMgbm90IGFuIGV4aXN0aW5nIHZhbGlkIHRlcm0uIElmIHRoYXQgY2hlY2sgc3VjY2VlZHMgKGl0IGlzIG5vdCBhIHZhbGlkIHRlcm0pLCB0aGVuIGl0IGlzIGFkZGVkIGFuZCB0aGUgdGVybSBpZCBpcyBnaXZlbi4gSWYgaXQgZmFpbHMsIHRoZW4gYSBjaGVjayBpcyBtYWRlIHRvIHdoZXRoZXIgdGhlIHRheG9ub215IGlzIGhpZXJhcmNoaWNhbCBhbmQgdGhlIHBhcmVudCBhcmd1bWVudCBpcyBub3QgZW1wdHkuIElmIHRoZSBzZWNvbmQgY2hlY2sgc3VjY2VlZHMsIHRoZSB0ZXJtIHdpbGwgYmUgaW5zZXJ0ZWQgYW5kIHRoZSB0ZXJtIGlkIHdpbGwgYmUgZ2l2ZW4uIElmIHRoZSBzbHVnIGFyZ3VtZW50IGlzIGVtcHR5LCB0aGVuIGl0IHdpbGwgYmUgY2FsY3VsYXRlZCBmcm9tIHRoZSB0ZXJtIG5hbWUuICovXG4gIHNsdWc/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbn07XG5cbi8qKiBUaGUgcGF5bG9hZCBmb3IgdGhlIHVwZGF0ZUNhdGVnb3J5IG11dGF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgVXBkYXRlQ2F0ZWdvcnlQYXlsb2FkID0ge1xuICBfX3R5cGVuYW1lPzogJ1VwZGF0ZUNhdGVnb3J5UGF5bG9hZCc7XG4gIC8qKiBUaGUgY3JlYXRlZCBjYXRlZ29yeSAqL1xuICBjYXRlZ29yeT86IE1heWJlPENhdGVnb3J5PjtcbiAgLyoqIElmIGEgJiMwMzk7Y2xpZW50TXV0YXRpb25JZCYjMDM5OyBpbnB1dCBpcyBwcm92aWRlZCB0byB0aGUgbXV0YXRpb24sIGl0IHdpbGwgYmUgcmV0dXJuZWQgYXMgb3V0cHV0IG9uIHRoZSBtdXRhdGlvbi4gVGhpcyBJRCBjYW4gYmUgdXNlZCBieSB0aGUgY2xpZW50IHRvIHRyYWNrIHRoZSBwcm9ncmVzcyBvZiBtdXRhdGlvbnMgYW5kIGNhdGNoIHBvc3NpYmxlIGR1cGxpY2F0ZSBtdXRhdGlvbiBzdWJtaXNzaW9ucy4gKi9cbiAgY2xpZW50TXV0YXRpb25JZD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogSW5wdXQgZm9yIHRoZSB1cGRhdGVDb21tZW50IG11dGF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgVXBkYXRlQ29tbWVudElucHV0ID0ge1xuICAvKiogVGhlIGFwcHJvdmFsIHN0YXR1cyBvZiB0aGUgY29tbWVudC4gKi9cbiAgYXBwcm92ZWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBuYW1lIG9mIHRoZSBjb21tZW50J3MgYXV0aG9yLiAqL1xuICBhdXRob3I/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBlbWFpbCBvZiB0aGUgY29tbWVudCdzIGF1dGhvci4gKi9cbiAgYXV0aG9yRW1haWw/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSB1cmwgb2YgdGhlIGNvbW1lbnQncyBhdXRob3IuICovXG4gIGF1dGhvclVybD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhpcyBpcyBhbiBJRCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gYSBtdXRhdGlvbiBieSB0aGUgY2xpZW50IHRvIHRyYWNrIHRoZSBwcm9ncmVzcyBvZiBtdXRhdGlvbnMgYW5kIGNhdGNoIHBvc3NpYmxlIGR1cGxpY2F0ZSBtdXRhdGlvbiBzdWJtaXNzaW9ucy4gKi9cbiAgY2xpZW50TXV0YXRpb25JZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIGRhdGFiYXNlIElEIG9mIHRoZSBwb3N0IG9iamVjdCB0aGUgY29tbWVudCBiZWxvbmdzIHRvLiAqL1xuICBjb21tZW50T24/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIENvbnRlbnQgb2YgdGhlIGNvbW1lbnQuICovXG4gIGNvbnRlbnQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBkYXRlIG9mIHRoZSBvYmplY3QuIFByZWZlcmFibGUgdG8gZW50ZXIgYXMgeWVhci9tb250aC9kYXkgKCBlLmcuIDAxLzMxLzIwMTcgKSBhcyBpdCB3aWxsIHJlYXJyYW5nZSBkYXRlIGFzIGZpdCBpZiBpdCBpcyBub3Qgc3BlY2lmaWVkLiBJbmNvbXBsZXRlIGRhdGVzIG1heSBoYXZlIHVuaW50ZW5kZWQgcmVzdWx0cyBmb3IgZXhhbXBsZSwgXCIyMDE3XCIgYXMgdGhlIGlucHV0IHdpbGwgdXNlIGN1cnJlbnQgZGF0ZSB3aXRoIHRpbWVzdGFtcCAyMDoxNyAgKi9cbiAgZGF0ZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIElEIG9mIHRoZSBjb21tZW50IGJlaW5nIHVwZGF0ZWQuICovXG4gIGlkOiBTY2FsYXJzWydJRCddWydpbnB1dCddO1xuICAvKiogUGFyZW50IGNvbW1lbnQgSUQgb2YgY3VycmVudCBjb21tZW50LiAqL1xuICBwYXJlbnQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIGFwcHJvdmFsIHN0YXR1cyBvZiB0aGUgY29tbWVudCAqL1xuICBzdGF0dXM/OiBJbnB1dE1heWJlPENvbW1lbnRTdGF0dXNFbnVtPjtcbiAgLyoqIFR5cGUgb2YgY29tbWVudC4gKi9cbiAgdHlwZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIFRoZSBwYXlsb2FkIGZvciB0aGUgdXBkYXRlQ29tbWVudCBtdXRhdGlvbi4gKi9cbmV4cG9ydCB0eXBlIFVwZGF0ZUNvbW1lbnRQYXlsb2FkID0ge1xuICBfX3R5cGVuYW1lPzogJ1VwZGF0ZUNvbW1lbnRQYXlsb2FkJztcbiAgLyoqIElmIGEgJiMwMzk7Y2xpZW50TXV0YXRpb25JZCYjMDM5OyBpbnB1dCBpcyBwcm92aWRlZCB0byB0aGUgbXV0YXRpb24sIGl0IHdpbGwgYmUgcmV0dXJuZWQgYXMgb3V0cHV0IG9uIHRoZSBtdXRhdGlvbi4gVGhpcyBJRCBjYW4gYmUgdXNlZCBieSB0aGUgY2xpZW50IHRvIHRyYWNrIHRoZSBwcm9ncmVzcyBvZiBtdXRhdGlvbnMgYW5kIGNhdGNoIHBvc3NpYmxlIGR1cGxpY2F0ZSBtdXRhdGlvbiBzdWJtaXNzaW9ucy4gKi9cbiAgY2xpZW50TXV0YXRpb25JZD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgY29tbWVudCB0aGF0IHdhcyBjcmVhdGVkICovXG4gIGNvbW1lbnQ/OiBNYXliZTxDb21tZW50PjtcbiAgLyoqIFdoZXRoZXIgdGhlIG11dGF0aW9uIHN1Y2NlZWRlZC4gSWYgdGhlIGNvbW1lbnQgaXMgbm90IGFwcHJvdmVkLCB0aGUgc2VydmVyIHdpbGwgbm90IHJldHVybiB0aGUgY29tbWVudCB0byBhIG5vbiBhdXRoZW50aWNhdGVkIHVzZXIsIGJ1dCBhIHN1Y2Nlc3MgbWVzc2FnZSBjYW4gYmUgcmV0dXJuZWQgaWYgdGhlIGNyZWF0ZSBzdWNjZWVkZWQsIGFuZCB0aGUgY2xpZW50IGNhbiBvcHRpbWlzdGljYWxseSBhZGQgdGhlIGNvbW1lbnQgdG8gdGhlIGNsaWVudCBjYWNoZSAqL1xuICBzdWNjZXNzPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG59O1xuXG4vKiogSW5wdXQgZm9yIHRoZSB1cGRhdGVNZWRpYUl0ZW0gbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBVcGRhdGVNZWRpYUl0ZW1JbnB1dCA9IHtcbiAgLyoqIEFsdGVybmF0aXZlIHRleHQgdG8gZGlzcGxheSB3aGVuIG1lZGlhSXRlbSBpcyBub3QgZGlzcGxheWVkICovXG4gIGFsdFRleHQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSB1c2VySWQgdG8gYXNzaWduIGFzIHRoZSBhdXRob3Igb2YgdGhlIG1lZGlhSXRlbSAqL1xuICBhdXRob3JJZD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgY2FwdGlvbiBmb3IgdGhlIG1lZGlhSXRlbSAqL1xuICBjYXB0aW9uPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGlzIGlzIGFuIElEIHRoYXQgY2FuIGJlIHBhc3NlZCB0byBhIG11dGF0aW9uIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgY29tbWVudCBzdGF0dXMgZm9yIHRoZSBtZWRpYUl0ZW0gKi9cbiAgY29tbWVudFN0YXR1cz86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIGRhdGUgb2YgdGhlIG1lZGlhSXRlbSAqL1xuICBkYXRlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgZGF0ZSAoaW4gR01UIHpvbmUpIG9mIHRoZSBtZWRpYUl0ZW0gKi9cbiAgZGF0ZUdtdD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogRGVzY3JpcHRpb24gb2YgdGhlIG1lZGlhSXRlbSAqL1xuICBkZXNjcmlwdGlvbj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIGZpbGUgbmFtZSBvZiB0aGUgbWVkaWFJdGVtICovXG4gIGZpbGVQYXRoPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgZmlsZSB0eXBlIG9mIHRoZSBtZWRpYUl0ZW0gKi9cbiAgZmlsZVR5cGU/OiBJbnB1dE1heWJlPE1pbWVUeXBlRW51bT47XG4gIC8qKiBUaGUgSUQgb2YgdGhlIG1lZGlhSXRlbSBvYmplY3QgKi9cbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ2lucHV0J107XG4gIC8qKiBUaGUgSUQgb2YgdGhlIHBhcmVudCBvYmplY3QgKi9cbiAgcGFyZW50SWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIHBpbmcgc3RhdHVzIGZvciB0aGUgbWVkaWFJdGVtICovXG4gIHBpbmdTdGF0dXM/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBzbHVnIG9mIHRoZSBtZWRpYUl0ZW0gKi9cbiAgc2x1Zz86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIHN0YXR1cyBvZiB0aGUgbWVkaWFJdGVtICovXG4gIHN0YXR1cz86IElucHV0TWF5YmU8TWVkaWFJdGVtU3RhdHVzRW51bT47XG4gIC8qKiBUaGUgdGl0bGUgb2YgdGhlIG1lZGlhSXRlbSAqL1xuICB0aXRsZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIFRoZSBwYXlsb2FkIGZvciB0aGUgdXBkYXRlTWVkaWFJdGVtIG11dGF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgVXBkYXRlTWVkaWFJdGVtUGF5bG9hZCA9IHtcbiAgX190eXBlbmFtZT86ICdVcGRhdGVNZWRpYUl0ZW1QYXlsb2FkJztcbiAgLyoqIElmIGEgJiMwMzk7Y2xpZW50TXV0YXRpb25JZCYjMDM5OyBpbnB1dCBpcyBwcm92aWRlZCB0byB0aGUgbXV0YXRpb24sIGl0IHdpbGwgYmUgcmV0dXJuZWQgYXMgb3V0cHV0IG9uIHRoZSBtdXRhdGlvbi4gVGhpcyBJRCBjYW4gYmUgdXNlZCBieSB0aGUgY2xpZW50IHRvIHRyYWNrIHRoZSBwcm9ncmVzcyBvZiBtdXRhdGlvbnMgYW5kIGNhdGNoIHBvc3NpYmxlIGR1cGxpY2F0ZSBtdXRhdGlvbiBzdWJtaXNzaW9ucy4gKi9cbiAgY2xpZW50TXV0YXRpb25JZD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgTWVkaWFJdGVtIG9iamVjdCBtdXRhdGlvbiB0eXBlLiAqL1xuICBtZWRpYUl0ZW0/OiBNYXliZTxNZWRpYUl0ZW0+O1xufTtcblxuLyoqIElucHV0IGZvciB0aGUgdXBkYXRlUGFnZSBtdXRhdGlvbi4gKi9cbmV4cG9ydCB0eXBlIFVwZGF0ZVBhZ2VJbnB1dCA9IHtcbiAgLyoqIFRoZSB1c2VySWQgdG8gYXNzaWduIGFzIHRoZSBhdXRob3Igb2YgdGhlIG9iamVjdCAqL1xuICBhdXRob3JJZD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGlzIGlzIGFuIElEIHRoYXQgY2FuIGJlIHBhc3NlZCB0byBhIG11dGF0aW9uIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgY29tbWVudCBzdGF0dXMgZm9yIHRoZSBvYmplY3QgKi9cbiAgY29tbWVudFN0YXR1cz86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIGNvbnRlbnQgb2YgdGhlIG9iamVjdCAqL1xuICBjb250ZW50PzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgZGF0ZSBvZiB0aGUgb2JqZWN0LiBQcmVmZXJhYmxlIHRvIGVudGVyIGFzIHllYXIvbW9udGgvZGF5IChlLmcuIDAxLzMxLzIwMTcpIGFzIGl0IHdpbGwgcmVhcnJhbmdlIGRhdGUgYXMgZml0IGlmIGl0IGlzIG5vdCBzcGVjaWZpZWQuIEluY29tcGxldGUgZGF0ZXMgbWF5IGhhdmUgdW5pbnRlbmRlZCByZXN1bHRzIGZvciBleGFtcGxlLCBcIjIwMTdcIiBhcyB0aGUgaW5wdXQgd2lsbCB1c2UgY3VycmVudCBkYXRlIHdpdGggdGltZXN0YW1wIDIwOjE3ICAqL1xuICBkYXRlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgSUQgb2YgdGhlIHBhZ2Ugb2JqZWN0ICovXG4gIGlkOiBTY2FsYXJzWydJRCddWydpbnB1dCddO1xuICAvKiogT3ZlcnJpZGUgdGhlIGVkaXQgbG9jayB3aGVuIGFub3RoZXIgdXNlciBpcyBlZGl0aW5nIHRoZSBwb3N0ICovXG4gIGlnbm9yZUVkaXRMb2NrPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogQSBmaWVsZCB1c2VkIGZvciBvcmRlcmluZyBwb3N0cy4gVGhpcyBpcyB0eXBpY2FsbHkgdXNlZCB3aXRoIG5hdiBtZW51IGl0ZW1zIG9yIGZvciBzcGVjaWFsIG9yZGVyaW5nIG9mIGhpZXJhcmNoaWNhbCBjb250ZW50IHR5cGVzLiAqL1xuICBtZW51T3JkZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBJRCBvZiB0aGUgcGFyZW50IG9iamVjdCAqL1xuICBwYXJlbnRJZD86IElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgcGFzc3dvcmQgdXNlZCB0byBwcm90ZWN0IHRoZSBjb250ZW50IG9mIHRoZSBvYmplY3QgKi9cbiAgcGFzc3dvcmQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBzbHVnIG9mIHRoZSBvYmplY3QgKi9cbiAgc2x1Zz86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIHN0YXR1cyBvZiB0aGUgb2JqZWN0ICovXG4gIHN0YXR1cz86IElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+O1xuICAvKiogVGhlIHRpdGxlIG9mIHRoZSBvYmplY3QgKi9cbiAgdGl0bGU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbn07XG5cbi8qKiBUaGUgcGF5bG9hZCBmb3IgdGhlIHVwZGF0ZVBhZ2UgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBVcGRhdGVQYWdlUGF5bG9hZCA9IHtcbiAgX190eXBlbmFtZT86ICdVcGRhdGVQYWdlUGF5bG9hZCc7XG4gIC8qKiBJZiBhICYjMDM5O2NsaWVudE11dGF0aW9uSWQmIzAzOTsgaW5wdXQgaXMgcHJvdmlkZWQgdG8gdGhlIG11dGF0aW9uLCBpdCB3aWxsIGJlIHJldHVybmVkIGFzIG91dHB1dCBvbiB0aGUgbXV0YXRpb24uIFRoaXMgSUQgY2FuIGJlIHVzZWQgYnkgdGhlIGNsaWVudCB0byB0cmFjayB0aGUgcHJvZ3Jlc3Mgb2YgbXV0YXRpb25zIGFuZCBjYXRjaCBwb3NzaWJsZSBkdXBsaWNhdGUgbXV0YXRpb24gc3VibWlzc2lvbnMuICovXG4gIGNsaWVudE11dGF0aW9uSWQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIFBvc3Qgb2JqZWN0IG11dGF0aW9uIHR5cGUuICovXG4gIHBhZ2U/OiBNYXliZTxQYWdlPjtcbn07XG5cbi8qKiBJbnB1dCBmb3IgdGhlIHVwZGF0ZVBvc3RGb3JtYXQgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBVcGRhdGVQb3N0Rm9ybWF0SW5wdXQgPSB7XG4gIC8qKiBUaGUgc2x1ZyB0aGF0IHRoZSBwb3N0X2Zvcm1hdCB3aWxsIGJlIGFuIGFsaWFzIG9mICovXG4gIGFsaWFzT2Y/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoaXMgaXMgYW4gSUQgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIGEgbXV0YXRpb24gYnkgdGhlIGNsaWVudCB0byB0cmFjayB0aGUgcHJvZ3Jlc3Mgb2YgbXV0YXRpb25zIGFuZCBjYXRjaCBwb3NzaWJsZSBkdXBsaWNhdGUgbXV0YXRpb24gc3VibWlzc2lvbnMuICovXG4gIGNsaWVudE11dGF0aW9uSWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgcG9zdF9mb3JtYXQgb2JqZWN0ICovXG4gIGRlc2NyaXB0aW9uPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgSUQgb2YgdGhlIHBvc3RGb3JtYXQgb2JqZWN0IHRvIHVwZGF0ZSAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnaW5wdXQnXTtcbiAgLyoqIFRoZSBuYW1lIG9mIHRoZSBwb3N0X2Zvcm1hdCBvYmplY3QgdG8gbXV0YXRlICovXG4gIG5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIElmIHRoaXMgYXJndW1lbnQgZXhpc3RzIHRoZW4gdGhlIHNsdWcgd2lsbCBiZSBjaGVja2VkIHRvIHNlZSBpZiBpdCBpcyBub3QgYW4gZXhpc3RpbmcgdmFsaWQgdGVybS4gSWYgdGhhdCBjaGVjayBzdWNjZWVkcyAoaXQgaXMgbm90IGEgdmFsaWQgdGVybSksIHRoZW4gaXQgaXMgYWRkZWQgYW5kIHRoZSB0ZXJtIGlkIGlzIGdpdmVuLiBJZiBpdCBmYWlscywgdGhlbiBhIGNoZWNrIGlzIG1hZGUgdG8gd2hldGhlciB0aGUgdGF4b25vbXkgaXMgaGllcmFyY2hpY2FsIGFuZCB0aGUgcGFyZW50IGFyZ3VtZW50IGlzIG5vdCBlbXB0eS4gSWYgdGhlIHNlY29uZCBjaGVjayBzdWNjZWVkcywgdGhlIHRlcm0gd2lsbCBiZSBpbnNlcnRlZCBhbmQgdGhlIHRlcm0gaWQgd2lsbCBiZSBnaXZlbi4gSWYgdGhlIHNsdWcgYXJndW1lbnQgaXMgZW1wdHksIHRoZW4gaXQgd2lsbCBiZSBjYWxjdWxhdGVkIGZyb20gdGhlIHRlcm0gbmFtZS4gKi9cbiAgc2x1Zz86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIFRoZSBwYXlsb2FkIGZvciB0aGUgdXBkYXRlUG9zdEZvcm1hdCBtdXRhdGlvbi4gKi9cbmV4cG9ydCB0eXBlIFVwZGF0ZVBvc3RGb3JtYXRQYXlsb2FkID0ge1xuICBfX3R5cGVuYW1lPzogJ1VwZGF0ZVBvc3RGb3JtYXRQYXlsb2FkJztcbiAgLyoqIElmIGEgJiMwMzk7Y2xpZW50TXV0YXRpb25JZCYjMDM5OyBpbnB1dCBpcyBwcm92aWRlZCB0byB0aGUgbXV0YXRpb24sIGl0IHdpbGwgYmUgcmV0dXJuZWQgYXMgb3V0cHV0IG9uIHRoZSBtdXRhdGlvbi4gVGhpcyBJRCBjYW4gYmUgdXNlZCBieSB0aGUgY2xpZW50IHRvIHRyYWNrIHRoZSBwcm9ncmVzcyBvZiBtdXRhdGlvbnMgYW5kIGNhdGNoIHBvc3NpYmxlIGR1cGxpY2F0ZSBtdXRhdGlvbiBzdWJtaXNzaW9ucy4gKi9cbiAgY2xpZW50TXV0YXRpb25JZD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgY3JlYXRlZCBwb3N0X2Zvcm1hdCAqL1xuICBwb3N0Rm9ybWF0PzogTWF5YmU8UG9zdEZvcm1hdD47XG59O1xuXG4vKiogSW5wdXQgZm9yIHRoZSB1cGRhdGVQb3N0IG11dGF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgVXBkYXRlUG9zdElucHV0ID0ge1xuICAvKiogVGhlIHVzZXJJZCB0byBhc3NpZ24gYXMgdGhlIGF1dGhvciBvZiB0aGUgb2JqZWN0ICovXG4gIGF1dGhvcklkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPjtcbiAgLyoqIFNldCBjb25uZWN0aW9ucyBiZXR3ZWVuIHRoZSBwb3N0IGFuZCBjYXRlZ29yaWVzICovXG4gIGNhdGVnb3JpZXM/OiBJbnB1dE1heWJlPFBvc3RDYXRlZ29yaWVzSW5wdXQ+O1xuICAvKiogVGhpcyBpcyBhbiBJRCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gYSBtdXRhdGlvbiBieSB0aGUgY2xpZW50IHRvIHRyYWNrIHRoZSBwcm9ncmVzcyBvZiBtdXRhdGlvbnMgYW5kIGNhdGNoIHBvc3NpYmxlIGR1cGxpY2F0ZSBtdXRhdGlvbiBzdWJtaXNzaW9ucy4gKi9cbiAgY2xpZW50TXV0YXRpb25JZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIGNvbW1lbnQgc3RhdHVzIGZvciB0aGUgb2JqZWN0ICovXG4gIGNvbW1lbnRTdGF0dXM/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBjb250ZW50IG9mIHRoZSBvYmplY3QgKi9cbiAgY29udGVudD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIGRhdGUgb2YgdGhlIG9iamVjdC4gUHJlZmVyYWJsZSB0byBlbnRlciBhcyB5ZWFyL21vbnRoL2RheSAoZS5nLiAwMS8zMS8yMDE3KSBhcyBpdCB3aWxsIHJlYXJyYW5nZSBkYXRlIGFzIGZpdCBpZiBpdCBpcyBub3Qgc3BlY2lmaWVkLiBJbmNvbXBsZXRlIGRhdGVzIG1heSBoYXZlIHVuaW50ZW5kZWQgcmVzdWx0cyBmb3IgZXhhbXBsZSwgXCIyMDE3XCIgYXMgdGhlIGlucHV0IHdpbGwgdXNlIGN1cnJlbnQgZGF0ZSB3aXRoIHRpbWVzdGFtcCAyMDoxNyAgKi9cbiAgZGF0ZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIGV4Y2VycHQgb2YgdGhlIG9iamVjdCAqL1xuICBleGNlcnB0PzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgSUQgb2YgdGhlIHBvc3Qgb2JqZWN0ICovXG4gIGlkOiBTY2FsYXJzWydJRCddWydpbnB1dCddO1xuICAvKiogT3ZlcnJpZGUgdGhlIGVkaXQgbG9jayB3aGVuIGFub3RoZXIgdXNlciBpcyBlZGl0aW5nIHRoZSBwb3N0ICovXG4gIGlnbm9yZUVkaXRMb2NrPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogQSBmaWVsZCB1c2VkIGZvciBvcmRlcmluZyBwb3N0cy4gVGhpcyBpcyB0eXBpY2FsbHkgdXNlZCB3aXRoIG5hdiBtZW51IGl0ZW1zIG9yIGZvciBzcGVjaWFsIG9yZGVyaW5nIG9mIGhpZXJhcmNoaWNhbCBjb250ZW50IHR5cGVzLiAqL1xuICBtZW51T3JkZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBwYXNzd29yZCB1c2VkIHRvIHByb3RlY3QgdGhlIGNvbnRlbnQgb2YgdGhlIG9iamVjdCAqL1xuICBwYXNzd29yZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIHBpbmcgc3RhdHVzIGZvciB0aGUgb2JqZWN0ICovXG4gIHBpbmdTdGF0dXM/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFVSTHMgdGhhdCBoYXZlIGJlZW4gcGluZ2VkLiAqL1xuICBwaW5nZWQ/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTZXQgY29ubmVjdGlvbnMgYmV0d2VlbiB0aGUgcG9zdCBhbmQgcG9zdEZvcm1hdHMgKi9cbiAgcG9zdEZvcm1hdHM/OiBJbnB1dE1heWJlPFBvc3RQb3N0Rm9ybWF0c0lucHV0PjtcbiAgLyoqIFRoZSBzbHVnIG9mIHRoZSBvYmplY3QgKi9cbiAgc2x1Zz86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIHN0YXR1cyBvZiB0aGUgb2JqZWN0ICovXG4gIHN0YXR1cz86IElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+O1xuICAvKiogU2V0IGNvbm5lY3Rpb25zIGJldHdlZW4gdGhlIHBvc3QgYW5kIHRhZ3MgKi9cbiAgdGFncz86IElucHV0TWF5YmU8UG9zdFRhZ3NJbnB1dD47XG4gIC8qKiBUaGUgdGl0bGUgb2YgdGhlIG9iamVjdCAqL1xuICB0aXRsZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVVJMcyBxdWV1ZWQgdG8gYmUgcGluZ2VkLiAqL1xuICB0b1Bpbmc/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG59O1xuXG4vKiogVGhlIHBheWxvYWQgZm9yIHRoZSB1cGRhdGVQb3N0IG11dGF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgVXBkYXRlUG9zdFBheWxvYWQgPSB7XG4gIF9fdHlwZW5hbWU/OiAnVXBkYXRlUG9zdFBheWxvYWQnO1xuICAvKiogSWYgYSAmIzAzOTtjbGllbnRNdXRhdGlvbklkJiMwMzk7IGlucHV0IGlzIHByb3ZpZGVkIHRvIHRoZSBtdXRhdGlvbiwgaXQgd2lsbCBiZSByZXR1cm5lZCBhcyBvdXRwdXQgb24gdGhlIG11dGF0aW9uLiBUaGlzIElEIGNhbiBiZSB1c2VkIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBQb3N0IG9iamVjdCBtdXRhdGlvbiB0eXBlLiAqL1xuICBwb3N0PzogTWF5YmU8UG9zdD47XG59O1xuXG4vKiogSW5wdXQgZm9yIHRoZSB1cGRhdGVTZXR0aW5ncyBtdXRhdGlvbi4gKi9cbmV4cG9ydCB0eXBlIFVwZGF0ZVNldHRpbmdzSW5wdXQgPSB7XG4gIC8qKiBUaGlzIGlzIGFuIElEIHRoYXQgY2FuIGJlIHBhc3NlZCB0byBhIG11dGF0aW9uIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBbGxvdyBwZW9wbGUgdG8gc3VibWl0IGNvbW1lbnRzIG9uIG5ldyBwb3N0cy4gKi9cbiAgZGlzY3Vzc2lvblNldHRpbmdzRGVmYXVsdENvbW1lbnRTdGF0dXM/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEFsbG93IGxpbmsgbm90aWZpY2F0aW9ucyBmcm9tIG90aGVyIGJsb2dzIChwaW5nYmFja3MgYW5kIHRyYWNrYmFja3MpIG9uIG5ldyBhcnRpY2xlcy4gKi9cbiAgZGlzY3Vzc2lvblNldHRpbmdzRGVmYXVsdFBpbmdTdGF0dXM/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEEgZGF0ZSBmb3JtYXQgZm9yIGFsbCBkYXRlIHN0cmluZ3MuICovXG4gIGdlbmVyYWxTZXR0aW5nc0RhdGVGb3JtYXQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFNpdGUgdGFnbGluZS4gKi9cbiAgZ2VuZXJhbFNldHRpbmdzRGVzY3JpcHRpb24/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoaXMgYWRkcmVzcyBpcyB1c2VkIGZvciBhZG1pbiBwdXJwb3NlcywgbGlrZSBuZXcgdXNlciBub3RpZmljYXRpb24uICovXG4gIGdlbmVyYWxTZXR0aW5nc0VtYWlsPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBXb3JkUHJlc3MgbG9jYWxlIGNvZGUuICovXG4gIGdlbmVyYWxTZXR0aW5nc0xhbmd1YWdlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBIGRheSBudW1iZXIgb2YgdGhlIHdlZWsgdGhhdCB0aGUgd2VlayBzaG91bGQgc3RhcnQgb24uICovXG4gIGdlbmVyYWxTZXR0aW5nc1N0YXJ0T2ZXZWVrPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBBIHRpbWUgZm9ybWF0IGZvciBhbGwgdGltZSBzdHJpbmdzLiAqL1xuICBnZW5lcmFsU2V0dGluZ3NUaW1lRm9ybWF0PzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBIGNpdHkgaW4gdGhlIHNhbWUgdGltZXpvbmUgYXMgeW91LiAqL1xuICBnZW5lcmFsU2V0dGluZ3NUaW1lem9uZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogU2l0ZSB0aXRsZS4gKi9cbiAgZ2VuZXJhbFNldHRpbmdzVGl0bGU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFNpdGUgVVJMLiAqL1xuICBnZW5lcmFsU2V0dGluZ3NVcmw/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgcGRmcFNldHRpbmdzU2V0dGluZ3NCcG1HdXRlbmJlcmdFbmFibGU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIHBkZnBTZXR0aW5nc1NldHRpbmdzUGRmcEd1dGVuYmVyZ0VuYWJsZT86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBJRCBvZiB0aGUgcGFnZSB0aGF0IHNob3VsZCBkaXNwbGF5IHRoZSBsYXRlc3QgcG9zdHMgKi9cbiAgcmVhZGluZ1NldHRpbmdzUGFnZUZvclBvc3RzPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgSUQgb2YgdGhlIHBhZ2UgdGhhdCBzaG91bGQgYmUgZGlzcGxheWVkIG9uIHRoZSBmcm9udCBwYWdlICovXG4gIHJlYWRpbmdTZXR0aW5nc1BhZ2VPbkZyb250PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBCbG9nIHBhZ2VzIHNob3cgYXQgbW9zdC4gKi9cbiAgcmVhZGluZ1NldHRpbmdzUG9zdHNQZXJQYWdlPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBXaGF0IHRvIHNob3cgb24gdGhlIGZyb250IHBhZ2UgKi9cbiAgcmVhZGluZ1NldHRpbmdzU2hvd09uRnJvbnQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgdGhlbWVpc2xlU2RrU2V0dGluZ3NTZXR0aW5nc1RoZW1laXNsZVNka1Byb21vdGlvbnM/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgdGhlbWVpc2xlU2RrU2V0dGluZ3NTZXR0aW5nc1RoZW1laXNsZVNka1Byb21vdGlvbnNOZXZlRnNlSW5zdGFsbGVkPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICB0aGVtZWlzbGVTZGtTZXR0aW5nc1NldHRpbmdzVGhlbWVpc2xlU2RrUHJvbW90aW9uc09wdGltb2xlSW5zdGFsbGVkPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICB0aGVtZWlzbGVTZGtTZXR0aW5nc1NldHRpbmdzVGhlbWVpc2xlU2RrUHJvbW90aW9uc090dGVySW5zdGFsbGVkPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICB0aGVtZWlzbGVTZGtTZXR0aW5nc1NldHRpbmdzVGhlbWVpc2xlU2RrUHJvbW90aW9uc1JvcEluc3RhbGxlZD86IElucHV0TWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydpbnB1dCddPjtcbiAgLyoqIERlZmF1bHQgcG9zdCBjYXRlZ29yeS4gKi9cbiAgd3JpdGluZ1NldHRpbmdzRGVmYXVsdENhdGVnb3J5PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBEZWZhdWx0IHBvc3QgZm9ybWF0LiAqL1xuICB3cml0aW5nU2V0dGluZ3NEZWZhdWx0UG9zdEZvcm1hdD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQ29udmVydCBlbW90aWNvbnMgbGlrZSA6LSkgYW5kIDotUCB0byBncmFwaGljcyBvbiBkaXNwbGF5LiAqL1xuICB3cml0aW5nU2V0dGluZ3NVc2VTbWlsaWVzPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIFRoZSBwYXlsb2FkIGZvciB0aGUgdXBkYXRlU2V0dGluZ3MgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBVcGRhdGVTZXR0aW5nc1BheWxvYWQgPSB7XG4gIF9fdHlwZW5hbWU/OiAnVXBkYXRlU2V0dGluZ3NQYXlsb2FkJztcbiAgLyoqIFVwZGF0ZSBhbGwgc2V0dGluZ3MuICovXG4gIGFsbFNldHRpbmdzPzogTWF5YmU8U2V0dGluZ3M+O1xuICAvKiogSWYgYSAmIzAzOTtjbGllbnRNdXRhdGlvbklkJiMwMzk7IGlucHV0IGlzIHByb3ZpZGVkIHRvIHRoZSBtdXRhdGlvbiwgaXQgd2lsbCBiZSByZXR1cm5lZCBhcyBvdXRwdXQgb24gdGhlIG11dGF0aW9uLiBUaGlzIElEIGNhbiBiZSB1c2VkIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFVwZGF0ZSB0aGUgRGlzY3Vzc2lvblNldHRpbmdzIHNldHRpbmcuICovXG4gIGRpc2N1c3Npb25TZXR0aW5ncz86IE1heWJlPERpc2N1c3Npb25TZXR0aW5ncz47XG4gIC8qKiBVcGRhdGUgdGhlIEdlbmVyYWxTZXR0aW5ncyBzZXR0aW5nLiAqL1xuICBnZW5lcmFsU2V0dGluZ3M/OiBNYXliZTxHZW5lcmFsU2V0dGluZ3M+O1xuICAvKiogVXBkYXRlIHRoZSBQZGZwU2V0dGluZ3NTZXR0aW5ncyBzZXR0aW5nLiAqL1xuICBwZGZwU2V0dGluZ3NTZXR0aW5ncz86IE1heWJlPFBkZnBTZXR0aW5nc1NldHRpbmdzPjtcbiAgLyoqIFVwZGF0ZSB0aGUgUmVhZGluZ1NldHRpbmdzIHNldHRpbmcuICovXG4gIHJlYWRpbmdTZXR0aW5ncz86IE1heWJlPFJlYWRpbmdTZXR0aW5ncz47XG4gIC8qKiBVcGRhdGUgdGhlIFRoZW1laXNsZVNka1NldHRpbmdzU2V0dGluZ3Mgc2V0dGluZy4gKi9cbiAgdGhlbWVpc2xlU2RrU2V0dGluZ3NTZXR0aW5ncz86IE1heWJlPFRoZW1laXNsZVNka1NldHRpbmdzU2V0dGluZ3M+O1xuICAvKiogVXBkYXRlIHRoZSBXcml0aW5nU2V0dGluZ3Mgc2V0dGluZy4gKi9cbiAgd3JpdGluZ1NldHRpbmdzPzogTWF5YmU8V3JpdGluZ1NldHRpbmdzPjtcbn07XG5cbi8qKiBJbnB1dCBmb3IgdGhlIHVwZGF0ZVRhZyBtdXRhdGlvbi4gKi9cbmV4cG9ydCB0eXBlIFVwZGF0ZVRhZ0lucHV0ID0ge1xuICAvKiogVGhlIHNsdWcgdGhhdCB0aGUgcG9zdF90YWcgd2lsbCBiZSBhbiBhbGlhcyBvZiAqL1xuICBhbGlhc09mPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGlzIGlzIGFuIElEIHRoYXQgY2FuIGJlIHBhc3NlZCB0byBhIG11dGF0aW9uIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIHBvc3RfdGFnIG9iamVjdCAqL1xuICBkZXNjcmlwdGlvbj86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogVGhlIElEIG9mIHRoZSB0YWcgb2JqZWN0IHRvIHVwZGF0ZSAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnaW5wdXQnXTtcbiAgLyoqIFRoZSBuYW1lIG9mIHRoZSBwb3N0X3RhZyBvYmplY3QgdG8gbXV0YXRlICovXG4gIG5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIElmIHRoaXMgYXJndW1lbnQgZXhpc3RzIHRoZW4gdGhlIHNsdWcgd2lsbCBiZSBjaGVja2VkIHRvIHNlZSBpZiBpdCBpcyBub3QgYW4gZXhpc3RpbmcgdmFsaWQgdGVybS4gSWYgdGhhdCBjaGVjayBzdWNjZWVkcyAoaXQgaXMgbm90IGEgdmFsaWQgdGVybSksIHRoZW4gaXQgaXMgYWRkZWQgYW5kIHRoZSB0ZXJtIGlkIGlzIGdpdmVuLiBJZiBpdCBmYWlscywgdGhlbiBhIGNoZWNrIGlzIG1hZGUgdG8gd2hldGhlciB0aGUgdGF4b25vbXkgaXMgaGllcmFyY2hpY2FsIGFuZCB0aGUgcGFyZW50IGFyZ3VtZW50IGlzIG5vdCBlbXB0eS4gSWYgdGhlIHNlY29uZCBjaGVjayBzdWNjZWVkcywgdGhlIHRlcm0gd2lsbCBiZSBpbnNlcnRlZCBhbmQgdGhlIHRlcm0gaWQgd2lsbCBiZSBnaXZlbi4gSWYgdGhlIHNsdWcgYXJndW1lbnQgaXMgZW1wdHksIHRoZW4gaXQgd2lsbCBiZSBjYWxjdWxhdGVkIGZyb20gdGhlIHRlcm0gbmFtZS4gKi9cbiAgc2x1Zz86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIFRoZSBwYXlsb2FkIGZvciB0aGUgdXBkYXRlVGFnIG11dGF0aW9uLiAqL1xuZXhwb3J0IHR5cGUgVXBkYXRlVGFnUGF5bG9hZCA9IHtcbiAgX190eXBlbmFtZT86ICdVcGRhdGVUYWdQYXlsb2FkJztcbiAgLyoqIElmIGEgJiMwMzk7Y2xpZW50TXV0YXRpb25JZCYjMDM5OyBpbnB1dCBpcyBwcm92aWRlZCB0byB0aGUgbXV0YXRpb24sIGl0IHdpbGwgYmUgcmV0dXJuZWQgYXMgb3V0cHV0IG9uIHRoZSBtdXRhdGlvbi4gVGhpcyBJRCBjYW4gYmUgdXNlZCBieSB0aGUgY2xpZW50IHRvIHRyYWNrIHRoZSBwcm9ncmVzcyBvZiBtdXRhdGlvbnMgYW5kIGNhdGNoIHBvc3NpYmxlIGR1cGxpY2F0ZSBtdXRhdGlvbiBzdWJtaXNzaW9ucy4gKi9cbiAgY2xpZW50TXV0YXRpb25JZD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgY3JlYXRlZCBwb3N0X3RhZyAqL1xuICB0YWc/OiBNYXliZTxUYWc+O1xufTtcblxuLyoqIElucHV0IGZvciB0aGUgdXBkYXRlVXNlciBtdXRhdGlvbi4gKi9cbmV4cG9ydCB0eXBlIFVwZGF0ZVVzZXJJbnB1dCA9IHtcbiAgLyoqIFVzZXIncyBBT0wgSU0gYWNjb3VudC4gKi9cbiAgYWltPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGlzIGlzIGFuIElEIHRoYXQgY2FuIGJlIHBhc3NlZCB0byBhIG11dGF0aW9uIGJ5IHRoZSBjbGllbnQgdG8gdHJhY2sgdGhlIHByb2dyZXNzIG9mIG11dGF0aW9ucyBhbmQgY2F0Y2ggcG9zc2libGUgZHVwbGljYXRlIG11dGF0aW9uIHN1Ym1pc3Npb25zLiAqL1xuICBjbGllbnRNdXRhdGlvbklkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBIHN0cmluZyBjb250YWluaW5nIGNvbnRlbnQgYWJvdXQgdGhlIHVzZXIuICovXG4gIGRlc2NyaXB0aW9uPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBIHN0cmluZyB0aGF0IHdpbGwgYmUgc2hvd24gb24gdGhlIHNpdGUuIERlZmF1bHRzIHRvIHVzZXIncyB1c2VybmFtZS4gSXQgaXMgbGlrZWx5IHRoYXQgeW91IHdpbGwgd2FudCB0byBjaGFuZ2UgdGhpcywgZm9yIGJvdGggYXBwZWFyYW5jZSBhbmQgc2VjdXJpdHkgdGhyb3VnaCBvYnNjdXJpdHkgKHRoYXQgaXMgaWYgeW91IGRvbnQgdXNlIGFuZCBkZWxldGUgdGhlIGRlZmF1bHQgYWRtaW4gdXNlcikuICovXG4gIGRpc3BsYXlOYW1lPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBIHN0cmluZyBjb250YWluaW5nIHRoZSB1c2VyJ3MgZW1haWwgYWRkcmVzcy4gKi9cbiAgZW1haWw/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFx0VGhlIHVzZXIncyBmaXJzdCBuYW1lLiAqL1xuICBmaXJzdE5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBJRCBvZiB0aGUgdXNlciAqL1xuICBpZDogU2NhbGFyc1snSUQnXVsnaW5wdXQnXTtcbiAgLyoqIFVzZXIncyBKYWJiZXIgYWNjb3VudC4gKi9cbiAgamFiYmVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBUaGUgdXNlcidzIGxhc3QgbmFtZS4gKi9cbiAgbGFzdE5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFVzZXIncyBsb2NhbGUuICovXG4gIGxvY2FsZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQSBzdHJpbmcgdGhhdCBjb250YWlucyBhIFVSTC1mcmllbmRseSBuYW1lIGZvciB0aGUgdXNlci4gVGhlIGRlZmF1bHQgaXMgdGhlIHVzZXIncyB1c2VybmFtZS4gKi9cbiAgbmljZW5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSB1c2VyJ3Mgbmlja25hbWUsIGRlZmF1bHRzIHRvIHRoZSB1c2VyJ3MgdXNlcm5hbWUuICovXG4gIG5pY2tuYW1lPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBIHN0cmluZyB0aGF0IGNvbnRhaW5zIHRoZSBwbGFpbiB0ZXh0IHBhc3N3b3JkIGZvciB0aGUgdXNlci4gKi9cbiAgcGFzc3dvcmQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFRoZSBkYXRlIHRoZSB1c2VyIHJlZ2lzdGVyZWQuIEZvcm1hdCBpcyBZLW0tZCBIOmk6cy4gKi9cbiAgcmVnaXN0ZXJlZD86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQSBzdHJpbmcgZm9yIHdoZXRoZXIgdG8gZW5hYmxlIHRoZSByaWNoIGVkaXRvciBvciBub3QuIEZhbHNlIGlmIG5vdCBlbXB0eS4gKi9cbiAgcmljaEVkaXRpbmc/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEFuIGFycmF5IG9mIHJvbGVzIHRvIGJlIGFzc2lnbmVkIHRvIHRoZSB1c2VyLiAqL1xuICByb2xlcz86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIHVzZXIncyBVUkwgZm9yIHRoZSB1c2VyJ3Mgd2ViIHNpdGUuICovXG4gIHdlYnNpdGVVcmw/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFVzZXIncyBZYWhvbyBJTSBhY2NvdW50LiAqL1xuICB5aW0/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbn07XG5cbi8qKiBUaGUgcGF5bG9hZCBmb3IgdGhlIHVwZGF0ZVVzZXIgbXV0YXRpb24uICovXG5leHBvcnQgdHlwZSBVcGRhdGVVc2VyUGF5bG9hZCA9IHtcbiAgX190eXBlbmFtZT86ICdVcGRhdGVVc2VyUGF5bG9hZCc7XG4gIC8qKiBJZiBhICYjMDM5O2NsaWVudE11dGF0aW9uSWQmIzAzOTsgaW5wdXQgaXMgcHJvdmlkZWQgdG8gdGhlIG11dGF0aW9uLCBpdCB3aWxsIGJlIHJldHVybmVkIGFzIG91dHB1dCBvbiB0aGUgbXV0YXRpb24uIFRoaXMgSUQgY2FuIGJlIHVzZWQgYnkgdGhlIGNsaWVudCB0byB0cmFjayB0aGUgcHJvZ3Jlc3Mgb2YgbXV0YXRpb25zIGFuZCBjYXRjaCBwb3NzaWJsZSBkdXBsaWNhdGUgbXV0YXRpb24gc3VibWlzc2lvbnMuICovXG4gIGNsaWVudE11dGF0aW9uSWQ/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIFVzZXIgb2JqZWN0IG11dGF0aW9uIHR5cGUuICovXG4gIHVzZXI/OiBNYXliZTxVc2VyPjtcbn07XG5cbi8qKiBBIFVzZXIgb2JqZWN0ICovXG5leHBvcnQgdHlwZSBVc2VyID0gQ29tbWVudGVyICYgRGF0YWJhc2VJZGVudGlmaWVyICYgTm9kZSAmIFVuaWZvcm1SZXNvdXJjZUlkZW50aWZpYWJsZSAmIHtcbiAgX190eXBlbmFtZT86ICdVc2VyJztcbiAgLyoqIEF2YXRhciBvYmplY3QgZm9yIHVzZXIuIFRoZSBhdmF0YXIgb2JqZWN0IGNhbiBiZSByZXRyaWV2ZWQgaW4gZGlmZmVyZW50IHNpemVzIGJ5IHNwZWNpZnlpbmcgdGhlIHNpemUgYXJndW1lbnQuICovXG4gIGF2YXRhcj86IE1heWJlPEF2YXRhcj47XG4gIC8qKiBVc2VyIG1ldGFkYXRhIG9wdGlvbiBuYW1lLiBVc3VhbGx5IGl0IHdpbGwgYmUgJnF1b3Q7d3BfY2FwYWJpbGl0aWVzJnF1b3Q7LiAqL1xuICBjYXBLZXk/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogQSBsaXN0IG9mIGNhcGFiaWxpdGllcyAocGVybWlzc2lvbnMpIGdyYW50ZWQgdG8gdGhlIHVzZXIgKi9cbiAgY2FwYWJpbGl0aWVzPzogTWF5YmU8QXJyYXk8TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPj4+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBVc2VyIHR5cGUgYW5kIHRoZSBDb21tZW50IHR5cGUgKi9cbiAgY29tbWVudHM/OiBNYXliZTxVc2VyVG9Db21tZW50Q29ubmVjdGlvbj47XG4gIC8qKiBJZGVudGlmaWVzIHRoZSBwcmltYXJ5IGtleSBmcm9tIHRoZSBkYXRhYmFzZS4gKi9cbiAgZGF0YWJhc2VJZDogU2NhbGFyc1snSW50J11bJ291dHB1dCddO1xuICAvKiogRGVzY3JpcHRpb24gb2YgdGhlIHVzZXIuICovXG4gIGRlc2NyaXB0aW9uPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIEVtYWlsIGFkZHJlc3Mgb2YgdGhlIHVzZXIuIFRoaXMgaXMgZXF1aXZhbGVudCB0byB0aGUgV1BfVXNlci0mZ3Q7dXNlcl9lbWFpbCBwcm9wZXJ0eS4gKi9cbiAgZW1haWw/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBVc2VyIHR5cGUgYW5kIHRoZSBFbnF1ZXVlZFNjcmlwdCB0eXBlICovXG4gIGVucXVldWVkU2NyaXB0cz86IE1heWJlPFVzZXJUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvbj47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFVzZXIgdHlwZSBhbmQgdGhlIEVucXVldWVkU3R5bGVzaGVldCB0eXBlICovXG4gIGVucXVldWVkU3R5bGVzaGVldHM/OiBNYXliZTxVc2VyVG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uPjtcbiAgLyoqIEEgY29tcGxldGUgbGlzdCBvZiBjYXBhYmlsaXRpZXMgaW5jbHVkaW5nIGNhcGFiaWxpdGllcyBpbmhlcml0ZWQgZnJvbSBhIHJvbGUuIFRoaXMgaXMgZXF1aXZhbGVudCB0byB0aGUgYXJyYXkga2V5cyBvZiBXUF9Vc2VyLSZndDthbGxjYXBzLiAqL1xuICBleHRyYUNhcGFiaWxpdGllcz86IE1heWJlPEFycmF5PE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT4+PjtcbiAgLyoqIEZpcnN0IG5hbWUgb2YgdGhlIHVzZXIuIFRoaXMgaXMgZXF1aXZhbGVudCB0byB0aGUgV1BfVXNlci0mZ3Q7dXNlcl9maXJzdF9uYW1lIHByb3BlcnR5LiAqL1xuICBmaXJzdE5hbWU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgdXNlciBvYmplY3QuICovXG4gIGlkOiBTY2FsYXJzWydJRCddWydvdXRwdXQnXTtcbiAgLyoqIFdoZXRoZXIgdGhlIG5vZGUgaXMgYSBDb250ZW50IE5vZGUgKi9cbiAgaXNDb250ZW50Tm9kZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZXRoZXIgdGhlIG9iamVjdCBpcyByZXN0cmljdGVkIGZyb20gdGhlIGN1cnJlbnQgdmlld2VyICovXG4gIGlzUmVzdHJpY3RlZD86IE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J10+O1xuICAvKiogV2hldGhlciB0aGUgbm9kZSBpcyBhIFRlcm0gKi9cbiAgaXNUZXJtTm9kZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIExhc3QgbmFtZSBvZiB0aGUgdXNlci4gVGhpcyBpcyBlcXVpdmFsZW50IHRvIHRoZSBXUF9Vc2VyLSZndDt1c2VyX2xhc3RfbmFtZSBwcm9wZXJ0eS4gKi9cbiAgbGFzdE5hbWU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIHByZWZlcnJlZCBsYW5ndWFnZSBsb2NhbGUgc2V0IGZvciB0aGUgdXNlci4gVmFsdWUgZGVyaXZlZCBmcm9tIGdldF91c2VyX2xvY2FsZSgpLiAqL1xuICBsb2NhbGU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBVc2VyIHR5cGUgYW5kIHRoZSBtZWRpYUl0ZW0gdHlwZSAqL1xuICBtZWRpYUl0ZW1zPzogTWF5YmU8VXNlclRvTWVkaWFJdGVtQ29ubmVjdGlvbj47XG4gIC8qKiBEaXNwbGF5IG5hbWUgb2YgdGhlIHVzZXIuIFRoaXMgaXMgZXF1aXZhbGVudCB0byB0aGUgV1BfVXNlci0mZ3Q7ZGlzcGxheV9uYW1lIHByb3BlcnR5LiAqL1xuICBuYW1lPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBuaWNlbmFtZSBmb3IgdGhlIHVzZXIuIFRoaXMgZmllbGQgaXMgZXF1aXZhbGVudCB0byBXUF9Vc2VyLSZndDt1c2VyX25pY2VuYW1lICovXG4gIG5pY2VuYW1lPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIE5pY2tuYW1lIG9mIHRoZSB1c2VyLiAqL1xuICBuaWNrbmFtZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFVzZXIgdHlwZSBhbmQgdGhlIHBhZ2UgdHlwZSAqL1xuICBwYWdlcz86IE1heWJlPFVzZXJUb1BhZ2VDb25uZWN0aW9uPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgVXNlciB0eXBlIGFuZCB0aGUgcG9zdCB0eXBlICovXG4gIHBvc3RzPzogTWF5YmU8VXNlclRvUG9zdENvbm5lY3Rpb24+O1xuICAvKiogVGhlIGRhdGUgdGhlIHVzZXIgcmVnaXN0ZXJlZCBvciB3YXMgY3JlYXRlZC4gVGhlIGZpZWxkIGZvbGxvd3MgYSBmdWxsIElTTzg2MDEgZGF0ZSBzdHJpbmcgZm9ybWF0LiAqL1xuICByZWdpc3RlcmVkRGF0ZT86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFVzZXIgYW5kIFJldmlzaW9ucyBhdXRob3JlZCBieSB0aGUgdXNlciAqL1xuICByZXZpc2lvbnM/OiBNYXliZTxVc2VyVG9SZXZpc2lvbnNDb25uZWN0aW9uPjtcbiAgLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgVXNlciB0eXBlIGFuZCB0aGUgVXNlclJvbGUgdHlwZSAqL1xuICByb2xlcz86IE1heWJlPFVzZXJUb1VzZXJSb2xlQ29ubmVjdGlvbj47XG4gIC8qKiBXaGV0aGVyIHRoZSBUb29sYmFyIHNob3VsZCBiZSBkaXNwbGF5ZWQgd2hlbiB0aGUgdXNlciBpcyB2aWV3aW5nIHRoZSBzaXRlLiAqL1xuICBzaG91bGRTaG93QWRtaW5Ub29sYmFyPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgc2x1ZyBmb3IgdGhlIHVzZXIuIFRoaXMgZmllbGQgaXMgZXF1aXZhbGVudCB0byBXUF9Vc2VyLSZndDt1c2VyX25pY2VuYW1lICovXG4gIHNsdWc/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIHVuaXF1ZSByZXNvdXJjZSBpZGVudGlmaWVyIHBhdGggKi9cbiAgdXJpPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIEEgd2Vic2l0ZSB1cmwgdGhhdCBpcyBhc3NvY2lhdGVkIHdpdGggdGhlIHVzZXIuICovXG4gIHVybD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKlxuICAgKiBUaGUgSWQgb2YgdGhlIHVzZXIuIEVxdWl2YWxlbnQgdG8gV1BfVXNlci0mZ3Q7SURcbiAgICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgZGF0YWJhc2VJZCBmaWVsZFxuICAgKi9cbiAgdXNlcklkPzogTWF5YmU8U2NhbGFyc1snSW50J11bJ291dHB1dCddPjtcbiAgLyoqIFVzZXJuYW1lIGZvciB0aGUgdXNlci4gVGhpcyBmaWVsZCBpcyBlcXVpdmFsZW50IHRvIFdQX1VzZXItJmd0O3VzZXJfbG9naW4uICovXG4gIHVzZXJuYW1lPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cblxuLyoqIEEgVXNlciBvYmplY3QgKi9cbmV4cG9ydCB0eXBlIFVzZXJBdmF0YXJBcmdzID0ge1xuICBmb3JjZURlZmF1bHQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIHJhdGluZz86IElucHV0TWF5YmU8QXZhdGFyUmF0aW5nRW51bT47XG4gIHNpemU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbn07XG5cblxuLyoqIEEgVXNlciBvYmplY3QgKi9cbmV4cG9ydCB0eXBlIFVzZXJDb21tZW50c0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIHdoZXJlPzogSW5wdXRNYXliZTxVc2VyVG9Db21tZW50Q29ubmVjdGlvbldoZXJlQXJncz47XG59O1xuXG5cbi8qKiBBIFVzZXIgb2JqZWN0ICovXG5leHBvcnQgdHlwZSBVc2VyRW5xdWV1ZWRTY3JpcHRzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbn07XG5cblxuLyoqIEEgVXNlciBvYmplY3QgKi9cbmV4cG9ydCB0eXBlIFVzZXJFbnF1ZXVlZFN0eWxlc2hlZXRzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbn07XG5cblxuLyoqIEEgVXNlciBvYmplY3QgKi9cbmV4cG9ydCB0eXBlIFVzZXJNZWRpYUl0ZW1zQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPFVzZXJUb01lZGlhSXRlbUNvbm5lY3Rpb25XaGVyZUFyZ3M+O1xufTtcblxuXG4vKiogQSBVc2VyIG9iamVjdCAqL1xuZXhwb3J0IHR5cGUgVXNlclBhZ2VzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPFVzZXJUb1BhZ2VDb25uZWN0aW9uV2hlcmVBcmdzPjtcbn07XG5cblxuLyoqIEEgVXNlciBvYmplY3QgKi9cbmV4cG9ydCB0eXBlIFVzZXJQb3N0c0FyZ3MgPSB7XG4gIGFmdGVyPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGJlZm9yZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICBmaXJzdD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICBsYXN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIHdoZXJlPzogSW5wdXRNYXliZTxVc2VyVG9Qb3N0Q29ubmVjdGlvbldoZXJlQXJncz47XG59O1xuXG5cbi8qKiBBIFVzZXIgb2JqZWN0ICovXG5leHBvcnQgdHlwZSBVc2VyUmV2aXNpb25zQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgd2hlcmU/OiBJbnB1dE1heWJlPFVzZXJUb1JldmlzaW9uc0Nvbm5lY3Rpb25XaGVyZUFyZ3M+O1xufTtcblxuXG4vKiogQSBVc2VyIG9iamVjdCAqL1xuZXhwb3J0IHR5cGUgVXNlclJvbGVzQXJncyA9IHtcbiAgYWZ0ZXI/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgYmVmb3JlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIGZpcnN0PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIGxhc3Q/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIHRvIFVzZXIgTm9kZXMgKi9cbmV4cG9ydCB0eXBlIFVzZXJDb25uZWN0aW9uID0ge1xuICAvKiogQSBsaXN0IG9mIGVkZ2VzIChyZWxhdGlvbmFsIGNvbnRleHQpIGJldHdlZW4gUm9vdFF1ZXJ5IGFuZCBjb25uZWN0ZWQgVXNlciBOb2RlcyAqL1xuICBlZGdlczogQXJyYXk8VXNlckNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIEEgbGlzdCBvZiBjb25uZWN0ZWQgVXNlciBOb2RlcyAqL1xuICBub2RlczogQXJyYXk8VXNlcj47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFVzZXJDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogRWRnZSBiZXR3ZWVuIGEgTm9kZSBhbmQgYSBjb25uZWN0ZWQgVXNlciAqL1xuZXhwb3J0IHR5cGUgVXNlckNvbm5lY3Rpb25FZGdlID0ge1xuICAvKiogT3BhcXVlIHJlZmVyZW5jZSB0byB0aGUgbm9kZXMgcG9zaXRpb24gaW4gdGhlIGNvbm5lY3Rpb24uIFZhbHVlIGNhbiBiZSB1c2VkIHdpdGggcGFnaW5hdGlvbiBhcmdzLiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGNvbm5lY3RlZCBVc2VyIE5vZGUgKi9cbiAgbm9kZTogVXNlcjtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlIGNvbm5lY3RlZCBVc2VyQ29ubmVjdGlvbkVkZ2UgKi9cbmV4cG9ydCB0eXBlIFVzZXJDb25uZWN0aW9uUGFnZUluZm8gPSB7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogVGhlIFR5cGUgb2YgSWRlbnRpZmllciB1c2VkIHRvIGZldGNoIGEgc2luZ2xlIFVzZXIgbm9kZS4gVG8gYmUgdXNlZCBhbG9uZyB3aXRoIHRoZSBcImlkXCIgZmllbGQuIERlZmF1bHQgaXMgXCJJRFwiLiAqL1xuZXhwb3J0IGVudW0gVXNlck5vZGVJZFR5cGVFbnVtIHtcbiAgLyoqIFRoZSBEYXRhYmFzZSBJRCBmb3IgdGhlIG5vZGUgKi9cbiAgRGF0YWJhc2VJZCA9ICdEQVRBQkFTRV9JRCcsXG4gIC8qKiBUaGUgRW1haWwgb2YgdGhlIFVzZXIgKi9cbiAgRW1haWwgPSAnRU1BSUwnLFxuICAvKiogVGhlIGhhc2hlZCBHbG9iYWwgSUQgKi9cbiAgSWQgPSAnSUQnLFxuICAvKiogVGhlIHNsdWcgb2YgdGhlIFVzZXIgKi9cbiAgU2x1ZyA9ICdTTFVHJyxcbiAgLyoqIFRoZSBVUkkgZm9yIHRoZSBub2RlICovXG4gIFVyaSA9ICdVUkknLFxuICAvKiogVGhlIHVzZXJuYW1lIHRoZSBVc2VyIHVzZXMgdG8gbG9naW4gd2l0aCAqL1xuICBVc2VybmFtZSA9ICdVU0VSTkFNRSdcbn1cblxuLyoqIEEgdXNlciByb2xlIG9iamVjdCAqL1xuZXhwb3J0IHR5cGUgVXNlclJvbGUgPSBOb2RlICYge1xuICBfX3R5cGVuYW1lPzogJ1VzZXJSb2xlJztcbiAgLyoqIFRoZSBjYXBhYmlsaXRpZXMgdGhhdCBiZWxvbmcgdG8gdGhpcyByb2xlICovXG4gIGNhcGFiaWxpdGllcz86IE1heWJlPEFycmF5PE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT4+PjtcbiAgLyoqIFRoZSBkaXNwbGF5IG5hbWUgb2YgdGhlIHJvbGUgKi9cbiAgZGlzcGxheU5hbWU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgdXNlciByb2xlIG9iamVjdC4gKi9cbiAgaWQ6IFNjYWxhcnNbJ0lEJ11bJ291dHB1dCddO1xuICAvKiogV2hldGhlciB0aGUgb2JqZWN0IGlzIHJlc3RyaWN0ZWQgZnJvbSB0aGUgY3VycmVudCB2aWV3ZXIgKi9cbiAgaXNSZXN0cmljdGVkPzogTWF5YmU8U2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgcmVnaXN0ZXJlZCBuYW1lIG9mIHRoZSByb2xlICovXG4gIG5hbWU/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gdG8gVXNlclJvbGUgTm9kZXMgKi9cbmV4cG9ydCB0eXBlIFVzZXJSb2xlQ29ubmVjdGlvbiA9IHtcbiAgLyoqIEEgbGlzdCBvZiBlZGdlcyAocmVsYXRpb25hbCBjb250ZXh0KSBiZXR3ZWVuIFJvb3RRdWVyeSBhbmQgY29ubmVjdGVkIFVzZXJSb2xlIE5vZGVzICovXG4gIGVkZ2VzOiBBcnJheTxVc2VyUm9sZUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIEEgbGlzdCBvZiBjb25uZWN0ZWQgVXNlclJvbGUgTm9kZXMgKi9cbiAgbm9kZXM6IEFycmF5PFVzZXJSb2xlPjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogVXNlclJvbGVDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogRWRnZSBiZXR3ZWVuIGEgTm9kZSBhbmQgYSBjb25uZWN0ZWQgVXNlclJvbGUgKi9cbmV4cG9ydCB0eXBlIFVzZXJSb2xlQ29ubmVjdGlvbkVkZ2UgPSB7XG4gIC8qKiBPcGFxdWUgcmVmZXJlbmNlIHRvIHRoZSBub2RlcyBwb3NpdGlvbiBpbiB0aGUgY29ubmVjdGlvbi4gVmFsdWUgY2FuIGJlIHVzZWQgd2l0aCBwYWdpbmF0aW9uIGFyZ3MuICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgY29ubmVjdGVkIFVzZXJSb2xlIE5vZGUgKi9cbiAgbm9kZTogVXNlclJvbGU7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSBjb25uZWN0ZWQgVXNlclJvbGVDb25uZWN0aW9uRWRnZSAqL1xuZXhwb3J0IHR5cGUgVXNlclJvbGVDb25uZWN0aW9uUGFnZUluZm8gPSB7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogTmFtZXMgb2YgYXZhaWxhYmxlIHVzZXIgcm9sZXMgKi9cbmV4cG9ydCBlbnVtIFVzZXJSb2xlRW51bSB7XG4gIC8qKiBVc2VyIHJvbGUgd2l0aCBzcGVjaWZpYyBjYXBhYmlsaXRpZXMgKi9cbiAgQWRtaW5pc3RyYXRvciA9ICdBRE1JTklTVFJBVE9SJyxcbiAgLyoqIFVzZXIgcm9sZSB3aXRoIHNwZWNpZmljIGNhcGFiaWxpdGllcyAqL1xuICBBdXRob3IgPSAnQVVUSE9SJyxcbiAgLyoqIFVzZXIgcm9sZSB3aXRoIHNwZWNpZmljIGNhcGFiaWxpdGllcyAqL1xuICBDYW1wYWlnbk1hbmFnZXIgPSAnQ0FNUEFJR05fTUFOQUdFUicsXG4gIC8qKiBVc2VyIHJvbGUgd2l0aCBzcGVjaWZpYyBjYXBhYmlsaXRpZXMgKi9cbiAgQ29udHJpYnV0b3IgPSAnQ09OVFJJQlVUT1InLFxuICAvKiogVXNlciByb2xlIHdpdGggc3BlY2lmaWMgY2FwYWJpbGl0aWVzICovXG4gIEN1c3RvbWVyID0gJ0NVU1RPTUVSJyxcbiAgLyoqIFVzZXIgcm9sZSB3aXRoIHNwZWNpZmljIGNhcGFiaWxpdGllcyAqL1xuICBEb25vciA9ICdET05PUicsXG4gIC8qKiBVc2VyIHJvbGUgd2l0aCBzcGVjaWZpYyBjYXBhYmlsaXRpZXMgKi9cbiAgRWRpdG9yID0gJ0VESVRPUicsXG4gIC8qKiBVc2VyIHJvbGUgd2l0aCBzcGVjaWZpYyBjYXBhYmlsaXRpZXMgKi9cbiAgU2VvRWRpdG9yID0gJ1NFT19FRElUT1InLFxuICAvKiogVXNlciByb2xlIHdpdGggc3BlY2lmaWMgY2FwYWJpbGl0aWVzICovXG4gIFNlb01hbmFnZXIgPSAnU0VPX01BTkFHRVInLFxuICAvKiogVXNlciByb2xlIHdpdGggc3BlY2lmaWMgY2FwYWJpbGl0aWVzICovXG4gIFNob3BNYW5hZ2VyID0gJ1NIT1BfTUFOQUdFUicsXG4gIC8qKiBVc2VyIHJvbGUgd2l0aCBzcGVjaWZpYyBjYXBhYmlsaXRpZXMgKi9cbiAgU3Vic2NyaWJlciA9ICdTVUJTQ1JJQkVSJyxcbiAgLyoqIFVzZXIgcm9sZSB3aXRoIHNwZWNpZmljIGNhcGFiaWxpdGllcyAqL1xuICBXZWJEZXNpZ25lciA9ICdXRUJfREVTSUdORVInXG59XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFVzZXIgdHlwZSBhbmQgdGhlIENvbW1lbnQgdHlwZSAqL1xuZXhwb3J0IHR5cGUgVXNlclRvQ29tbWVudENvbm5lY3Rpb24gPSBDb21tZW50Q29ubmVjdGlvbiAmIENvbm5lY3Rpb24gJiB7XG4gIF9fdHlwZW5hbWU/OiAnVXNlclRvQ29tbWVudENvbm5lY3Rpb24nO1xuICAvKiogRWRnZXMgZm9yIHRoZSBVc2VyVG9Db21tZW50Q29ubmVjdGlvbiBjb25uZWN0aW9uICovXG4gIGVkZ2VzOiBBcnJheTxVc2VyVG9Db21tZW50Q29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIG5vZGVzIG9mIHRoZSBjb25uZWN0aW9uLCB3aXRob3V0IHRoZSBlZGdlcyAqL1xuICBub2RlczogQXJyYXk8Q29tbWVudD47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFVzZXJUb0NvbW1lbnRDb25uZWN0aW9uUGFnZUluZm87XG59O1xuXG4vKiogQW4gZWRnZSBpbiBhIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFVzZXJUb0NvbW1lbnRDb25uZWN0aW9uRWRnZSA9IENvbW1lbnRDb25uZWN0aW9uRWRnZSAmIEVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnVXNlclRvQ29tbWVudENvbm5lY3Rpb25FZGdlJztcbiAgLyoqIEEgY3Vyc29yIGZvciB1c2UgaW4gcGFnaW5hdGlvbiAqL1xuICBjdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogVGhlIGl0ZW0gYXQgdGhlIGVuZCBvZiB0aGUgZWRnZSAqL1xuICBub2RlOiBDb21tZW50O1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgJnF1b3Q7VXNlclRvQ29tbWVudENvbm5lY3Rpb24mcXVvdDsgKi9cbmV4cG9ydCB0eXBlIFVzZXJUb0NvbW1lbnRDb25uZWN0aW9uUGFnZUluZm8gPSBDb21tZW50Q29ubmVjdGlvblBhZ2VJbmZvICYgUGFnZUluZm8gJiBXcFBhZ2VJbmZvICYge1xuICBfX3R5cGVuYW1lPzogJ1VzZXJUb0NvbW1lbnRDb25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIEFyZ3VtZW50cyBmb3IgZmlsdGVyaW5nIHRoZSBVc2VyVG9Db21tZW50Q29ubmVjdGlvbiBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBVc2VyVG9Db21tZW50Q29ubmVjdGlvbldoZXJlQXJncyA9IHtcbiAgLyoqIENvbW1lbnQgYXV0aG9yIGVtYWlsIGFkZHJlc3MuICovXG4gIGF1dGhvckVtYWlsPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBhdXRob3IgSURzIHRvIGluY2x1ZGUgY29tbWVudHMgZm9yLiAqL1xuICBhdXRob3JJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgYXV0aG9yIElEcyB0byBleGNsdWRlIGNvbW1lbnRzIGZvci4gKi9cbiAgYXV0aG9yTm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIENvbW1lbnQgYXV0aG9yIFVSTC4gKi9cbiAgYXV0aG9yVXJsPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBjb21tZW50IElEcyB0byBpbmNsdWRlLiAqL1xuICBjb21tZW50SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIElEcyBvZiB1c2VycyB3aG9zZSB1bmFwcHJvdmVkIGNvbW1lbnRzIHdpbGwgYmUgcmV0dXJuZWQgYnkgdGhlIHF1ZXJ5IHJlZ2FyZGxlc3Mgb2Ygc3RhdHVzLiAqL1xuICBjb21tZW50Tm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEluY2x1ZGUgY29tbWVudHMgb2YgYSBnaXZlbiB0eXBlLiAqL1xuICBjb21tZW50VHlwZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogSW5jbHVkZSBjb21tZW50cyBmcm9tIGEgZ2l2ZW4gYXJyYXkgb2YgY29tbWVudCB0eXBlcy4gKi9cbiAgY29tbWVudFR5cGVJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEV4Y2x1ZGUgY29tbWVudHMgZnJvbSBhIGdpdmVuIGFycmF5IG9mIGNvbW1lbnQgdHlwZXMuICovXG4gIGNvbW1lbnRUeXBlTm90SW4/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIENvbnRlbnQgb2JqZWN0IGF1dGhvciBJRCB0byBsaW1pdCByZXN1bHRzIGJ5LiAqL1xuICBjb250ZW50QXV0aG9yPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBhdXRob3IgSURzIHRvIHJldHJpZXZlIGNvbW1lbnRzIGZvci4gKi9cbiAgY29udGVudEF1dGhvckluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBhdXRob3IgSURzICpub3QqIHRvIHJldHJpZXZlIGNvbW1lbnRzIGZvci4gKi9cbiAgY29udGVudEF1dGhvck5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBMaW1pdCByZXN1bHRzIHRvIHRob3NlIGFmZmlsaWF0ZWQgd2l0aCBhIGdpdmVuIGNvbnRlbnQgb2JqZWN0IElELiAqL1xuICBjb250ZW50SWQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgY29udGVudCBvYmplY3QgSURzIHRvIGluY2x1ZGUgYWZmaWxpYXRlZCBjb21tZW50cyBmb3IuICovXG4gIGNvbnRlbnRJZEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBjb250ZW50IG9iamVjdCBJRHMgdG8gZXhjbHVkZSBhZmZpbGlhdGVkIGNvbW1lbnRzIGZvci4gKi9cbiAgY29udGVudElkTm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIENvbnRlbnQgb2JqZWN0IG5hbWUgKGkuZS4gc2x1ZyApIHRvIHJldHJpZXZlIGFmZmlsaWF0ZWQgY29tbWVudHMgZm9yLiAqL1xuICBjb250ZW50TmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQ29udGVudCBPYmplY3QgcGFyZW50IElEIHRvIHJldHJpZXZlIGFmZmlsaWF0ZWQgY29tbWVudHMgZm9yLiAqL1xuICBjb250ZW50UGFyZW50PzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBjb250ZW50IG9iamVjdCBzdGF0dXNlcyB0byByZXRyaWV2ZSBhZmZpbGlhdGVkIGNvbW1lbnRzIGZvci4gUGFzcyAnYW55JyB0byBtYXRjaCBhbnkgdmFsdWUuICovXG4gIGNvbnRlbnRTdGF0dXM/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+Pj47XG4gIC8qKiBDb250ZW50IG9iamVjdCB0eXBlIG9yIGFycmF5IG9mIHR5cGVzIHRvIHJldHJpZXZlIGFmZmlsaWF0ZWQgY29tbWVudHMgZm9yLiBQYXNzICdhbnknIHRvIG1hdGNoIGFueSB2YWx1ZS4gKi9cbiAgY29udGVudFR5cGU/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8Q29udGVudFR5cGVFbnVtPj4+O1xuICAvKiogQXJyYXkgb2YgSURzIG9yIGVtYWlsIGFkZHJlc3NlcyBvZiB1c2VycyB3aG9zZSB1bmFwcHJvdmVkIGNvbW1lbnRzIHdpbGwgYmUgcmV0dXJuZWQgYnkgdGhlIHF1ZXJ5IHJlZ2FyZGxlc3Mgb2YgJHN0YXR1cy4gRGVmYXVsdCBlbXB0eSAqL1xuICBpbmNsdWRlVW5hcHByb3ZlZD86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogS2FybWEgc2NvcmUgdG8gcmV0cmlldmUgbWF0Y2hpbmcgY29tbWVudHMgZm9yLiAqL1xuICBrYXJtYT86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogVGhlIGNhcmRpbmFsaXR5IG9mIHRoZSBvcmRlciBvZiB0aGUgY29ubmVjdGlvbiAqL1xuICBvcmRlcj86IElucHV0TWF5YmU8T3JkZXJFbnVtPjtcbiAgLyoqIEZpZWxkIHRvIG9yZGVyIHRoZSBjb21tZW50cyBieS4gKi9cbiAgb3JkZXJieT86IElucHV0TWF5YmU8Q29tbWVudHNDb25uZWN0aW9uT3JkZXJieUVudW0+O1xuICAvKiogUGFyZW50IElEIG9mIGNvbW1lbnQgdG8gcmV0cmlldmUgY2hpbGRyZW4gb2YuICovXG4gIHBhcmVudD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgcGFyZW50IElEcyBvZiBjb21tZW50cyB0byByZXRyaWV2ZSBjaGlsZHJlbiBmb3IuICovXG4gIHBhcmVudEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiBwYXJlbnQgSURzIG9mIGNvbW1lbnRzICpub3QqIHRvIHJldHJpZXZlIGNoaWxkcmVuIGZvci4gKi9cbiAgcGFyZW50Tm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNlYXJjaCB0ZXJtKHMpIHRvIHJldHJpZXZlIG1hdGNoaW5nIGNvbW1lbnRzIGZvci4gKi9cbiAgc2VhcmNoPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBDb21tZW50IHN0YXR1cyB0byBsaW1pdCByZXN1bHRzIGJ5LiAqL1xuICBzdGF0dXM/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEluY2x1ZGUgY29tbWVudHMgZm9yIGEgc3BlY2lmaWMgdXNlciBJRC4gKi9cbiAgdXNlcklkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFVzZXIgdHlwZSBhbmQgdGhlIEVucXVldWVkU2NyaXB0IHR5cGUgKi9cbmV4cG9ydCB0eXBlIFVzZXJUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvbiA9IENvbm5lY3Rpb24gJiBFbnF1ZXVlZFNjcmlwdENvbm5lY3Rpb24gJiB7XG4gIF9fdHlwZW5hbWU/OiAnVXNlclRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uJztcbiAgLyoqIEVkZ2VzIGZvciB0aGUgVXNlclRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbiAgZWRnZXM6IEFycmF5PFVzZXJUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIG5vZGVzIG9mIHRoZSBjb25uZWN0aW9uLCB3aXRob3V0IHRoZSBlZGdlcyAqL1xuICBub2RlczogQXJyYXk8RW5xdWV1ZWRTY3JpcHQ+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBVc2VyVG9FbnF1ZXVlZFNjcmlwdENvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBBbiBlZGdlIGluIGEgY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgVXNlclRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uRWRnZSA9IEVkZ2UgJiBFbnF1ZXVlZFNjcmlwdENvbm5lY3Rpb25FZGdlICYge1xuICBfX3R5cGVuYW1lPzogJ1VzZXJUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvbkVkZ2UnO1xuICAvKiogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaXRlbSBhdCB0aGUgZW5kIG9mIHRoZSBlZGdlICovXG4gIG5vZGU6IEVucXVldWVkU2NyaXB0O1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgJnF1b3Q7VXNlclRvRW5xdWV1ZWRTY3JpcHRDb25uZWN0aW9uJnF1b3Q7ICovXG5leHBvcnQgdHlwZSBVc2VyVG9FbnF1ZXVlZFNjcmlwdENvbm5lY3Rpb25QYWdlSW5mbyA9IEVucXVldWVkU2NyaXB0Q29ubmVjdGlvblBhZ2VJbmZvICYgUGFnZUluZm8gJiBXcFBhZ2VJbmZvICYge1xuICBfX3R5cGVuYW1lPzogJ1VzZXJUb0VucXVldWVkU2NyaXB0Q29ubmVjdGlvblBhZ2VJbmZvJztcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBDb25uZWN0aW9uIGJldHdlZW4gdGhlIFVzZXIgdHlwZSBhbmQgdGhlIEVucXVldWVkU3R5bGVzaGVldCB0eXBlICovXG5leHBvcnQgdHlwZSBVc2VyVG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIEVucXVldWVkU3R5bGVzaGVldENvbm5lY3Rpb24gJiB7XG4gIF9fdHlwZW5hbWU/OiAnVXNlclRvRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvbic7XG4gIC8qKiBFZGdlcyBmb3IgdGhlIFVzZXJUb0VucXVldWVkU3R5bGVzaGVldENvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8VXNlclRvRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvbkVkZ2U+O1xuICAvKiogVGhlIG5vZGVzIG9mIHRoZSBjb25uZWN0aW9uLCB3aXRob3V0IHRoZSBlZGdlcyAqL1xuICBub2RlczogQXJyYXk8RW5xdWV1ZWRTdHlsZXNoZWV0PjtcbiAgLyoqIEluZm9ybWF0aW9uIGFib3V0IHBhZ2luYXRpb24gaW4gYSBjb25uZWN0aW9uLiAqL1xuICBwYWdlSW5mbzogVXNlclRvRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEFuIGVkZ2UgaW4gYSBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBVc2VyVG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uRWRnZSA9IEVkZ2UgJiBFbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdVc2VyVG9FbnF1ZXVlZFN0eWxlc2hlZXRDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogRW5xdWV1ZWRTdHlsZXNoZWV0O1xufTtcblxuLyoqIFBhZ2UgSW5mbyBvbiB0aGUgJnF1b3Q7VXNlclRvRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvbiZxdW90OyAqL1xuZXhwb3J0IHR5cGUgVXNlclRvRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvblBhZ2VJbmZvID0gRW5xdWV1ZWRTdHlsZXNoZWV0Q29ubmVjdGlvblBhZ2VJbmZvICYgUGFnZUluZm8gJiBXcFBhZ2VJbmZvICYge1xuICBfX3R5cGVuYW1lPzogJ1VzZXJUb0VucXVldWVkU3R5bGVzaGVldENvbm5lY3Rpb25QYWdlSW5mbyc7XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIGVuZEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgZm9yd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNOZXh0UGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIGFyZSB0aGVyZSBtb3JlIGl0ZW1zPyAqL1xuICBoYXNQcmV2aW91c1BhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBzdGFydEN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBVc2VyIHR5cGUgYW5kIHRoZSBtZWRpYUl0ZW0gdHlwZSAqL1xuZXhwb3J0IHR5cGUgVXNlclRvTWVkaWFJdGVtQ29ubmVjdGlvbiA9IENvbm5lY3Rpb24gJiBNZWRpYUl0ZW1Db25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ1VzZXJUb01lZGlhSXRlbUNvbm5lY3Rpb24nO1xuICAvKiogRWRnZXMgZm9yIHRoZSBVc2VyVG9NZWRpYUl0ZW1Db25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbiAgZWRnZXM6IEFycmF5PFVzZXJUb01lZGlhSXRlbUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBub2RlcyBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZXM6IEFycmF5PE1lZGlhSXRlbT47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFVzZXJUb01lZGlhSXRlbUNvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBBbiBlZGdlIGluIGEgY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgVXNlclRvTWVkaWFJdGVtQ29ubmVjdGlvbkVkZ2UgPSBFZGdlICYgTWVkaWFJdGVtQ29ubmVjdGlvbkVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnVXNlclRvTWVkaWFJdGVtQ29ubmVjdGlvbkVkZ2UnO1xuICAvKiogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uICovXG4gIGN1cnNvcj86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBUaGUgaXRlbSBhdCB0aGUgZW5kIG9mIHRoZSBlZGdlICovXG4gIG5vZGU6IE1lZGlhSXRlbTtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlICZxdW90O1VzZXJUb01lZGlhSXRlbUNvbm5lY3Rpb24mcXVvdDsgKi9cbmV4cG9ydCB0eXBlIFVzZXJUb01lZGlhSXRlbUNvbm5lY3Rpb25QYWdlSW5mbyA9IE1lZGlhSXRlbUNvbm5lY3Rpb25QYWdlSW5mbyAmIFBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdVc2VyVG9NZWRpYUl0ZW1Db25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIEFyZ3VtZW50cyBmb3IgZmlsdGVyaW5nIHRoZSBVc2VyVG9NZWRpYUl0ZW1Db25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFVzZXJUb01lZGlhSXRlbUNvbm5lY3Rpb25XaGVyZUFyZ3MgPSB7XG4gIC8qKiBUaGUgdXNlciB0aGF0J3MgY29ubmVjdGVkIGFzIHRoZSBhdXRob3Igb2YgdGhlIG9iamVjdC4gVXNlIHRoZSB1c2VySWQgZm9yIHRoZSBhdXRob3Igb2JqZWN0LiAqL1xuICBhdXRob3I/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIEZpbmQgb2JqZWN0cyBjb25uZWN0ZWQgdG8gYXV0aG9yKHMpIGluIHRoZSBhcnJheSBvZiBhdXRob3IncyB1c2VySWRzICovXG4gIGF1dGhvckluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBGaW5kIG9iamVjdHMgY29ubmVjdGVkIHRvIHRoZSBhdXRob3IgYnkgdGhlIGF1dGhvcidzIG5pY2VuYW1lICovXG4gIGF1dGhvck5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEZpbmQgb2JqZWN0cyBOT1QgY29ubmVjdGVkIHRvIGF1dGhvcihzKSBpbiB0aGUgYXJyYXkgb2YgYXV0aG9yJ3MgdXNlcklkcyAqL1xuICBhdXRob3JOb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogRmlsdGVyIHRoZSBjb25uZWN0aW9uIGJhc2VkIG9uIGRhdGVzICovXG4gIGRhdGVRdWVyeT86IElucHV0TWF5YmU8RGF0ZVF1ZXJ5SW5wdXQ+O1xuICAvKiogVHJ1ZSBmb3Igb2JqZWN0cyB3aXRoIHBhc3N3b3JkczsgRmFsc2UgZm9yIG9iamVjdHMgd2l0aG91dCBwYXNzd29yZHM7IG51bGwgZm9yIGFsbCBvYmplY3RzIHdpdGggb3Igd2l0aG91dCBwYXNzd29yZHMgKi9cbiAgaGFzUGFzc3dvcmQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBTcGVjaWZpYyBkYXRhYmFzZSBJRCBvZiB0aGUgb2JqZWN0ICovXG4gIGlkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBJRHMgZm9yIHRoZSBvYmplY3RzIHRvIHJldHJpZXZlICovXG4gIGluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBHZXQgb2JqZWN0cyB3aXRoIGEgc3BlY2lmaWMgbWltZVR5cGUgcHJvcGVydHkgKi9cbiAgbWltZVR5cGU/OiBJbnB1dE1heWJlPE1pbWVUeXBlRW51bT47XG4gIC8qKiBTbHVnIC8gcG9zdF9uYW1lIG9mIHRoZSBvYmplY3QgKi9cbiAgbmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmeSBvYmplY3RzIHRvIHJldHJpZXZlLiBVc2Ugc2x1Z3MgKi9cbiAgbmFtZUluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogU3BlY2lmeSBJRHMgTk9UIHRvIHJldHJpZXZlLiBJZiB0aGlzIGlzIHVzZWQgaW4gdGhlIHNhbWUgcXVlcnkgYXMgXCJpblwiLCBpdCB3aWxsIGJlIGlnbm9yZWQgKi9cbiAgbm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFdoYXQgcGFyYW1ldGVyIHRvIHVzZSB0byBvcmRlciB0aGUgb2JqZWN0cyBieS4gKi9cbiAgb3JkZXJieT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxQb3N0T2JqZWN0c0Nvbm5lY3Rpb25PcmRlcmJ5SW5wdXQ+Pj47XG4gIC8qKiBVc2UgSUQgdG8gcmV0dXJuIG9ubHkgY2hpbGRyZW4uIFVzZSAwIHRvIHJldHVybiBvbmx5IHRvcC1sZXZlbCBpdGVtcyAqL1xuICBwYXJlbnQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmeSBvYmplY3RzIHdob3NlIHBhcmVudCBpcyBpbiBhbiBhcnJheSAqL1xuICBwYXJlbnRJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogU3BlY2lmeSBwb3N0cyB3aG9zZSBwYXJlbnQgaXMgbm90IGluIGFuIGFycmF5ICovXG4gIHBhcmVudE5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTaG93IHBvc3RzIHdpdGggYSBzcGVjaWZpYyBwYXNzd29yZC4gKi9cbiAgcGFzc3dvcmQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFNob3cgUG9zdHMgYmFzZWQgb24gYSBrZXl3b3JkIHNlYXJjaCAqL1xuICBzZWFyY2g/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFJldHJpZXZlIHBvc3RzIHdoZXJlIHBvc3Qgc3RhdHVzIGlzIGluIGFuIGFycmF5LiAqL1xuICBzdGF0aT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxQb3N0U3RhdHVzRW51bT4+PjtcbiAgLyoqIFNob3cgcG9zdHMgd2l0aCBhIHNwZWNpZmljIHN0YXR1cy4gKi9cbiAgc3RhdHVzPzogSW5wdXRNYXliZTxQb3N0U3RhdHVzRW51bT47XG4gIC8qKiBUaXRsZSBvZiB0aGUgb2JqZWN0ICovXG4gIHRpdGxlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBVc2VyIHR5cGUgYW5kIHRoZSBwYWdlIHR5cGUgKi9cbmV4cG9ydCB0eXBlIFVzZXJUb1BhZ2VDb25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIFBhZ2VDb25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ1VzZXJUb1BhZ2VDb25uZWN0aW9uJztcbiAgLyoqIEVkZ2VzIGZvciB0aGUgVXNlclRvUGFnZUNvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8VXNlclRvUGFnZUNvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBub2RlcyBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZXM6IEFycmF5PFBhZ2U+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBVc2VyVG9QYWdlQ29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEFuIGVkZ2UgaW4gYSBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBVc2VyVG9QYWdlQ29ubmVjdGlvbkVkZ2UgPSBFZGdlICYgUGFnZUNvbm5lY3Rpb25FZGdlICYge1xuICBfX3R5cGVuYW1lPzogJ1VzZXJUb1BhZ2VDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogUGFnZTtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlICZxdW90O1VzZXJUb1BhZ2VDb25uZWN0aW9uJnF1b3Q7ICovXG5leHBvcnQgdHlwZSBVc2VyVG9QYWdlQ29ubmVjdGlvblBhZ2VJbmZvID0gUGFnZUNvbm5lY3Rpb25QYWdlSW5mbyAmIFBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdVc2VyVG9QYWdlQ29ubmVjdGlvblBhZ2VJbmZvJztcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBBcmd1bWVudHMgZm9yIGZpbHRlcmluZyB0aGUgVXNlclRvUGFnZUNvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgVXNlclRvUGFnZUNvbm5lY3Rpb25XaGVyZUFyZ3MgPSB7XG4gIC8qKiBUaGUgdXNlciB0aGF0J3MgY29ubmVjdGVkIGFzIHRoZSBhdXRob3Igb2YgdGhlIG9iamVjdC4gVXNlIHRoZSB1c2VySWQgZm9yIHRoZSBhdXRob3Igb2JqZWN0LiAqL1xuICBhdXRob3I/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIEZpbmQgb2JqZWN0cyBjb25uZWN0ZWQgdG8gYXV0aG9yKHMpIGluIHRoZSBhcnJheSBvZiBhdXRob3IncyB1c2VySWRzICovXG4gIGF1dGhvckluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBGaW5kIG9iamVjdHMgY29ubmVjdGVkIHRvIHRoZSBhdXRob3IgYnkgdGhlIGF1dGhvcidzIG5pY2VuYW1lICovXG4gIGF1dGhvck5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEZpbmQgb2JqZWN0cyBOT1QgY29ubmVjdGVkIHRvIGF1dGhvcihzKSBpbiB0aGUgYXJyYXkgb2YgYXV0aG9yJ3MgdXNlcklkcyAqL1xuICBhdXRob3JOb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogRmlsdGVyIHRoZSBjb25uZWN0aW9uIGJhc2VkIG9uIGRhdGVzICovXG4gIGRhdGVRdWVyeT86IElucHV0TWF5YmU8RGF0ZVF1ZXJ5SW5wdXQ+O1xuICAvKiogVHJ1ZSBmb3Igb2JqZWN0cyB3aXRoIHBhc3N3b3JkczsgRmFsc2UgZm9yIG9iamVjdHMgd2l0aG91dCBwYXNzd29yZHM7IG51bGwgZm9yIGFsbCBvYmplY3RzIHdpdGggb3Igd2l0aG91dCBwYXNzd29yZHMgKi9cbiAgaGFzUGFzc3dvcmQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0Jvb2xlYW4nXVsnaW5wdXQnXT47XG4gIC8qKiBTcGVjaWZpYyBkYXRhYmFzZSBJRCBvZiB0aGUgb2JqZWN0ICovXG4gIGlkPzogSW5wdXRNYXliZTxTY2FsYXJzWydJbnQnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiBJRHMgZm9yIHRoZSBvYmplY3RzIHRvIHJldHJpZXZlICovXG4gIGluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBHZXQgb2JqZWN0cyB3aXRoIGEgc3BlY2lmaWMgbWltZVR5cGUgcHJvcGVydHkgKi9cbiAgbWltZVR5cGU/OiBJbnB1dE1heWJlPE1pbWVUeXBlRW51bT47XG4gIC8qKiBTbHVnIC8gcG9zdF9uYW1lIG9mIHRoZSBvYmplY3QgKi9cbiAgbmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmeSBvYmplY3RzIHRvIHJldHJpZXZlLiBVc2Ugc2x1Z3MgKi9cbiAgbmFtZUluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPj4+O1xuICAvKiogU3BlY2lmeSBJRHMgTk9UIHRvIHJldHJpZXZlLiBJZiB0aGlzIGlzIHVzZWQgaW4gdGhlIHNhbWUgcXVlcnkgYXMgXCJpblwiLCBpdCB3aWxsIGJlIGlnbm9yZWQgKi9cbiAgbm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFdoYXQgcGFyYW1ldGVyIHRvIHVzZSB0byBvcmRlciB0aGUgb2JqZWN0cyBieS4gKi9cbiAgb3JkZXJieT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxQb3N0T2JqZWN0c0Nvbm5lY3Rpb25PcmRlcmJ5SW5wdXQ+Pj47XG4gIC8qKiBVc2UgSUQgdG8gcmV0dXJuIG9ubHkgY2hpbGRyZW4uIFVzZSAwIHRvIHJldHVybiBvbmx5IHRvcC1sZXZlbCBpdGVtcyAqL1xuICBwYXJlbnQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmeSBvYmplY3RzIHdob3NlIHBhcmVudCBpcyBpbiBhbiBhcnJheSAqL1xuICBwYXJlbnRJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogU3BlY2lmeSBwb3N0cyB3aG9zZSBwYXJlbnQgaXMgbm90IGluIGFuIGFycmF5ICovXG4gIHBhcmVudE5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBTaG93IHBvc3RzIHdpdGggYSBzcGVjaWZpYyBwYXNzd29yZC4gKi9cbiAgcGFzc3dvcmQ/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFNob3cgUG9zdHMgYmFzZWQgb24gYSBrZXl3b3JkIHNlYXJjaCAqL1xuICBzZWFyY2g/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFJldHJpZXZlIHBvc3RzIHdoZXJlIHBvc3Qgc3RhdHVzIGlzIGluIGFuIGFycmF5LiAqL1xuICBzdGF0aT86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxQb3N0U3RhdHVzRW51bT4+PjtcbiAgLyoqIFNob3cgcG9zdHMgd2l0aCBhIHNwZWNpZmljIHN0YXR1cy4gKi9cbiAgc3RhdHVzPzogSW5wdXRNYXliZTxQb3N0U3RhdHVzRW51bT47XG4gIC8qKiBUaXRsZSBvZiB0aGUgb2JqZWN0ICovXG4gIHRpdGxlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBVc2VyIHR5cGUgYW5kIHRoZSBwb3N0IHR5cGUgKi9cbmV4cG9ydCB0eXBlIFVzZXJUb1Bvc3RDb25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIFBvc3RDb25uZWN0aW9uICYge1xuICBfX3R5cGVuYW1lPzogJ1VzZXJUb1Bvc3RDb25uZWN0aW9uJztcbiAgLyoqIEVkZ2VzIGZvciB0aGUgVXNlclRvUG9zdENvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8VXNlclRvUG9zdENvbm5lY3Rpb25FZGdlPjtcbiAgLyoqIFRoZSBub2RlcyBvZiB0aGUgY29ubmVjdGlvbiwgd2l0aG91dCB0aGUgZWRnZXMgKi9cbiAgbm9kZXM6IEFycmF5PFBvc3Q+O1xuICAvKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG4gIHBhZ2VJbmZvOiBVc2VyVG9Qb3N0Q29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEFuIGVkZ2UgaW4gYSBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBVc2VyVG9Qb3N0Q29ubmVjdGlvbkVkZ2UgPSBFZGdlICYgUG9zdENvbm5lY3Rpb25FZGdlICYge1xuICBfX3R5cGVuYW1lPzogJ1VzZXJUb1Bvc3RDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogUG9zdDtcbn07XG5cbi8qKiBQYWdlIEluZm8gb24gdGhlICZxdW90O1VzZXJUb1Bvc3RDb25uZWN0aW9uJnF1b3Q7ICovXG5leHBvcnQgdHlwZSBVc2VyVG9Qb3N0Q29ubmVjdGlvblBhZ2VJbmZvID0gUGFnZUluZm8gJiBQb3N0Q29ubmVjdGlvblBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdVc2VyVG9Qb3N0Q29ubmVjdGlvblBhZ2VJbmZvJztcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgZW5kQ3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBmb3J3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc05leHRQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgYXJlIHRoZXJlIG1vcmUgaXRlbXM/ICovXG4gIGhhc1ByZXZpb3VzUGFnZTogU2NhbGFyc1snQm9vbGVhbiddWydvdXRwdXQnXTtcbiAgLyoqIFdoZW4gcGFnaW5hdGluZyBiYWNrd2FyZHMsIHRoZSBjdXJzb3IgdG8gY29udGludWUuICovXG4gIHN0YXJ0Q3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbn07XG5cbi8qKiBBcmd1bWVudHMgZm9yIGZpbHRlcmluZyB0aGUgVXNlclRvUG9zdENvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgVXNlclRvUG9zdENvbm5lY3Rpb25XaGVyZUFyZ3MgPSB7XG4gIC8qKiBUaGUgdXNlciB0aGF0J3MgY29ubmVjdGVkIGFzIHRoZSBhdXRob3Igb2YgdGhlIG9iamVjdC4gVXNlIHRoZSB1c2VySWQgZm9yIHRoZSBhdXRob3Igb2JqZWN0LiAqL1xuICBhdXRob3I/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ0ludCddWydpbnB1dCddPjtcbiAgLyoqIEZpbmQgb2JqZWN0cyBjb25uZWN0ZWQgdG8gYXV0aG9yKHMpIGluIHRoZSBhcnJheSBvZiBhdXRob3IncyB1c2VySWRzICovXG4gIGF1dGhvckluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBGaW5kIG9iamVjdHMgY29ubmVjdGVkIHRvIHRoZSBhdXRob3IgYnkgdGhlIGF1dGhvcidzIG5pY2VuYW1lICovXG4gIGF1dGhvck5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIEZpbmQgb2JqZWN0cyBOT1QgY29ubmVjdGVkIHRvIGF1dGhvcihzKSBpbiB0aGUgYXJyYXkgb2YgYXV0aG9yJ3MgdXNlcklkcyAqL1xuICBhdXRob3JOb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQ2F0ZWdvcnkgSUQgKi9cbiAgY2F0ZWdvcnlJZD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgY2F0ZWdvcnkgSURzLCB1c2VkIHRvIGRpc3BsYXkgb2JqZWN0cyBmcm9tIG9uZSBjYXRlZ29yeSBPUiBhbm90aGVyICovXG4gIGNhdGVnb3J5SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFVzZSBDYXRlZ29yeSBTbHVnICovXG4gIGNhdGVnb3J5TmFtZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgY2F0ZWdvcnkgSURzLCB1c2VkIHRvIGRpc3BsYXkgb2JqZWN0cyBmcm9tIG9uZSBjYXRlZ29yeSBPUiBhbm90aGVyICovXG4gIGNhdGVnb3J5Tm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEZpbHRlciB0aGUgY29ubmVjdGlvbiBiYXNlZCBvbiBkYXRlcyAqL1xuICBkYXRlUXVlcnk/OiBJbnB1dE1heWJlPERhdGVRdWVyeUlucHV0PjtcbiAgLyoqIFRydWUgZm9yIG9iamVjdHMgd2l0aCBwYXNzd29yZHM7IEZhbHNlIGZvciBvYmplY3RzIHdpdGhvdXQgcGFzc3dvcmRzOyBudWxsIGZvciBhbGwgb2JqZWN0cyB3aXRoIG9yIHdpdGhvdXQgcGFzc3dvcmRzICovXG4gIGhhc1Bhc3N3b3JkPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmaWMgZGF0YWJhc2UgSUQgb2YgdGhlIG9iamVjdCAqL1xuICBpZD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgSURzIGZvciB0aGUgb2JqZWN0cyB0byByZXRyaWV2ZSAqL1xuICBpbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogR2V0IG9iamVjdHMgd2l0aCBhIHNwZWNpZmljIG1pbWVUeXBlIHByb3BlcnR5ICovXG4gIG1pbWVUeXBlPzogSW5wdXRNYXliZTxNaW1lVHlwZUVudW0+O1xuICAvKiogU2x1ZyAvIHBvc3RfbmFtZSBvZiB0aGUgb2JqZWN0ICovXG4gIG5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFNwZWNpZnkgb2JqZWN0cyB0byByZXRyaWV2ZS4gVXNlIHNsdWdzICovXG4gIG5hbWVJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNwZWNpZnkgSURzIE5PVCB0byByZXRyaWV2ZS4gSWYgdGhpcyBpcyB1c2VkIGluIHRoZSBzYW1lIHF1ZXJ5IGFzIFwiaW5cIiwgaXQgd2lsbCBiZSBpZ25vcmVkICovXG4gIG5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBXaGF0IHBhcmFtZXRlciB0byB1c2UgdG8gb3JkZXIgdGhlIG9iamVjdHMgYnkuICovXG4gIG9yZGVyYnk/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8UG9zdE9iamVjdHNDb25uZWN0aW9uT3JkZXJieUlucHV0Pj4+O1xuICAvKiogVXNlIElEIHRvIHJldHVybiBvbmx5IGNoaWxkcmVuLiBVc2UgMCB0byByZXR1cm4gb25seSB0b3AtbGV2ZWwgaXRlbXMgKi9cbiAgcGFyZW50PzogSW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPjtcbiAgLyoqIFNwZWNpZnkgb2JqZWN0cyB3aG9zZSBwYXJlbnQgaXMgaW4gYW4gYXJyYXkgKi9cbiAgcGFyZW50SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNwZWNpZnkgcG9zdHMgd2hvc2UgcGFyZW50IGlzIG5vdCBpbiBhbiBhcnJheSAqL1xuICBwYXJlbnROb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogU2hvdyBwb3N0cyB3aXRoIGEgc3BlY2lmaWMgcGFzc3dvcmQuICovXG4gIHBhc3N3b3JkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBTaG93IFBvc3RzIGJhc2VkIG9uIGEga2V5d29yZCBzZWFyY2ggKi9cbiAgc2VhcmNoPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBSZXRyaWV2ZSBwb3N0cyB3aGVyZSBwb3N0IHN0YXR1cyBpcyBpbiBhbiBhcnJheS4gKi9cbiAgc3RhdGk/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+Pj47XG4gIC8qKiBTaG93IHBvc3RzIHdpdGggYSBzcGVjaWZpYyBzdGF0dXMuICovXG4gIHN0YXR1cz86IElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+O1xuICAvKiogVGFnIFNsdWcgKi9cbiAgdGFnPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBVc2UgVGFnIElEICovXG4gIHRhZ0lkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBBcnJheSBvZiB0YWcgSURzLCB1c2VkIHRvIGRpc3BsYXkgb2JqZWN0cyBmcm9tIG9uZSB0YWcgT1IgYW5vdGhlciAqL1xuICB0YWdJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogQXJyYXkgb2YgdGFnIElEcywgdXNlZCB0byBkaXNwbGF5IG9iamVjdHMgZnJvbSBvbmUgdGFnIE9SIGFub3RoZXIgKi9cbiAgdGFnTm90SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIEFycmF5IG9mIHRhZyBzbHVncywgdXNlZCB0byBkaXNwbGF5IG9iamVjdHMgZnJvbSBvbmUgdGFnIEFORCBhbm90aGVyICovXG4gIHRhZ1NsdWdBbmQ/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBBcnJheSBvZiB0YWcgc2x1Z3MsIHVzZWQgdG8gaW5jbHVkZSBvYmplY3RzIGluIEFOWSBzcGVjaWZpZWQgdGFncyAqL1xuICB0YWdTbHVnSW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBUaXRsZSBvZiB0aGUgb2JqZWN0ICovXG4gIHRpdGxlPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG59O1xuXG4vKiogQ29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBVc2VyIHR5cGUgYW5kIHRoZSBDb250ZW50Tm9kZSB0eXBlICovXG5leHBvcnQgdHlwZSBVc2VyVG9SZXZpc2lvbnNDb25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIENvbnRlbnROb2RlQ29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdVc2VyVG9SZXZpc2lvbnNDb25uZWN0aW9uJztcbiAgLyoqIEVkZ2VzIGZvciB0aGUgVXNlclRvUmV2aXNpb25zQ29ubmVjdGlvbiBjb25uZWN0aW9uICovXG4gIGVkZ2VzOiBBcnJheTxVc2VyVG9SZXZpc2lvbnNDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxDb250ZW50Tm9kZT47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFVzZXJUb1JldmlzaW9uc0Nvbm5lY3Rpb25QYWdlSW5mbztcbn07XG5cbi8qKiBBbiBlZGdlIGluIGEgY29ubmVjdGlvbiAqL1xuZXhwb3J0IHR5cGUgVXNlclRvUmV2aXNpb25zQ29ubmVjdGlvbkVkZ2UgPSBDb250ZW50Tm9kZUNvbm5lY3Rpb25FZGdlICYgRWRnZSAmIHtcbiAgX190eXBlbmFtZT86ICdVc2VyVG9SZXZpc2lvbnNDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogQ29udGVudE5vZGU7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtVc2VyVG9SZXZpc2lvbnNDb25uZWN0aW9uJnF1b3Q7ICovXG5leHBvcnQgdHlwZSBVc2VyVG9SZXZpc2lvbnNDb25uZWN0aW9uUGFnZUluZm8gPSBDb250ZW50Tm9kZUNvbm5lY3Rpb25QYWdlSW5mbyAmIFBhZ2VJbmZvICYgV3BQYWdlSW5mbyAmIHtcbiAgX190eXBlbmFtZT86ICdVc2VyVG9SZXZpc2lvbnNDb25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIEFyZ3VtZW50cyBmb3IgZmlsdGVyaW5nIHRoZSBVc2VyVG9SZXZpc2lvbnNDb25uZWN0aW9uIGNvbm5lY3Rpb24gKi9cbmV4cG9ydCB0eXBlIFVzZXJUb1JldmlzaW9uc0Nvbm5lY3Rpb25XaGVyZUFyZ3MgPSB7XG4gIC8qKiBUaGUgVHlwZXMgb2YgY29udGVudCB0byBmaWx0ZXIgKi9cbiAgY29udGVudFR5cGVzPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPENvbnRlbnRUeXBlRW51bT4+PjtcbiAgLyoqIEZpbHRlciB0aGUgY29ubmVjdGlvbiBiYXNlZCBvbiBkYXRlcyAqL1xuICBkYXRlUXVlcnk/OiBJbnB1dE1heWJlPERhdGVRdWVyeUlucHV0PjtcbiAgLyoqIFRydWUgZm9yIG9iamVjdHMgd2l0aCBwYXNzd29yZHM7IEZhbHNlIGZvciBvYmplY3RzIHdpdGhvdXQgcGFzc3dvcmRzOyBudWxsIGZvciBhbGwgb2JqZWN0cyB3aXRoIG9yIHdpdGhvdXQgcGFzc3dvcmRzICovXG4gIGhhc1Bhc3N3b3JkPzogSW5wdXRNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ2lucHV0J10+O1xuICAvKiogU3BlY2lmaWMgZGF0YWJhc2UgSUQgb2YgdGhlIG9iamVjdCAqL1xuICBpZD86IElucHV0TWF5YmU8U2NhbGFyc1snSW50J11bJ2lucHV0J10+O1xuICAvKiogQXJyYXkgb2YgSURzIGZvciB0aGUgb2JqZWN0cyB0byByZXRyaWV2ZSAqL1xuICBpbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogR2V0IG9iamVjdHMgd2l0aCBhIHNwZWNpZmljIG1pbWVUeXBlIHByb3BlcnR5ICovXG4gIG1pbWVUeXBlPzogSW5wdXRNYXliZTxNaW1lVHlwZUVudW0+O1xuICAvKiogU2x1ZyAvIHBvc3RfbmFtZSBvZiB0aGUgb2JqZWN0ICovXG4gIG5hbWU/OiBJbnB1dE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydpbnB1dCddPjtcbiAgLyoqIFNwZWNpZnkgb2JqZWN0cyB0byByZXRyaWV2ZS4gVXNlIHNsdWdzICovXG4gIG5hbWVJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNwZWNpZnkgSURzIE5PVCB0byByZXRyaWV2ZS4gSWYgdGhpcyBpcyB1c2VkIGluIHRoZSBzYW1lIHF1ZXJ5IGFzIFwiaW5cIiwgaXQgd2lsbCBiZSBpZ25vcmVkICovXG4gIG5vdEluPzogSW5wdXRNYXliZTxBcnJheTxJbnB1dE1heWJlPFNjYWxhcnNbJ0lEJ11bJ2lucHV0J10+Pj47XG4gIC8qKiBXaGF0IHBhcmFtZXRlciB0byB1c2UgdG8gb3JkZXIgdGhlIG9iamVjdHMgYnkuICovXG4gIG9yZGVyYnk/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8UG9zdE9iamVjdHNDb25uZWN0aW9uT3JkZXJieUlucHV0Pj4+O1xuICAvKiogVXNlIElEIHRvIHJldHVybiBvbmx5IGNoaWxkcmVuLiBVc2UgMCB0byByZXR1cm4gb25seSB0b3AtbGV2ZWwgaXRlbXMgKi9cbiAgcGFyZW50PzogSW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPjtcbiAgLyoqIFNwZWNpZnkgb2JqZWN0cyB3aG9zZSBwYXJlbnQgaXMgaW4gYW4gYXJyYXkgKi9cbiAgcGFyZW50SW4/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8U2NhbGFyc1snSUQnXVsnaW5wdXQnXT4+PjtcbiAgLyoqIFNwZWNpZnkgcG9zdHMgd2hvc2UgcGFyZW50IGlzIG5vdCBpbiBhbiBhcnJheSAqL1xuICBwYXJlbnROb3RJbj86IElucHV0TWF5YmU8QXJyYXk8SW5wdXRNYXliZTxTY2FsYXJzWydJRCddWydpbnB1dCddPj4+O1xuICAvKiogU2hvdyBwb3N0cyB3aXRoIGEgc3BlY2lmaWMgcGFzc3dvcmQuICovXG4gIHBhc3N3b3JkPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBTaG93IFBvc3RzIGJhc2VkIG9uIGEga2V5d29yZCBzZWFyY2ggKi9cbiAgc2VhcmNoPzogSW5wdXRNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnaW5wdXQnXT47XG4gIC8qKiBSZXRyaWV2ZSBwb3N0cyB3aGVyZSBwb3N0IHN0YXR1cyBpcyBpbiBhbiBhcnJheS4gKi9cbiAgc3RhdGk/OiBJbnB1dE1heWJlPEFycmF5PElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+Pj47XG4gIC8qKiBTaG93IHBvc3RzIHdpdGggYSBzcGVjaWZpYyBzdGF0dXMuICovXG4gIHN0YXR1cz86IElucHV0TWF5YmU8UG9zdFN0YXR1c0VudW0+O1xuICAvKiogVGl0bGUgb2YgdGhlIG9iamVjdCAqL1xuICB0aXRsZT86IElucHV0TWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ2lucHV0J10+O1xufTtcblxuLyoqIENvbm5lY3Rpb24gYmV0d2VlbiB0aGUgVXNlciB0eXBlIGFuZCB0aGUgVXNlclJvbGUgdHlwZSAqL1xuZXhwb3J0IHR5cGUgVXNlclRvVXNlclJvbGVDb25uZWN0aW9uID0gQ29ubmVjdGlvbiAmIFVzZXJSb2xlQ29ubmVjdGlvbiAmIHtcbiAgX190eXBlbmFtZT86ICdVc2VyVG9Vc2VyUm9sZUNvbm5lY3Rpb24nO1xuICAvKiogRWRnZXMgZm9yIHRoZSBVc2VyVG9Vc2VyUm9sZUNvbm5lY3Rpb24gY29ubmVjdGlvbiAqL1xuICBlZGdlczogQXJyYXk8VXNlclRvVXNlclJvbGVDb25uZWN0aW9uRWRnZT47XG4gIC8qKiBUaGUgbm9kZXMgb2YgdGhlIGNvbm5lY3Rpb24sIHdpdGhvdXQgdGhlIGVkZ2VzICovXG4gIG5vZGVzOiBBcnJheTxVc2VyUm9sZT47XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBwYWdpbmF0aW9uIGluIGEgY29ubmVjdGlvbi4gKi9cbiAgcGFnZUluZm86IFVzZXJUb1VzZXJSb2xlQ29ubmVjdGlvblBhZ2VJbmZvO1xufTtcblxuLyoqIEFuIGVkZ2UgaW4gYSBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBVc2VyVG9Vc2VyUm9sZUNvbm5lY3Rpb25FZGdlID0gRWRnZSAmIFVzZXJSb2xlQ29ubmVjdGlvbkVkZ2UgJiB7XG4gIF9fdHlwZW5hbWU/OiAnVXNlclRvVXNlclJvbGVDb25uZWN0aW9uRWRnZSc7XG4gIC8qKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24gKi9cbiAgY3Vyc29yPzogTWF5YmU8U2NhbGFyc1snU3RyaW5nJ11bJ291dHB1dCddPjtcbiAgLyoqIFRoZSBpdGVtIGF0IHRoZSBlbmQgb2YgdGhlIGVkZ2UgKi9cbiAgbm9kZTogVXNlclJvbGU7XG59O1xuXG4vKiogUGFnZSBJbmZvIG9uIHRoZSAmcXVvdDtVc2VyVG9Vc2VyUm9sZUNvbm5lY3Rpb24mcXVvdDsgKi9cbmV4cG9ydCB0eXBlIFVzZXJUb1VzZXJSb2xlQ29ubmVjdGlvblBhZ2VJbmZvID0gUGFnZUluZm8gJiBVc2VyUm9sZUNvbm5lY3Rpb25QYWdlSW5mbyAmIFdwUGFnZUluZm8gJiB7XG4gIF9fdHlwZW5hbWU/OiAnVXNlclRvVXNlclJvbGVDb25uZWN0aW9uUGFnZUluZm8nO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIEZpZWxkIHRvIG9yZGVyIHRoZSBjb25uZWN0aW9uIGJ5ICovXG5leHBvcnQgZW51bSBVc2Vyc0Nvbm5lY3Rpb25PcmRlcmJ5RW51bSB7XG4gIC8qKiBPcmRlciBieSBkaXNwbGF5IG5hbWUgKi9cbiAgRGlzcGxheU5hbWUgPSAnRElTUExBWV9OQU1FJyxcbiAgLyoqIE9yZGVyIGJ5IGVtYWlsIGFkZHJlc3MgKi9cbiAgRW1haWwgPSAnRU1BSUwnLFxuICAvKiogT3JkZXIgYnkgbG9naW4gKi9cbiAgTG9naW4gPSAnTE9HSU4nLFxuICAvKiogUHJlc2VydmUgdGhlIGxvZ2luIG9yZGVyIGdpdmVuIGluIHRoZSBMT0dJTl9JTiBhcnJheSAqL1xuICBMb2dpbkluID0gJ0xPR0lOX0lOJyxcbiAgLyoqIE9yZGVyIGJ5IG5pY2UgbmFtZSAqL1xuICBOaWNlTmFtZSA9ICdOSUNFX05BTUUnLFxuICAvKiogUHJlc2VydmUgdGhlIG5pY2UgbmFtZSBvcmRlciBnaXZlbiBpbiB0aGUgTklDRV9OQU1FX0lOIGFycmF5ICovXG4gIE5pY2VOYW1lSW4gPSAnTklDRV9OQU1FX0lOJyxcbiAgLyoqIE9yZGVyIGJ5IHJlZ2lzdHJhdGlvbiBkYXRlICovXG4gIFJlZ2lzdGVyZWQgPSAnUkVHSVNURVJFRCcsXG4gIC8qKiBPcmRlciBieSBVUkwgKi9cbiAgVXJsID0gJ1VSTCdcbn1cblxuLyoqIE9wdGlvbnMgZm9yIG9yZGVyaW5nIHRoZSBjb25uZWN0aW9uICovXG5leHBvcnQgdHlwZSBVc2Vyc0Nvbm5lY3Rpb25PcmRlcmJ5SW5wdXQgPSB7XG4gIC8qKiBUaGUgZmllbGQgbmFtZSB1c2VkIHRvIHNvcnQgdGhlIHJlc3VsdHMuICovXG4gIGZpZWxkOiBVc2Vyc0Nvbm5lY3Rpb25PcmRlcmJ5RW51bTtcbiAgLyoqIFRoZSBjYXJkaW5hbGl0eSBvZiB0aGUgb3JkZXIgb2YgdGhlIGNvbm5lY3Rpb24gKi9cbiAgb3JkZXI/OiBJbnB1dE1heWJlPE9yZGVyRW51bT47XG59O1xuXG4vKiogQ29sdW1uIHVzZWQgZm9yIHNlYXJjaGluZyBmb3IgdXNlcnMuICovXG5leHBvcnQgZW51bSBVc2Vyc0Nvbm5lY3Rpb25TZWFyY2hDb2x1bW5FbnVtIHtcbiAgLyoqIFRoZSB1c2VyJ3MgZW1haWwgYWRkcmVzcy4gKi9cbiAgRW1haWwgPSAnRU1BSUwnLFxuICAvKiogVGhlIGdsb2JhbGx5IHVuaXF1ZSBJRC4gKi9cbiAgSWQgPSAnSUQnLFxuICAvKiogVGhlIHVzZXJuYW1lIHRoZSBVc2VyIHVzZXMgdG8gbG9naW4gd2l0aC4gKi9cbiAgTG9naW4gPSAnTE9HSU4nLFxuICAvKiogQSBVUkwtZnJpZW5kbHkgbmFtZSBmb3IgdGhlIHVzZXIuIFRoZSBkZWZhdWx0IGlzIHRoZSB1c2VyJ3MgdXNlcm5hbWUuICovXG4gIE5pY2VuYW1lID0gJ05JQ0VOQU1FJyxcbiAgLyoqIFRoZSBVUkwgb2YgdGhlIHVzZXIncyB3ZWJzaXRlLiAqL1xuICBVcmwgPSAnVVJMJ1xufVxuXG4vKiogSW5mb3JtYXRpb24gYWJvdXQgcGFnaW5hdGlvbiBpbiBhIGNvbm5lY3Rpb24uICovXG5leHBvcnQgdHlwZSBXcFBhZ2VJbmZvID0ge1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCB0aGUgY3Vyc29yIHRvIGNvbnRpbnVlLiAqL1xuICBlbmRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGZvcndhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzTmV4dFBhZ2U6IFNjYWxhcnNbJ0Jvb2xlYW4nXVsnb3V0cHV0J107XG4gIC8qKiBXaGVuIHBhZ2luYXRpbmcgYmFja3dhcmRzLCBhcmUgdGhlcmUgbW9yZSBpdGVtcz8gKi9cbiAgaGFzUHJldmlvdXNQYWdlOiBTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddO1xuICAvKiogV2hlbiBwYWdpbmF0aW5nIGJhY2t3YXJkcywgdGhlIGN1cnNvciB0byBjb250aW51ZS4gKi9cbiAgc3RhcnRDdXJzb3I/OiBNYXliZTxTY2FsYXJzWydTdHJpbmcnXVsnb3V0cHV0J10+O1xufTtcblxuLyoqIFRoZSB3cml0aW5nIHNldHRpbmcgdHlwZSAqL1xuZXhwb3J0IHR5cGUgV3JpdGluZ1NldHRpbmdzID0ge1xuICBfX3R5cGVuYW1lPzogJ1dyaXRpbmdTZXR0aW5ncyc7XG4gIC8qKiBEZWZhdWx0IHBvc3QgY2F0ZWdvcnkuICovXG4gIGRlZmF1bHRDYXRlZ29yeT86IE1heWJlPFNjYWxhcnNbJ0ludCddWydvdXRwdXQnXT47XG4gIC8qKiBEZWZhdWx0IHBvc3QgZm9ybWF0LiAqL1xuICBkZWZhdWx0UG9zdEZvcm1hdD86IE1heWJlPFNjYWxhcnNbJ1N0cmluZyddWydvdXRwdXQnXT47XG4gIC8qKiBDb252ZXJ0IGVtb3RpY29ucyBsaWtlIDotKSBhbmQgOi1QIHRvIGdyYXBoaWNzIG9uIGRpc3BsYXkuICovXG4gIHVzZVNtaWxpZXM/OiBNYXliZTxTY2FsYXJzWydCb29sZWFuJ11bJ291dHB1dCddPjtcbn07XG5cbmV4cG9ydCB0eXBlIFBvc3RGcmFnZW1lbnRGcmFnbWVudCA9IHsgX190eXBlbmFtZT86ICdQb3N0JywgdGl0bGU/OiBzdHJpbmcgfCBudWxsLCBpZDogc3RyaW5nLCBkYXRlPzogc3RyaW5nIHwgbnVsbCwgZXhjZXJwdD86IHN0cmluZyB8IG51bGwsIHNsdWc/OiBzdHJpbmcgfCBudWxsLCBhdXRob3I/OiB7IF9fdHlwZW5hbWU/OiAnTm9kZVdpdGhBdXRob3JUb1VzZXJDb25uZWN0aW9uRWRnZScsIG5vZGU6IHsgX190eXBlbmFtZT86ICdVc2VyJywgbmFtZT86IHN0cmluZyB8IG51bGwgfSB9IHwgbnVsbCwgZmVhdHVyZWRJbWFnZT86IHsgX190eXBlbmFtZT86ICdOb2RlV2l0aEZlYXR1cmVkSW1hZ2VUb01lZGlhSXRlbUNvbm5lY3Rpb25FZGdlJywgbm9kZTogeyBfX3R5cGVuYW1lPzogJ01lZGlhSXRlbScsIHNvdXJjZVVybD86IHN0cmluZyB8IG51bGwsIGNhcHRpb24/OiBzdHJpbmcgfCBudWxsIH0gfSB8IG51bGwgfTtcblxuZXhwb3J0IHR5cGUgR2V0UG9zdHNRdWVyeVZhcmlhYmxlcyA9IEV4YWN0PHtcbiAgZmlyc3Q6IFNjYWxhcnNbJ0ludCddWydpbnB1dCddO1xufT47XG5cblxuZXhwb3J0IHR5cGUgR2V0UG9zdHNRdWVyeSA9IHsgX190eXBlbmFtZT86ICdSb290UXVlcnknLCBwb3N0cz86IHsgX190eXBlbmFtZT86ICdSb290UXVlcnlUb1Bvc3RDb25uZWN0aW9uJywgbm9kZXM6IEFycmF5PHsgX190eXBlbmFtZT86ICdQb3N0JywgdGl0bGU/OiBzdHJpbmcgfCBudWxsLCBpZDogc3RyaW5nLCBkYXRlPzogc3RyaW5nIHwgbnVsbCwgZXhjZXJwdD86IHN0cmluZyB8IG51bGwsIHNsdWc/OiBzdHJpbmcgfCBudWxsLCBhdXRob3I/OiB7IF9fdHlwZW5hbWU/OiAnTm9kZVdpdGhBdXRob3JUb1VzZXJDb25uZWN0aW9uRWRnZScsIG5vZGU6IHsgX190eXBlbmFtZT86ICdVc2VyJywgbmFtZT86IHN0cmluZyB8IG51bGwgfSB9IHwgbnVsbCwgZmVhdHVyZWRJbWFnZT86IHsgX190eXBlbmFtZT86ICdOb2RlV2l0aEZlYXR1cmVkSW1hZ2VUb01lZGlhSXRlbUNvbm5lY3Rpb25FZGdlJywgbm9kZTogeyBfX3R5cGVuYW1lPzogJ01lZGlhSXRlbScsIHNvdXJjZVVybD86IHN0cmluZyB8IG51bGwsIGNhcHRpb24/OiBzdHJpbmcgfCBudWxsIH0gfSB8IG51bGwgfT4gfSB8IG51bGwgfTtcblxuZXhwb3J0IHR5cGUgR2V0UG9zdElEc1F1ZXJ5VmFyaWFibGVzID0gRXhhY3Q8e1xuICBmaXJzdDogU2NhbGFyc1snSW50J11bJ2lucHV0J107XG59PjtcblxuXG5leHBvcnQgdHlwZSBHZXRQb3N0SURzUXVlcnkgPSB7IF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5JywgcG9zdHM/OiB7IF9fdHlwZW5hbWU/OiAnUm9vdFF1ZXJ5VG9Qb3N0Q29ubmVjdGlvbicsIG5vZGVzOiBBcnJheTx7IF9fdHlwZW5hbWU/OiAnUG9zdCcsIGlkOiBzdHJpbmcgfT4gfSB8IG51bGwgfTtcblxuZXhwb3J0IHR5cGUgR2V0UG9zdFF1ZXJ5VmFyaWFibGVzID0gRXhhY3Q8e1xuICBpZDogU2NhbGFyc1snSUQnXVsnaW5wdXQnXTtcbn0+O1xuXG5cbmV4cG9ydCB0eXBlIEdldFBvc3RRdWVyeSA9IHsgX190eXBlbmFtZT86ICdSb290UXVlcnknLCBwb3N0PzogeyBfX3R5cGVuYW1lPzogJ1Bvc3QnLCB0aXRsZT86IHN0cmluZyB8IG51bGwsIGlkOiBzdHJpbmcsIGRhdGU/OiBzdHJpbmcgfCBudWxsLCBleGNlcnB0Pzogc3RyaW5nIHwgbnVsbCwgc2x1Zz86IHN0cmluZyB8IG51bGwsIGF1dGhvcj86IHsgX190eXBlbmFtZT86ICdOb2RlV2l0aEF1dGhvclRvVXNlckNvbm5lY3Rpb25FZGdlJywgbm9kZTogeyBfX3R5cGVuYW1lPzogJ1VzZXInLCBuYW1lPzogc3RyaW5nIHwgbnVsbCB9IH0gfCBudWxsLCBmZWF0dXJlZEltYWdlPzogeyBfX3R5cGVuYW1lPzogJ05vZGVXaXRoRmVhdHVyZWRJbWFnZVRvTWVkaWFJdGVtQ29ubmVjdGlvbkVkZ2UnLCBub2RlOiB7IF9fdHlwZW5hbWU/OiAnTWVkaWFJdGVtJywgc291cmNlVXJsPzogc3RyaW5nIHwgbnVsbCwgY2FwdGlvbj86IHN0cmluZyB8IG51bGwgfSB9IHwgbnVsbCB9IHwgbnVsbCB9O1xuXG5leHBvcnQgY29uc3QgUG9zdEZyYWdlbWVudEZyYWdtZW50RG9jID0gLyojX19QVVJFX18qLyBncWxgXG4gICAgZnJhZ21lbnQgUG9zdEZyYWdlbWVudCBvbiBQb3N0IHtcbiAgdGl0bGVcbiAgYXV0aG9yIHtcbiAgICBub2RlIHtcbiAgICAgIG5hbWVcbiAgICB9XG4gIH1cbiAgaWRcbiAgZGF0ZVxuICBleGNlcnB0XG4gIGZlYXR1cmVkSW1hZ2Uge1xuICAgIG5vZGUge1xuICAgICAgc291cmNlVXJsKHNpemU6IExBUkdFKVxuICAgICAgY2FwdGlvblxuICAgIH1cbiAgfVxuICBzbHVnXG59XG4gICAgYDtcbmV4cG9ydCBjb25zdCBHZXRQb3N0c0RvY3VtZW50ID0gLyojX19QVVJFX18qLyBncWxgXG4gICAgcXVlcnkgZ2V0UG9zdHMoJGZpcnN0OiBJbnQhKSB7XG4gIHBvc3RzKGZpcnN0OiAkZmlyc3QpIHtcbiAgICBub2RlcyB7XG4gICAgICAuLi5Qb3N0RnJhZ2VtZW50XG4gICAgfVxuICB9XG59XG4gICAgJHtQb3N0RnJhZ2VtZW50RnJhZ21lbnREb2N9YDtcblxuLyoqXG4gKiBfX3VzZUdldFBvc3RzUXVlcnlfX1xuICpcbiAqIFRvIHJ1biBhIHF1ZXJ5IHdpdGhpbiBhIFJlYWN0IGNvbXBvbmVudCwgY2FsbCBgdXNlR2V0UG9zdHNRdWVyeWAgYW5kIHBhc3MgaXQgYW55IG9wdGlvbnMgdGhhdCBmaXQgeW91ciBuZWVkcy5cbiAqIFdoZW4geW91ciBjb21wb25lbnQgcmVuZGVycywgYHVzZUdldFBvc3RzUXVlcnlgIHJldHVybnMgYW4gb2JqZWN0IGZyb20gQXBvbGxvIENsaWVudCB0aGF0IGNvbnRhaW5zIGxvYWRpbmcsIGVycm9yLCBhbmQgZGF0YSBwcm9wZXJ0aWVzXG4gKiB5b3UgY2FuIHVzZSB0byByZW5kZXIgeW91ciBVSS5cbiAqXG4gKiBAcGFyYW0gYmFzZU9wdGlvbnMgb3B0aW9ucyB0aGF0IHdpbGwgYmUgcGFzc2VkIGludG8gdGhlIHF1ZXJ5LCBzdXBwb3J0ZWQgb3B0aW9ucyBhcmUgbGlzdGVkIG9uOiBodHRwczovL3d3dy5hcG9sbG9ncmFwaHFsLmNvbS9kb2NzL3JlYWN0L2FwaS9yZWFjdC1ob29rcy8jb3B0aW9ucztcbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgeyBkYXRhLCBsb2FkaW5nLCBlcnJvciB9ID0gdXNlR2V0UG9zdHNRdWVyeSh7XG4gKiAgIHZhcmlhYmxlczoge1xuICogICAgICBmaXJzdDogLy8gdmFsdWUgZm9yICdmaXJzdCdcbiAqICAgfSxcbiAqIH0pO1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlR2V0UG9zdHNRdWVyeShiYXNlT3B0aW9uczogQXBvbGxvLlF1ZXJ5SG9va09wdGlvbnM8R2V0UG9zdHNRdWVyeSwgR2V0UG9zdHNRdWVyeVZhcmlhYmxlcz4pIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHsuLi5kZWZhdWx0T3B0aW9ucywgLi4uYmFzZU9wdGlvbnN9XG4gICAgICAgIHJldHVybiBBcG9sbG8udXNlUXVlcnk8R2V0UG9zdHNRdWVyeSwgR2V0UG9zdHNRdWVyeVZhcmlhYmxlcz4oR2V0UG9zdHNEb2N1bWVudCwgb3B0aW9ucyk7XG4gICAgICB9XG5leHBvcnQgZnVuY3Rpb24gdXNlR2V0UG9zdHNMYXp5UXVlcnkoYmFzZU9wdGlvbnM/OiBBcG9sbG8uTGF6eVF1ZXJ5SG9va09wdGlvbnM8R2V0UG9zdHNRdWVyeSwgR2V0UG9zdHNRdWVyeVZhcmlhYmxlcz4pIHtcbiAgICAgICAgICBjb25zdCBvcHRpb25zID0gey4uLmRlZmF1bHRPcHRpb25zLCAuLi5iYXNlT3B0aW9uc31cbiAgICAgICAgICByZXR1cm4gQXBvbGxvLnVzZUxhenlRdWVyeTxHZXRQb3N0c1F1ZXJ5LCBHZXRQb3N0c1F1ZXJ5VmFyaWFibGVzPihHZXRQb3N0c0RvY3VtZW50LCBvcHRpb25zKTtcbiAgICAgICAgfVxuZXhwb3J0IGZ1bmN0aW9uIHVzZUdldFBvc3RzU3VzcGVuc2VRdWVyeShiYXNlT3B0aW9ucz86IEFwb2xsby5TdXNwZW5zZVF1ZXJ5SG9va09wdGlvbnM8R2V0UG9zdHNRdWVyeSwgR2V0UG9zdHNRdWVyeVZhcmlhYmxlcz4pIHtcbiAgICAgICAgICBjb25zdCBvcHRpb25zID0gey4uLmRlZmF1bHRPcHRpb25zLCAuLi5iYXNlT3B0aW9uc31cbiAgICAgICAgICByZXR1cm4gQXBvbGxvLnVzZVN1c3BlbnNlUXVlcnk8R2V0UG9zdHNRdWVyeSwgR2V0UG9zdHNRdWVyeVZhcmlhYmxlcz4oR2V0UG9zdHNEb2N1bWVudCwgb3B0aW9ucyk7XG4gICAgICAgIH1cbmV4cG9ydCB0eXBlIEdldFBvc3RzUXVlcnlIb29rUmVzdWx0ID0gUmV0dXJuVHlwZTx0eXBlb2YgdXNlR2V0UG9zdHNRdWVyeT47XG5leHBvcnQgdHlwZSBHZXRQb3N0c0xhenlRdWVyeUhvb2tSZXN1bHQgPSBSZXR1cm5UeXBlPHR5cGVvZiB1c2VHZXRQb3N0c0xhenlRdWVyeT47XG5leHBvcnQgdHlwZSBHZXRQb3N0c1N1c3BlbnNlUXVlcnlIb29rUmVzdWx0ID0gUmV0dXJuVHlwZTx0eXBlb2YgdXNlR2V0UG9zdHNTdXNwZW5zZVF1ZXJ5PjtcbmV4cG9ydCB0eXBlIEdldFBvc3RzUXVlcnlSZXN1bHQgPSBBcG9sbG8uUXVlcnlSZXN1bHQ8R2V0UG9zdHNRdWVyeSwgR2V0UG9zdHNRdWVyeVZhcmlhYmxlcz47XG5leHBvcnQgY29uc3QgR2V0UG9zdElEc0RvY3VtZW50ID0gLyojX19QVVJFX18qLyBncWxgXG4gICAgcXVlcnkgZ2V0UG9zdElEcygkZmlyc3Q6IEludCEpIHtcbiAgcG9zdHMoZmlyc3Q6ICRmaXJzdCkge1xuICAgIG5vZGVzIHtcbiAgICAgIGlkXG4gICAgfVxuICB9XG59XG4gICAgYDtcblxuLyoqXG4gKiBfX3VzZUdldFBvc3RJRHNRdWVyeV9fXG4gKlxuICogVG8gcnVuIGEgcXVlcnkgd2l0aGluIGEgUmVhY3QgY29tcG9uZW50LCBjYWxsIGB1c2VHZXRQb3N0SURzUXVlcnlgIGFuZCBwYXNzIGl0IGFueSBvcHRpb25zIHRoYXQgZml0IHlvdXIgbmVlZHMuXG4gKiBXaGVuIHlvdXIgY29tcG9uZW50IHJlbmRlcnMsIGB1c2VHZXRQb3N0SURzUXVlcnlgIHJldHVybnMgYW4gb2JqZWN0IGZyb20gQXBvbGxvIENsaWVudCB0aGF0IGNvbnRhaW5zIGxvYWRpbmcsIGVycm9yLCBhbmQgZGF0YSBwcm9wZXJ0aWVzXG4gKiB5b3UgY2FuIHVzZSB0byByZW5kZXIgeW91ciBVSS5cbiAqXG4gKiBAcGFyYW0gYmFzZU9wdGlvbnMgb3B0aW9ucyB0aGF0IHdpbGwgYmUgcGFzc2VkIGludG8gdGhlIHF1ZXJ5LCBzdXBwb3J0ZWQgb3B0aW9ucyBhcmUgbGlzdGVkIG9uOiBodHRwczovL3d3dy5hcG9sbG9ncmFwaHFsLmNvbS9kb2NzL3JlYWN0L2FwaS9yZWFjdC1ob29rcy8jb3B0aW9ucztcbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgeyBkYXRhLCBsb2FkaW5nLCBlcnJvciB9ID0gdXNlR2V0UG9zdElEc1F1ZXJ5KHtcbiAqICAgdmFyaWFibGVzOiB7XG4gKiAgICAgIGZpcnN0OiAvLyB2YWx1ZSBmb3IgJ2ZpcnN0J1xuICogICB9LFxuICogfSk7XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VHZXRQb3N0SURzUXVlcnkoYmFzZU9wdGlvbnM6IEFwb2xsby5RdWVyeUhvb2tPcHRpb25zPEdldFBvc3RJRHNRdWVyeSwgR2V0UG9zdElEc1F1ZXJ5VmFyaWFibGVzPikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gey4uLmRlZmF1bHRPcHRpb25zLCAuLi5iYXNlT3B0aW9uc31cbiAgICAgICAgcmV0dXJuIEFwb2xsby51c2VRdWVyeTxHZXRQb3N0SURzUXVlcnksIEdldFBvc3RJRHNRdWVyeVZhcmlhYmxlcz4oR2V0UG9zdElEc0RvY3VtZW50LCBvcHRpb25zKTtcbiAgICAgIH1cbmV4cG9ydCBmdW5jdGlvbiB1c2VHZXRQb3N0SURzTGF6eVF1ZXJ5KGJhc2VPcHRpb25zPzogQXBvbGxvLkxhenlRdWVyeUhvb2tPcHRpb25zPEdldFBvc3RJRHNRdWVyeSwgR2V0UG9zdElEc1F1ZXJ5VmFyaWFibGVzPikge1xuICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7Li4uZGVmYXVsdE9wdGlvbnMsIC4uLmJhc2VPcHRpb25zfVxuICAgICAgICAgIHJldHVybiBBcG9sbG8udXNlTGF6eVF1ZXJ5PEdldFBvc3RJRHNRdWVyeSwgR2V0UG9zdElEc1F1ZXJ5VmFyaWFibGVzPihHZXRQb3N0SURzRG9jdW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICB9XG5leHBvcnQgZnVuY3Rpb24gdXNlR2V0UG9zdElEc1N1c3BlbnNlUXVlcnkoYmFzZU9wdGlvbnM/OiBBcG9sbG8uU3VzcGVuc2VRdWVyeUhvb2tPcHRpb25zPEdldFBvc3RJRHNRdWVyeSwgR2V0UG9zdElEc1F1ZXJ5VmFyaWFibGVzPikge1xuICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7Li4uZGVmYXVsdE9wdGlvbnMsIC4uLmJhc2VPcHRpb25zfVxuICAgICAgICAgIHJldHVybiBBcG9sbG8udXNlU3VzcGVuc2VRdWVyeTxHZXRQb3N0SURzUXVlcnksIEdldFBvc3RJRHNRdWVyeVZhcmlhYmxlcz4oR2V0UG9zdElEc0RvY3VtZW50LCBvcHRpb25zKTtcbiAgICAgICAgfVxuZXhwb3J0IHR5cGUgR2V0UG9zdElEc1F1ZXJ5SG9va1Jlc3VsdCA9IFJldHVyblR5cGU8dHlwZW9mIHVzZUdldFBvc3RJRHNRdWVyeT47XG5leHBvcnQgdHlwZSBHZXRQb3N0SURzTGF6eVF1ZXJ5SG9va1Jlc3VsdCA9IFJldHVyblR5cGU8dHlwZW9mIHVzZUdldFBvc3RJRHNMYXp5UXVlcnk+O1xuZXhwb3J0IHR5cGUgR2V0UG9zdElEc1N1c3BlbnNlUXVlcnlIb29rUmVzdWx0ID0gUmV0dXJuVHlwZTx0eXBlb2YgdXNlR2V0UG9zdElEc1N1c3BlbnNlUXVlcnk+O1xuZXhwb3J0IHR5cGUgR2V0UG9zdElEc1F1ZXJ5UmVzdWx0ID0gQXBvbGxvLlF1ZXJ5UmVzdWx0PEdldFBvc3RJRHNRdWVyeSwgR2V0UG9zdElEc1F1ZXJ5VmFyaWFibGVzPjtcbmV4cG9ydCBjb25zdCBHZXRQb3N0RG9jdW1lbnQgPSAvKiNfX1BVUkVfXyovIGdxbGBcbiAgICBxdWVyeSBnZXRQb3N0KCRpZDogSUQhKSB7XG4gIHBvc3QoaWQ6ICRpZCkge1xuICAgIC4uLlBvc3RGcmFnZW1lbnRcbiAgfVxufVxuICAgICR7UG9zdEZyYWdlbWVudEZyYWdtZW50RG9jfWA7XG5cbi8qKlxuICogX191c2VHZXRQb3N0UXVlcnlfX1xuICpcbiAqIFRvIHJ1biBhIHF1ZXJ5IHdpdGhpbiBhIFJlYWN0IGNvbXBvbmVudCwgY2FsbCBgdXNlR2V0UG9zdFF1ZXJ5YCBhbmQgcGFzcyBpdCBhbnkgb3B0aW9ucyB0aGF0IGZpdCB5b3VyIG5lZWRzLlxuICogV2hlbiB5b3VyIGNvbXBvbmVudCByZW5kZXJzLCBgdXNlR2V0UG9zdFF1ZXJ5YCByZXR1cm5zIGFuIG9iamVjdCBmcm9tIEFwb2xsbyBDbGllbnQgdGhhdCBjb250YWlucyBsb2FkaW5nLCBlcnJvciwgYW5kIGRhdGEgcHJvcGVydGllc1xuICogeW91IGNhbiB1c2UgdG8gcmVuZGVyIHlvdXIgVUkuXG4gKlxuICogQHBhcmFtIGJhc2VPcHRpb25zIG9wdGlvbnMgdGhhdCB3aWxsIGJlIHBhc3NlZCBpbnRvIHRoZSBxdWVyeSwgc3VwcG9ydGVkIG9wdGlvbnMgYXJlIGxpc3RlZCBvbjogaHR0cHM6Ly93d3cuYXBvbGxvZ3JhcGhxbC5jb20vZG9jcy9yZWFjdC9hcGkvcmVhY3QtaG9va3MvI29wdGlvbnM7XG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHsgZGF0YSwgbG9hZGluZywgZXJyb3IgfSA9IHVzZUdldFBvc3RRdWVyeSh7XG4gKiAgIHZhcmlhYmxlczoge1xuICogICAgICBpZDogLy8gdmFsdWUgZm9yICdpZCdcbiAqICAgfSxcbiAqIH0pO1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlR2V0UG9zdFF1ZXJ5KGJhc2VPcHRpb25zOiBBcG9sbG8uUXVlcnlIb29rT3B0aW9uczxHZXRQb3N0UXVlcnksIEdldFBvc3RRdWVyeVZhcmlhYmxlcz4pIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHsuLi5kZWZhdWx0T3B0aW9ucywgLi4uYmFzZU9wdGlvbnN9XG4gICAgICAgIHJldHVybiBBcG9sbG8udXNlUXVlcnk8R2V0UG9zdFF1ZXJ5LCBHZXRQb3N0UXVlcnlWYXJpYWJsZXM+KEdldFBvc3REb2N1bWVudCwgb3B0aW9ucyk7XG4gICAgICB9XG5leHBvcnQgZnVuY3Rpb24gdXNlR2V0UG9zdExhenlRdWVyeShiYXNlT3B0aW9ucz86IEFwb2xsby5MYXp5UXVlcnlIb29rT3B0aW9uczxHZXRQb3N0UXVlcnksIEdldFBvc3RRdWVyeVZhcmlhYmxlcz4pIHtcbiAgICAgICAgICBjb25zdCBvcHRpb25zID0gey4uLmRlZmF1bHRPcHRpb25zLCAuLi5iYXNlT3B0aW9uc31cbiAgICAgICAgICByZXR1cm4gQXBvbGxvLnVzZUxhenlRdWVyeTxHZXRQb3N0UXVlcnksIEdldFBvc3RRdWVyeVZhcmlhYmxlcz4oR2V0UG9zdERvY3VtZW50LCBvcHRpb25zKTtcbiAgICAgICAgfVxuZXhwb3J0IGZ1bmN0aW9uIHVzZUdldFBvc3RTdXNwZW5zZVF1ZXJ5KGJhc2VPcHRpb25zPzogQXBvbGxvLlN1c3BlbnNlUXVlcnlIb29rT3B0aW9uczxHZXRQb3N0UXVlcnksIEdldFBvc3RRdWVyeVZhcmlhYmxlcz4pIHtcbiAgICAgICAgICBjb25zdCBvcHRpb25zID0gey4uLmRlZmF1bHRPcHRpb25zLCAuLi5iYXNlT3B0aW9uc31cbiAgICAgICAgICByZXR1cm4gQXBvbGxvLnVzZVN1c3BlbnNlUXVlcnk8R2V0UG9zdFF1ZXJ5LCBHZXRQb3N0UXVlcnlWYXJpYWJsZXM+KEdldFBvc3REb2N1bWVudCwgb3B0aW9ucyk7XG4gICAgICAgIH1cbmV4cG9ydCB0eXBlIEdldFBvc3RRdWVyeUhvb2tSZXN1bHQgPSBSZXR1cm5UeXBlPHR5cGVvZiB1c2VHZXRQb3N0UXVlcnk+O1xuZXhwb3J0IHR5cGUgR2V0UG9zdExhenlRdWVyeUhvb2tSZXN1bHQgPSBSZXR1cm5UeXBlPHR5cGVvZiB1c2VHZXRQb3N0TGF6eVF1ZXJ5PjtcbmV4cG9ydCB0eXBlIEdldFBvc3RTdXNwZW5zZVF1ZXJ5SG9va1Jlc3VsdCA9IFJldHVyblR5cGU8dHlwZW9mIHVzZUdldFBvc3RTdXNwZW5zZVF1ZXJ5PjtcbmV4cG9ydCB0eXBlIEdldFBvc3RRdWVyeVJlc3VsdCA9IEFwb2xsby5RdWVyeVJlc3VsdDxHZXRQb3N0UXVlcnksIEdldFBvc3RRdWVyeVZhcmlhYmxlcz47Il0sIm5hbWVzIjpbImdxbCIsIkFwb2xsbyIsImRlZmF1bHRPcHRpb25zIiwiQXZhdGFyUmF0aW5nRW51bSIsIkciLCJQZyIsIlIiLCJYIiwiQ2F0ZWdvcnlJZFR5cGUiLCJEYXRhYmFzZUlkIiwiSWQiLCJOYW1lIiwiU2x1ZyIsIlVyaSIsIkNvbW1lbnROb2RlSWRUeXBlRW51bSIsIkNvbW1lbnRTdGF0dXNFbnVtIiwiQXBwcm92ZSIsIkhvbGQiLCJTcGFtIiwiVHJhc2giLCJDb21tZW50c0Nvbm5lY3Rpb25PcmRlcmJ5RW51bSIsIkNvbW1lbnRBZ2VudCIsIkNvbW1lbnRBcHByb3ZlZCIsIkNvbW1lbnRBdXRob3IiLCJDb21tZW50QXV0aG9yRW1haWwiLCJDb21tZW50QXV0aG9ySXAiLCJDb21tZW50QXV0aG9yVXJsIiwiQ29tbWVudENvbnRlbnQiLCJDb21tZW50RGF0ZSIsIkNvbW1lbnREYXRlR210IiwiQ29tbWVudElkIiwiQ29tbWVudEluIiwiQ29tbWVudEthcm1hIiwiQ29tbWVudFBhcmVudCIsIkNvbW1lbnRQb3N0SWQiLCJDb21tZW50VHlwZSIsIlVzZXJJZCIsIkNvbnRlbnROb2RlSWRUeXBlRW51bSIsIkNvbnRlbnRUeXBlRW51bSIsIkF0dGFjaG1lbnQiLCJQYWdlIiwiUG9zdCIsIkNvbnRlbnRUeXBlSWRUeXBlRW51bSIsIkNvbnRlbnRUeXBlc09mQ2F0ZWdvcnlFbnVtIiwiQ29udGVudFR5cGVzT2ZQb3N0Rm9ybWF0RW51bSIsIkNvbnRlbnRUeXBlc09mVGFnRW51bSIsIk1lZGlhSXRlbUlkVHlwZSIsIlNvdXJjZVVybCIsIk1lZGlhSXRlbVNpemVFbnVtIiwiQWxtVGh1bWJuYWlsIiwiQXV0aG9yc2hpcEJveEF2YXRhciIsIkF1dGhvcnNoaXBCb3hSZWxhdGVkIiwiQXV0aG9yc2hpcFBvc3RDYXJkcyIsIkF1dGhvcnNoaXBQb3N0RmxhdCIsIkF1dGhvcnNoaXBQb3N0VGh1bWJzIiwiQmxvZ1RodW1ibmFpbCIsIkxhcmdlIiwiTWFpbHBvZXROZXdzbGV0dGVyTWF4IiwiTWVkaXVtIiwiTWVkaXVtTGFyZ2UiLCJUaHVtYm5haWwiLCJNZWRpYUl0ZW1TdGF0dXNFbnVtIiwiQXV0b0RyYWZ0IiwiSW5oZXJpdCIsIlByaXZhdGUiLCJNZW51SXRlbU5vZGVJZFR5cGVFbnVtIiwiTWVudUxvY2F0aW9uRW51bSIsIkZvb3Rlck5hdmkiLCJMYW5nTmF2aSIsIlByaW1hcnlOYXZpIiwiTWVudU5vZGVJZFR5cGVFbnVtIiwiTG9jYXRpb24iLCJNaW1lVHlwZUVudW0iLCJBcHBsaWNhdGlvbkphdmEiLCJBcHBsaWNhdGlvbk1zd29yZCIsIkFwcGxpY2F0aW9uT2N0ZXRTdHJlYW0iLCJBcHBsaWNhdGlvbk9uZW5vdGUiLCJBcHBsaWNhdGlvbk94cHMiLCJBcHBsaWNhdGlvblBkZiIsIkFwcGxpY2F0aW9uUmFyIiwiQXBwbGljYXRpb25SdGYiLCJBcHBsaWNhdGlvblR0YWZYbWwiLCJBcHBsaWNhdGlvblZuZEFwcGxlS2V5bm90ZSIsIkFwcGxpY2F0aW9uVm5kQXBwbGVOdW1iZXJzIiwiQXBwbGljYXRpb25WbmRBcHBsZVBhZ2VzIiwiQXBwbGljYXRpb25WbmRNc0FjY2VzcyIsIkFwcGxpY2F0aW9uVm5kTXNFeGNlbCIsIkFwcGxpY2F0aW9uVm5kTXNFeGNlbEFkZGluTWFjcm9lbmFibGVkXzEyIiwiQXBwbGljYXRpb25WbmRNc0V4Y2VsU2hlZXRCaW5hcnlNYWNyb2VuYWJsZWRfMTIiLCJBcHBsaWNhdGlvblZuZE1zRXhjZWxTaGVldE1hY3JvZW5hYmxlZF8xMiIsIkFwcGxpY2F0aW9uVm5kTXNFeGNlbFRlbXBsYXRlTWFjcm9lbmFibGVkXzEyIiwiQXBwbGljYXRpb25WbmRNc1Bvd2VycG9pbnQiLCJBcHBsaWNhdGlvblZuZE1zUG93ZXJwb2ludEFkZGluTWFjcm9lbmFibGVkXzEyIiwiQXBwbGljYXRpb25WbmRNc1Bvd2VycG9pbnRQcmVzZW50YXRpb25NYWNyb2VuYWJsZWRfMTIiLCJBcHBsaWNhdGlvblZuZE1zUG93ZXJwb2ludFNsaWRlc2hvd01hY3JvZW5hYmxlZF8xMiIsIkFwcGxpY2F0aW9uVm5kTXNQb3dlcnBvaW50U2xpZGVNYWNyb2VuYWJsZWRfMTIiLCJBcHBsaWNhdGlvblZuZE1zUG93ZXJwb2ludFRlbXBsYXRlTWFjcm9lbmFibGVkXzEyIiwiQXBwbGljYXRpb25WbmRNc1Byb2plY3QiLCJBcHBsaWNhdGlvblZuZE1zV29yZERvY3VtZW50TWFjcm9lbmFibGVkXzEyIiwiQXBwbGljYXRpb25WbmRNc1dvcmRUZW1wbGF0ZU1hY3JvZW5hYmxlZF8xMiIsIkFwcGxpY2F0aW9uVm5kTXNXcml0ZSIsIkFwcGxpY2F0aW9uVm5kTXNYcHNkb2N1bWVudCIsIkFwcGxpY2F0aW9uVm5kT2FzaXNPcGVuZG9jdW1lbnRDaGFydCIsIkFwcGxpY2F0aW9uVm5kT2FzaXNPcGVuZG9jdW1lbnREYXRhYmFzZSIsIkFwcGxpY2F0aW9uVm5kT2FzaXNPcGVuZG9jdW1lbnRGb3JtdWxhIiwiQXBwbGljYXRpb25WbmRPYXNpc09wZW5kb2N1bWVudEdyYXBoaWNzIiwiQXBwbGljYXRpb25WbmRPYXNpc09wZW5kb2N1bWVudFByZXNlbnRhdGlvbiIsIkFwcGxpY2F0aW9uVm5kT2FzaXNPcGVuZG9jdW1lbnRTcHJlYWRzaGVldCIsIkFwcGxpY2F0aW9uVm5kT2FzaXNPcGVuZG9jdW1lbnRUZXh0IiwiQXBwbGljYXRpb25WbmRPcGVueG1sZm9ybWF0c09mZmljZWRvY3VtZW50UHJlc2VudGF0aW9ubWxQcmVzZW50YXRpb24iLCJBcHBsaWNhdGlvblZuZE9wZW54bWxmb3JtYXRzT2ZmaWNlZG9jdW1lbnRQcmVzZW50YXRpb25tbFNsaWRlIiwiQXBwbGljYXRpb25WbmRPcGVueG1sZm9ybWF0c09mZmljZWRvY3VtZW50UHJlc2VudGF0aW9ubWxTbGlkZXNob3ciLCJBcHBsaWNhdGlvblZuZE9wZW54bWxmb3JtYXRzT2ZmaWNlZG9jdW1lbnRQcmVzZW50YXRpb25tbFRlbXBsYXRlIiwiQXBwbGljYXRpb25WbmRPcGVueG1sZm9ybWF0c09mZmljZWRvY3VtZW50U3ByZWFkc2hlZXRtbFNoZWV0IiwiQXBwbGljYXRpb25WbmRPcGVueG1sZm9ybWF0c09mZmljZWRvY3VtZW50U3ByZWFkc2hlZXRtbFRlbXBsYXRlIiwiQXBwbGljYXRpb25WbmRPcGVueG1sZm9ybWF0c09mZmljZWRvY3VtZW50V29yZHByb2Nlc3NpbmdtbERvY3VtZW50IiwiQXBwbGljYXRpb25WbmRPcGVueG1sZm9ybWF0c09mZmljZWRvY3VtZW50V29yZHByb2Nlc3NpbmdtbFRlbXBsYXRlIiwiQXBwbGljYXRpb25Xb3JkcGVyZmVjdCIsIkFwcGxpY2F0aW9uWF83WkNvbXByZXNzZWQiLCJBcHBsaWNhdGlvblhGb250VHRmIiwiQXBwbGljYXRpb25YRm9udFdvZmYiLCJBcHBsaWNhdGlvblhGb250V29mZjIiLCJBcHBsaWNhdGlvblhHemlwIiwiQXBwbGljYXRpb25YVGFyIiwiQXBwbGljYXRpb25aaXAiLCJBdWRpb0FhYyIsIkF1ZGlvRmxhYyIsIkF1ZGlvTWlkaSIsIkF1ZGlvTXBlZyIsIkF1ZGlvT2dnIiwiQXVkaW9XYXYiLCJBdWRpb1hNYXRyb3NrYSIsIkF1ZGlvWE1zV2F4IiwiQXVkaW9YTXNXbWEiLCJBdWRpb1hSZWFsYXVkaW8iLCJGb250T3RmIiwiSW1hZ2VCbXAiLCJJbWFnZUdpZiIsIkltYWdlSGVpYyIsIkltYWdlSnBlZyIsIkltYWdlUG5nIiwiSW1hZ2VUaWZmIiwiSW1hZ2VXZWJwIiwiSW1hZ2VYSWNvbiIsIlRleHRDYWxlbmRhciIsIlRleHRDc3MiLCJUZXh0Q3N2IiwiVGV4dFBsYWluIiwiVGV4dFJpY2h0ZXh0IiwiVGV4dFRhYlNlcGFyYXRlZFZhbHVlcyIsIlRleHRWdHQiLCJWaWRlb18zR3BwIiwiVmlkZW9fM0dwcDIiLCJWaWRlb0F2aSIsIlZpZGVvRGl2eCIsIlZpZGVvTXA0IiwiVmlkZW9NcGVnIiwiVmlkZW9PZ2ciLCJWaWRlb1F1aWNrdGltZSIsIlZpZGVvV2VibSIsIlZpZGVvWEZsdiIsIlZpZGVvWE1hdHJvc2thIiwiVmlkZW9YTXNBc2YiLCJWaWRlb1hNc1dtIiwiVmlkZW9YTXNXbXYiLCJWaWRlb1hNc1dteCIsIk9yZGVyRW51bSIsIkFzYyIsIkRlc2MiLCJQYWdlSWRUeXBlIiwiUGx1Z2luU3RhdHVzRW51bSIsIkFjdGl2ZSIsIkRyb3BJbiIsIkluYWN0aXZlIiwiTXVzdFVzZSIsIlBhdXNlZCIsIlJlY2VudGx5QWN0aXZlIiwiVXBncmFkZSIsIlBvc3RGb3JtYXRJZFR5cGUiLCJQb3N0SWRUeXBlIiwiUG9zdE9iamVjdEZpZWxkRm9ybWF0RW51bSIsIlJhdyIsIlJlbmRlcmVkIiwiUG9zdE9iamVjdHNDb25uZWN0aW9uRGF0ZUNvbHVtbkVudW0iLCJEYXRlIiwiTW9kaWZpZWQiLCJQb3N0T2JqZWN0c0Nvbm5lY3Rpb25PcmRlcmJ5RW51bSIsIkF1dGhvciIsIkNvbW1lbnRDb3VudCIsIkluIiwiTWVudU9yZGVyIiwiTmFtZUluIiwiUGFyZW50IiwiVGl0bGUiLCJQb3N0U3RhdHVzRW51bSIsIkRyYWZ0IiwiRnV0dXJlIiwiTmVnYXRlZCIsIlBlbmRpbmciLCJQdWJsaXNoIiwiUmVxdWVzdENvbXBsZXRlZCIsIlJlcXVlc3RDb25maXJtZWQiLCJSZXF1ZXN0RmFpbGVkIiwiUmVxdWVzdFBlbmRpbmciLCJXcGNhRXhjZXB0IiwiV3BjYU9yIiwiUmVsYXRpb25FbnVtIiwiQW5kIiwiT3IiLCJTY3JpcHRMb2FkaW5nU3RyYXRlZ3lFbnVtIiwiQXN5bmMiLCJEZWZlciIsIlRhZ0lkVHlwZSIsIlRheG9ub215RW51bSIsIkNhdGVnb3J5IiwiUG9zdGZvcm1hdCIsIlRhZyIsIlRheG9ub215SWRUeXBlRW51bSIsIlRlcm1Ob2RlSWRUeXBlRW51bSIsIlRlcm1PYmplY3RzQ29ubmVjdGlvbk9yZGVyYnlFbnVtIiwiQ291bnQiLCJEZXNjcmlwdGlvbiIsIlRlcm1Hcm91cCIsIlRlcm1JZCIsIlRlcm1PcmRlciIsIlVzZXJOb2RlSWRUeXBlRW51bSIsIkVtYWlsIiwiVXNlcm5hbWUiLCJVc2VyUm9sZUVudW0iLCJBZG1pbmlzdHJhdG9yIiwiQ2FtcGFpZ25NYW5hZ2VyIiwiQ29udHJpYnV0b3IiLCJDdXN0b21lciIsIkRvbm9yIiwiRWRpdG9yIiwiU2VvRWRpdG9yIiwiU2VvTWFuYWdlciIsIlNob3BNYW5hZ2VyIiwiU3Vic2NyaWJlciIsIldlYkRlc2lnbmVyIiwiVXNlcnNDb25uZWN0aW9uT3JkZXJieUVudW0iLCJEaXNwbGF5TmFtZSIsIkxvZ2luIiwiTG9naW5JbiIsIk5pY2VOYW1lIiwiTmljZU5hbWVJbiIsIlJlZ2lzdGVyZWQiLCJVcmwiLCJVc2Vyc0Nvbm5lY3Rpb25TZWFyY2hDb2x1bW5FbnVtIiwiTmljZW5hbWUiLCJQb3N0RnJhZ2VtZW50RnJhZ21lbnREb2MiLCJHZXRQb3N0c0RvY3VtZW50IiwidXNlR2V0UG9zdHNRdWVyeSIsImJhc2VPcHRpb25zIiwib3B0aW9ucyIsInVzZVF1ZXJ5IiwidXNlR2V0UG9zdHNMYXp5UXVlcnkiLCJ1c2VMYXp5UXVlcnkiLCJ1c2VHZXRQb3N0c1N1c3BlbnNlUXVlcnkiLCJ1c2VTdXNwZW5zZVF1ZXJ5IiwiR2V0UG9zdElEc0RvY3VtZW50IiwidXNlR2V0UG9zdElEc1F1ZXJ5IiwidXNlR2V0UG9zdElEc0xhenlRdWVyeSIsInVzZUdldFBvc3RJRHNTdXNwZW5zZVF1ZXJ5IiwiR2V0UG9zdERvY3VtZW50IiwidXNlR2V0UG9zdFF1ZXJ5IiwidXNlR2V0UG9zdExhenlRdWVyeSIsInVzZUdldFBvc3RTdXNwZW5zZVF1ZXJ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-client)/../../generated/graphql.ts\n"));

/***/ })

});