"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-client)/../../generated/graphql.ts":
/*!**********************************!*\
  !*** ../../generated/graphql.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AvatarRatingEnum\": function() { return /* binding */ AvatarRatingEnum; },\n/* harmony export */   \"CategoryIdType\": function() { return /* binding */ CategoryIdType; },\n/* harmony export */   \"CommentNodeIdTypeEnum\": function() { return /* binding */ CommentNodeIdTypeEnum; },\n/* harmony export */   \"CommentStatusEnum\": function() { return /* binding */ CommentStatusEnum; },\n/* harmony export */   \"CommentsConnectionOrderbyEnum\": function() { return /* binding */ CommentsConnectionOrderbyEnum; },\n/* harmony export */   \"ContentNodeIdTypeEnum\": function() { return /* binding */ ContentNodeIdTypeEnum; },\n/* harmony export */   \"ContentTypeEnum\": function() { return /* binding */ ContentTypeEnum; },\n/* harmony export */   \"ContentTypeIdTypeEnum\": function() { return /* binding */ ContentTypeIdTypeEnum; },\n/* harmony export */   \"ContentTypesOfCategoryEnum\": function() { return /* binding */ ContentTypesOfCategoryEnum; },\n/* harmony export */   \"ContentTypesOfPostFormatEnum\": function() { return /* binding */ ContentTypesOfPostFormatEnum; },\n/* harmony export */   \"ContentTypesOfTagEnum\": function() { return /* binding */ ContentTypesOfTagEnum; },\n/* harmony export */   \"GetPostsDocument\": function() { return /* binding */ GetPostsDocument; },\n/* harmony export */   \"MediaItemIdType\": function() { return /* binding */ MediaItemIdType; },\n/* harmony export */   \"MediaItemSizeEnum\": function() { return /* binding */ MediaItemSizeEnum; },\n/* harmony export */   \"MediaItemStatusEnum\": function() { return /* binding */ MediaItemStatusEnum; },\n/* harmony export */   \"MenuItemNodeIdTypeEnum\": function() { return /* binding */ MenuItemNodeIdTypeEnum; },\n/* harmony export */   \"MenuLocationEnum\": function() { return /* binding */ MenuLocationEnum; },\n/* harmony export */   \"MenuNodeIdTypeEnum\": function() { return /* binding */ MenuNodeIdTypeEnum; },\n/* harmony export */   \"MimeTypeEnum\": function() { return /* binding */ MimeTypeEnum; },\n/* harmony export */   \"OrderEnum\": function() { return /* binding */ OrderEnum; },\n/* harmony export */   \"PageIdType\": function() { return /* binding */ PageIdType; },\n/* harmony export */   \"PluginStatusEnum\": function() { return /* binding */ PluginStatusEnum; },\n/* harmony export */   \"PostFormatIdType\": function() { return /* binding */ PostFormatIdType; },\n/* harmony export */   \"PostFragementFragmentDoc\": function() { return /* binding */ PostFragementFragmentDoc; },\n/* harmony export */   \"PostIdType\": function() { return /* binding */ PostIdType; },\n/* harmony export */   \"PostObjectFieldFormatEnum\": function() { return /* binding */ PostObjectFieldFormatEnum; },\n/* harmony export */   \"PostObjectsConnectionDateColumnEnum\": function() { return /* binding */ PostObjectsConnectionDateColumnEnum; },\n/* harmony export */   \"PostObjectsConnectionOrderbyEnum\": function() { return /* binding */ PostObjectsConnectionOrderbyEnum; },\n/* harmony export */   \"PostStatusEnum\": function() { return /* binding */ PostStatusEnum; },\n/* harmony export */   \"RelationEnum\": function() { return /* binding */ RelationEnum; },\n/* harmony export */   \"ScriptLoadingStrategyEnum\": function() { return /* binding */ ScriptLoadingStrategyEnum; },\n/* harmony export */   \"TagIdType\": function() { return /* binding */ TagIdType; },\n/* harmony export */   \"TaxonomyEnum\": function() { return /* binding */ TaxonomyEnum; },\n/* harmony export */   \"TaxonomyIdTypeEnum\": function() { return /* binding */ TaxonomyIdTypeEnum; },\n/* harmony export */   \"TermNodeIdTypeEnum\": function() { return /* binding */ TermNodeIdTypeEnum; },\n/* harmony export */   \"TermObjectsConnectionOrderbyEnum\": function() { return /* binding */ TermObjectsConnectionOrderbyEnum; },\n/* harmony export */   \"UserNodeIdTypeEnum\": function() { return /* binding */ UserNodeIdTypeEnum; },\n/* harmony export */   \"UserRoleEnum\": function() { return /* binding */ UserRoleEnum; },\n/* harmony export */   \"UsersConnectionOrderbyEnum\": function() { return /* binding */ UsersConnectionOrderbyEnum; },\n/* harmony export */   \"UsersConnectionSearchColumnEnum\": function() { return /* binding */ UsersConnectionSearchColumnEnum; },\n/* harmony export */   \"useGetPostsLazyQuery\": function() { return /* binding */ useGetPostsLazyQuery; },\n/* harmony export */   \"useGetPostsQuery\": function() { return /* binding */ useGetPostsQuery; },\n/* harmony export */   \"useGetPostsSuspenseQuery\": function() { return /* binding */ useGetPostsSuspenseQuery; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_tagged_template_literal */ \"(app-client)/../../node_modules/next/node_modules/@swc/helpers/esm/_tagged_template_literal.js\");\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client */ \"(app-client)/../../node_modules/graphql-tag/lib/index.js\");\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client */ \"(app-client)/../../node_modules/@apollo/client/react/hooks/useQuery.js\");\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client */ \"(app-client)/../../node_modules/@apollo/client/react/hooks/useLazyQuery.js\");\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client */ \"(app-client)/../../node_modules/@apollo/client/react/hooks/useSuspenseQuery.js\");\n\nfunction _templateObject() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n    fragment PostFragement on Post {\\n  title\\n  author {\\n    node {\\n      name\\n    }\\n  }\\n  id\\n  date\\n}\\n    \"\n    ]);\n    _templateObject = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject1() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n    query getPosts {\\n  posts {\\n    nodes {\\n      ...PostFragement\\n    }\\n  }\\n}\\n    \",\n        \"\"\n    ]);\n    _templateObject1 = function() {\n        return data;\n    };\n    return data;\n}\n\n\nconst defaultOptions = {};\nvar AvatarRatingEnum;\n(function(AvatarRatingEnum) {\n    AvatarRatingEnum[/** Indicates a G level avatar rating level. */ \"G\"] = \"G\";\n    AvatarRatingEnum[/** Indicates a PG level avatar rating level. */ \"Pg\"] = \"PG\";\n    AvatarRatingEnum[/** Indicates an R level avatar rating level. */ \"R\"] = \"R\";\n    AvatarRatingEnum[/** Indicates an X level avatar rating level. */ \"X\"] = \"X\";\n})(AvatarRatingEnum || (AvatarRatingEnum = {}));\nvar CategoryIdType;\n(function(CategoryIdType) {\n    CategoryIdType[/** The Database ID for the node */ \"DatabaseId\"] = \"DATABASE_ID\";\n    CategoryIdType[/** The hashed Global ID */ \"Id\"] = \"ID\";\n    CategoryIdType[/** The name of the node */ \"Name\"] = \"NAME\";\n    CategoryIdType[/** Url friendly name of the node */ \"Slug\"] = \"SLUG\";\n    CategoryIdType[/** The URI for the node */ \"Uri\"] = \"URI\";\n})(CategoryIdType || (CategoryIdType = {}));\nvar CommentNodeIdTypeEnum;\n(function(CommentNodeIdTypeEnum) {\n    CommentNodeIdTypeEnum[/** Identify a resource by the Database ID. */ \"DatabaseId\"] = \"DATABASE_ID\";\n    CommentNodeIdTypeEnum[/** Identify a resource by the (hashed) Global ID. */ \"Id\"] = \"ID\";\n})(CommentNodeIdTypeEnum || (CommentNodeIdTypeEnum = {}));\nvar CommentStatusEnum;\n(function(CommentStatusEnum) {\n    CommentStatusEnum[/** Comments with the Approved status */ \"Approve\"] = \"APPROVE\";\n    CommentStatusEnum[/** Comments with the Unapproved status */ \"Hold\"] = \"HOLD\";\n    CommentStatusEnum[/** Comments with the Spam status */ \"Spam\"] = \"SPAM\";\n    CommentStatusEnum[/** Comments with the Trash status */ \"Trash\"] = \"TRASH\";\n})(CommentStatusEnum || (CommentStatusEnum = {}));\nvar CommentsConnectionOrderbyEnum;\n(function(CommentsConnectionOrderbyEnum) {\n    CommentsConnectionOrderbyEnum[/** Order by browser user agent of the commenter. */ \"CommentAgent\"] = \"COMMENT_AGENT\";\n    CommentsConnectionOrderbyEnum[/** Order by approval status of the comment. */ \"CommentApproved\"] = \"COMMENT_APPROVED\";\n    CommentsConnectionOrderbyEnum[/** Order by name of the comment author. */ \"CommentAuthor\"] = \"COMMENT_AUTHOR\";\n    CommentsConnectionOrderbyEnum[/** Order by e-mail of the comment author. */ \"CommentAuthorEmail\"] = \"COMMENT_AUTHOR_EMAIL\";\n    CommentsConnectionOrderbyEnum[/** Order by IP address of the comment author. */ \"CommentAuthorIp\"] = \"COMMENT_AUTHOR_IP\";\n    CommentsConnectionOrderbyEnum[/** Order by URL address of the comment author. */ \"CommentAuthorUrl\"] = \"COMMENT_AUTHOR_URL\";\n    CommentsConnectionOrderbyEnum[/** Order by the comment contents. */ \"CommentContent\"] = \"COMMENT_CONTENT\";\n    CommentsConnectionOrderbyEnum[/** Order by date/time timestamp of the comment. */ \"CommentDate\"] = \"COMMENT_DATE\";\n    CommentsConnectionOrderbyEnum[/** Order by GMT timezone date/time timestamp of the comment. */ \"CommentDateGmt\"] = \"COMMENT_DATE_GMT\";\n    CommentsConnectionOrderbyEnum[/** Order by the globally unique identifier for the comment object */ \"CommentId\"] = \"COMMENT_ID\";\n    CommentsConnectionOrderbyEnum[/** Order by the array list of comment IDs listed in the where clause. */ \"CommentIn\"] = \"COMMENT_IN\";\n    CommentsConnectionOrderbyEnum[/** Order by the comment karma score. */ \"CommentKarma\"] = \"COMMENT_KARMA\";\n    CommentsConnectionOrderbyEnum[/** Order by the comment parent ID. */ \"CommentParent\"] = \"COMMENT_PARENT\";\n    CommentsConnectionOrderbyEnum[/** Order by the post object ID. */ \"CommentPostId\"] = \"COMMENT_POST_ID\";\n    CommentsConnectionOrderbyEnum[/** Order by the the type of comment, such as 'comment', 'pingback', or 'trackback'. */ \"CommentType\"] = \"COMMENT_TYPE\";\n    CommentsConnectionOrderbyEnum[/** Order by the user ID. */ \"UserId\"] = \"USER_ID\";\n})(CommentsConnectionOrderbyEnum || (CommentsConnectionOrderbyEnum = {}));\nvar ContentNodeIdTypeEnum;\n(function(ContentNodeIdTypeEnum) {\n    ContentNodeIdTypeEnum[/** Identify a resource by the Database ID. */ \"DatabaseId\"] = \"DATABASE_ID\";\n    ContentNodeIdTypeEnum[/** Identify a resource by the (hashed) Global ID. */ \"Id\"] = \"ID\";\n    ContentNodeIdTypeEnum[/** Identify a resource by the URI. */ \"Uri\"] = \"URI\";\n})(ContentNodeIdTypeEnum || (ContentNodeIdTypeEnum = {}));\nvar ContentTypeEnum;\n(function(ContentTypeEnum) {\n    ContentTypeEnum[/** The Type of Content object */ \"Attachment\"] = \"ATTACHMENT\";\n    ContentTypeEnum[/** The Type of Content object */ \"Page\"] = \"PAGE\";\n    ContentTypeEnum[/** The Type of Content object */ \"Post\"] = \"POST\";\n})(ContentTypeEnum || (ContentTypeEnum = {}));\nvar ContentTypeIdTypeEnum;\n(function(ContentTypeIdTypeEnum) {\n    ContentTypeIdTypeEnum[/** The globally unique ID */ \"Id\"] = \"ID\";\n    ContentTypeIdTypeEnum[/** The name of the content type. */ \"Name\"] = \"NAME\";\n})(ContentTypeIdTypeEnum || (ContentTypeIdTypeEnum = {}));\nvar ContentTypesOfCategoryEnum;\n(function(ContentTypesOfCategoryEnum) {\n    ContentTypesOfCategoryEnum[/** The Type of Content object */ \"Post\"] = \"POST\";\n})(ContentTypesOfCategoryEnum || (ContentTypesOfCategoryEnum = {}));\nvar ContentTypesOfPostFormatEnum;\n(function(ContentTypesOfPostFormatEnum) {\n    ContentTypesOfPostFormatEnum[/** The Type of Content object */ \"Post\"] = \"POST\";\n})(ContentTypesOfPostFormatEnum || (ContentTypesOfPostFormatEnum = {}));\nvar ContentTypesOfTagEnum;\n(function(ContentTypesOfTagEnum) {\n    ContentTypesOfTagEnum[/** The Type of Content object */ \"Post\"] = \"POST\";\n})(ContentTypesOfTagEnum || (ContentTypesOfTagEnum = {}));\nvar MediaItemIdType;\n(function(MediaItemIdType) {\n    MediaItemIdType[/** Identify a resource by the Database ID. */ \"DatabaseId\"] = \"DATABASE_ID\";\n    MediaItemIdType[/** Identify a resource by the (hashed) Global ID. */ \"Id\"] = \"ID\";\n    MediaItemIdType[/** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */ \"Slug\"] = \"SLUG\";\n    MediaItemIdType[/** Identify a media item by its source url */ \"SourceUrl\"] = \"SOURCE_URL\";\n    MediaItemIdType[/** Identify a resource by the URI. */ \"Uri\"] = \"URI\";\n})(MediaItemIdType || (MediaItemIdType = {}));\nvar MediaItemSizeEnum;\n(function(MediaItemSizeEnum) {\n    MediaItemSizeEnum[/** MediaItem with the alm-thumbnail size */ \"AlmThumbnail\"] = \"ALM_THUMBNAIL\";\n    MediaItemSizeEnum[/** MediaItem with the authorship-box-avatar size */ \"AuthorshipBoxAvatar\"] = \"AUTHORSHIP_BOX_AVATAR\";\n    MediaItemSizeEnum[/** MediaItem with the authorship-box-related size */ \"AuthorshipBoxRelated\"] = \"AUTHORSHIP_BOX_RELATED\";\n    MediaItemSizeEnum[/** MediaItem with the authorship-post-cards size */ \"AuthorshipPostCards\"] = \"AUTHORSHIP_POST_CARDS\";\n    MediaItemSizeEnum[/** MediaItem with the authorship-post-flat size */ \"AuthorshipPostFlat\"] = \"AUTHORSHIP_POST_FLAT\";\n    MediaItemSizeEnum[/** MediaItem with the authorship-post-thumbs size */ \"AuthorshipPostThumbs\"] = \"AUTHORSHIP_POST_THUMBS\";\n    MediaItemSizeEnum[/** MediaItem with the blog_thumbnail size */ \"BlogThumbnail\"] = \"BLOG_THUMBNAIL\";\n    MediaItemSizeEnum[/** MediaItem with the large size */ \"Large\"] = \"LARGE\";\n    MediaItemSizeEnum[/** MediaItem with the mailpoet_newsletter_max size */ \"MailpoetNewsletterMax\"] = \"MAILPOET_NEWSLETTER_MAX\";\n    MediaItemSizeEnum[/** MediaItem with the medium size */ \"Medium\"] = \"MEDIUM\";\n    MediaItemSizeEnum[/** MediaItem with the medium_large size */ \"MediumLarge\"] = \"MEDIUM_LARGE\";\n    MediaItemSizeEnum[/** MediaItem with the thumbnail size */ \"Thumbnail\"] = \"THUMBNAIL\";\n    MediaItemSizeEnum[/** MediaItem with the 1536x1536 size */ \"1536X1536\"] = \"_1536X1536\";\n    MediaItemSizeEnum[/** MediaItem with the 2048x2048 size */ \"2048X2048\"] = \"_2048X2048\";\n})(MediaItemSizeEnum || (MediaItemSizeEnum = {}));\nvar MediaItemStatusEnum;\n(function(MediaItemStatusEnum) {\n    MediaItemStatusEnum[/** Objects with the auto-draft status */ \"AutoDraft\"] = \"AUTO_DRAFT\";\n    MediaItemStatusEnum[/** Objects with the inherit status */ \"Inherit\"] = \"INHERIT\";\n    MediaItemStatusEnum[/** Objects with the private status */ \"Private\"] = \"PRIVATE\";\n    MediaItemStatusEnum[/** Objects with the trash status */ \"Trash\"] = \"TRASH\";\n})(MediaItemStatusEnum || (MediaItemStatusEnum = {}));\nvar MenuItemNodeIdTypeEnum;\n(function(MenuItemNodeIdTypeEnum) {\n    MenuItemNodeIdTypeEnum[/** Identify a resource by the Database ID. */ \"DatabaseId\"] = \"DATABASE_ID\";\n    MenuItemNodeIdTypeEnum[/** Identify a resource by the (hashed) Global ID. */ \"Id\"] = \"ID\";\n})(MenuItemNodeIdTypeEnum || (MenuItemNodeIdTypeEnum = {}));\nvar MenuLocationEnum;\n(function(MenuLocationEnum) {\n    MenuLocationEnum[/** Put the menu in the footer_navi location */ \"FooterNavi\"] = \"FOOTER_NAVI\";\n    MenuLocationEnum[/** Put the menu in the lang_navi location */ \"LangNavi\"] = \"LANG_NAVI\";\n    MenuLocationEnum[/** Put the menu in the primary_navi location */ \"PrimaryNavi\"] = \"PRIMARY_NAVI\";\n})(MenuLocationEnum || (MenuLocationEnum = {}));\nvar MenuNodeIdTypeEnum;\n(function(MenuNodeIdTypeEnum) {\n    MenuNodeIdTypeEnum[/** Identify a menu node by the Database ID. */ \"DatabaseId\"] = \"DATABASE_ID\";\n    MenuNodeIdTypeEnum[/** Identify a menu node by the (hashed) Global ID. */ \"Id\"] = \"ID\";\n    MenuNodeIdTypeEnum[/** Identify a menu node by the slug of menu location to which it is assigned */ \"Location\"] = \"LOCATION\";\n    MenuNodeIdTypeEnum[/** Identify a menu node by its name */ \"Name\"] = \"NAME\";\n    MenuNodeIdTypeEnum[/** Identify a menu node by its slug */ \"Slug\"] = \"SLUG\";\n})(MenuNodeIdTypeEnum || (MenuNodeIdTypeEnum = {}));\nvar MimeTypeEnum;\n(function(MimeTypeEnum) {\n    MimeTypeEnum[/** application/java mime type. */ \"ApplicationJava\"] = \"APPLICATION_JAVA\";\n    MimeTypeEnum[/** application/msword mime type. */ \"ApplicationMsword\"] = \"APPLICATION_MSWORD\";\n    MimeTypeEnum[/** application/octet-stream mime type. */ \"ApplicationOctetStream\"] = \"APPLICATION_OCTET_STREAM\";\n    MimeTypeEnum[/** application/onenote mime type. */ \"ApplicationOnenote\"] = \"APPLICATION_ONENOTE\";\n    MimeTypeEnum[/** application/oxps mime type. */ \"ApplicationOxps\"] = \"APPLICATION_OXPS\";\n    MimeTypeEnum[/** application/pdf mime type. */ \"ApplicationPdf\"] = \"APPLICATION_PDF\";\n    MimeTypeEnum[/** application/rar mime type. */ \"ApplicationRar\"] = \"APPLICATION_RAR\";\n    MimeTypeEnum[/** application/rtf mime type. */ \"ApplicationRtf\"] = \"APPLICATION_RTF\";\n    MimeTypeEnum[/** application/ttaf+xml mime type. */ \"ApplicationTtafXml\"] = \"APPLICATION_TTAF_XML\";\n    MimeTypeEnum[/** application/vnd.apple.keynote mime type. */ \"ApplicationVndAppleKeynote\"] = \"APPLICATION_VND_APPLE_KEYNOTE\";\n    MimeTypeEnum[/** application/vnd.apple.numbers mime type. */ \"ApplicationVndAppleNumbers\"] = \"APPLICATION_VND_APPLE_NUMBERS\";\n    MimeTypeEnum[/** application/vnd.apple.pages mime type. */ \"ApplicationVndApplePages\"] = \"APPLICATION_VND_APPLE_PAGES\";\n    MimeTypeEnum[/** application/vnd.ms-access mime type. */ \"ApplicationVndMsAccess\"] = \"APPLICATION_VND_MS_ACCESS\";\n    MimeTypeEnum[/** application/vnd.ms-excel mime type. */ \"ApplicationVndMsExcel\"] = \"APPLICATION_VND_MS_EXCEL\";\n    MimeTypeEnum[/** application/vnd.ms-excel.addin.macroEnabled.12 mime type. */ \"ApplicationVndMsExcelAddinMacroenabled_12\"] = \"APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-excel.sheet.binary.macroEnabled.12 mime type. */ \"ApplicationVndMsExcelSheetBinaryMacroenabled_12\"] = \"APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-excel.sheet.macroEnabled.12 mime type. */ \"ApplicationVndMsExcelSheetMacroenabled_12\"] = \"APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-excel.template.macroEnabled.12 mime type. */ \"ApplicationVndMsExcelTemplateMacroenabled_12\"] = \"APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-powerpoint mime type. */ \"ApplicationVndMsPowerpoint\"] = \"APPLICATION_VND_MS_POWERPOINT\";\n    MimeTypeEnum[/** application/vnd.ms-powerpoint.addin.macroEnabled.12 mime type. */ \"ApplicationVndMsPowerpointAddinMacroenabled_12\"] = \"APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-powerpoint.presentation.macroEnabled.12 mime type. */ \"ApplicationVndMsPowerpointPresentationMacroenabled_12\"] = \"APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-powerpoint.slideshow.macroEnabled.12 mime type. */ \"ApplicationVndMsPowerpointSlideshowMacroenabled_12\"] = \"APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-powerpoint.slide.macroEnabled.12 mime type. */ \"ApplicationVndMsPowerpointSlideMacroenabled_12\"] = \"APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-powerpoint.template.macroEnabled.12 mime type. */ \"ApplicationVndMsPowerpointTemplateMacroenabled_12\"] = \"APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-project mime type. */ \"ApplicationVndMsProject\"] = \"APPLICATION_VND_MS_PROJECT\";\n    MimeTypeEnum[/** application/vnd.ms-word.document.macroEnabled.12 mime type. */ \"ApplicationVndMsWordDocumentMacroenabled_12\"] = \"APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-word.template.macroEnabled.12 mime type. */ \"ApplicationVndMsWordTemplateMacroenabled_12\"] = \"APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12\";\n    MimeTypeEnum[/** application/vnd.ms-write mime type. */ \"ApplicationVndMsWrite\"] = \"APPLICATION_VND_MS_WRITE\";\n    MimeTypeEnum[/** application/vnd.ms-xpsdocument mime type. */ \"ApplicationVndMsXpsdocument\"] = \"APPLICATION_VND_MS_XPSDOCUMENT\";\n    MimeTypeEnum[/** application/vnd.oasis.opendocument.chart mime type. */ \"ApplicationVndOasisOpendocumentChart\"] = \"APPLICATION_VND_OASIS_OPENDOCUMENT_CHART\";\n    MimeTypeEnum[/** application/vnd.oasis.opendocument.database mime type. */ \"ApplicationVndOasisOpendocumentDatabase\"] = \"APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE\";\n    MimeTypeEnum[/** application/vnd.oasis.opendocument.formula mime type. */ \"ApplicationVndOasisOpendocumentFormula\"] = \"APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA\";\n    MimeTypeEnum[/** application/vnd.oasis.opendocument.graphics mime type. */ \"ApplicationVndOasisOpendocumentGraphics\"] = \"APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS\";\n    MimeTypeEnum[/** application/vnd.oasis.opendocument.presentation mime type. */ \"ApplicationVndOasisOpendocumentPresentation\"] = \"APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION\";\n    MimeTypeEnum[/** application/vnd.oasis.opendocument.spreadsheet mime type. */ \"ApplicationVndOasisOpendocumentSpreadsheet\"] = \"APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET\";\n    MimeTypeEnum[/** application/vnd.oasis.opendocument.text mime type. */ \"ApplicationVndOasisOpendocumentText\"] = \"APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT\";\n    MimeTypeEnum[/** application/vnd.openxmlformats-officedocument.presentationml.presentation mime type. */ \"ApplicationVndOpenxmlformatsOfficedocumentPresentationmlPresentation\"] = \"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION\";\n    MimeTypeEnum[/** application/vnd.openxmlformats-officedocument.presentationml.slide mime type. */ \"ApplicationVndOpenxmlformatsOfficedocumentPresentationmlSlide\"] = \"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE\";\n    MimeTypeEnum[/** application/vnd.openxmlformats-officedocument.presentationml.slideshow mime type. */ \"ApplicationVndOpenxmlformatsOfficedocumentPresentationmlSlideshow\"] = \"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW\";\n    MimeTypeEnum[/** application/vnd.openxmlformats-officedocument.presentationml.template mime type. */ \"ApplicationVndOpenxmlformatsOfficedocumentPresentationmlTemplate\"] = \"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE\";\n    MimeTypeEnum[/** application/vnd.openxmlformats-officedocument.spreadsheetml.sheet mime type. */ \"ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet\"] = \"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET\";\n    MimeTypeEnum[/** application/vnd.openxmlformats-officedocument.spreadsheetml.template mime type. */ \"ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlTemplate\"] = \"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE\";\n    MimeTypeEnum[/** application/vnd.openxmlformats-officedocument.wordprocessingml.document mime type. */ \"ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlDocument\"] = \"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT\";\n    MimeTypeEnum[/** application/vnd.openxmlformats-officedocument.wordprocessingml.template mime type. */ \"ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlTemplate\"] = \"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE\";\n    MimeTypeEnum[/** application/wordperfect mime type. */ \"ApplicationWordperfect\"] = \"APPLICATION_WORDPERFECT\";\n    MimeTypeEnum[/** application/x-7z-compressed mime type. */ \"ApplicationX_7ZCompressed\"] = \"APPLICATION_X_7Z_COMPRESSED\";\n    MimeTypeEnum[/** application/x-font-ttf mime type. */ \"ApplicationXFontTtf\"] = \"APPLICATION_X_FONT_TTF\";\n    MimeTypeEnum[/** application/x-font-woff mime type. */ \"ApplicationXFontWoff\"] = \"APPLICATION_X_FONT_WOFF\";\n    MimeTypeEnum[/** application/x-font-woff2 mime type. */ \"ApplicationXFontWoff2\"] = \"APPLICATION_X_FONT_WOFF2\";\n    MimeTypeEnum[/** application/x-gzip mime type. */ \"ApplicationXGzip\"] = \"APPLICATION_X_GZIP\";\n    MimeTypeEnum[/** application/x-tar mime type. */ \"ApplicationXTar\"] = \"APPLICATION_X_TAR\";\n    MimeTypeEnum[/** application/zip mime type. */ \"ApplicationZip\"] = \"APPLICATION_ZIP\";\n    MimeTypeEnum[/** audio/aac mime type. */ \"AudioAac\"] = \"AUDIO_AAC\";\n    MimeTypeEnum[/** audio/flac mime type. */ \"AudioFlac\"] = \"AUDIO_FLAC\";\n    MimeTypeEnum[/** audio/midi mime type. */ \"AudioMidi\"] = \"AUDIO_MIDI\";\n    MimeTypeEnum[/** audio/mpeg mime type. */ \"AudioMpeg\"] = \"AUDIO_MPEG\";\n    MimeTypeEnum[/** audio/ogg mime type. */ \"AudioOgg\"] = \"AUDIO_OGG\";\n    MimeTypeEnum[/** audio/wav mime type. */ \"AudioWav\"] = \"AUDIO_WAV\";\n    MimeTypeEnum[/** audio/x-matroska mime type. */ \"AudioXMatroska\"] = \"AUDIO_X_MATROSKA\";\n    MimeTypeEnum[/** audio/x-ms-wax mime type. */ \"AudioXMsWax\"] = \"AUDIO_X_MS_WAX\";\n    MimeTypeEnum[/** audio/x-ms-wma mime type. */ \"AudioXMsWma\"] = \"AUDIO_X_MS_WMA\";\n    MimeTypeEnum[/** audio/x-realaudio mime type. */ \"AudioXRealaudio\"] = \"AUDIO_X_REALAUDIO\";\n    MimeTypeEnum[/** font/otf mime type. */ \"FontOtf\"] = \"FONT_OTF\";\n    MimeTypeEnum[/** image/bmp mime type. */ \"ImageBmp\"] = \"IMAGE_BMP\";\n    MimeTypeEnum[/** image/gif mime type. */ \"ImageGif\"] = \"IMAGE_GIF\";\n    MimeTypeEnum[/** image/heic mime type. */ \"ImageHeic\"] = \"IMAGE_HEIC\";\n    MimeTypeEnum[/** image/jpeg mime type. */ \"ImageJpeg\"] = \"IMAGE_JPEG\";\n    MimeTypeEnum[/** image/png mime type. */ \"ImagePng\"] = \"IMAGE_PNG\";\n    MimeTypeEnum[/** image/tiff mime type. */ \"ImageTiff\"] = \"IMAGE_TIFF\";\n    MimeTypeEnum[/** image/webp mime type. */ \"ImageWebp\"] = \"IMAGE_WEBP\";\n    MimeTypeEnum[/** image/x-icon mime type. */ \"ImageXIcon\"] = \"IMAGE_X_ICON\";\n    MimeTypeEnum[/** text/calendar mime type. */ \"TextCalendar\"] = \"TEXT_CALENDAR\";\n    MimeTypeEnum[/** text/css mime type. */ \"TextCss\"] = \"TEXT_CSS\";\n    MimeTypeEnum[/** text/csv mime type. */ \"TextCsv\"] = \"TEXT_CSV\";\n    MimeTypeEnum[/** text/plain mime type. */ \"TextPlain\"] = \"TEXT_PLAIN\";\n    MimeTypeEnum[/** text/richtext mime type. */ \"TextRichtext\"] = \"TEXT_RICHTEXT\";\n    MimeTypeEnum[/** text/tab-separated-values mime type. */ \"TextTabSeparatedValues\"] = \"TEXT_TAB_SEPARATED_VALUES\";\n    MimeTypeEnum[/** text/vtt mime type. */ \"TextVtt\"] = \"TEXT_VTT\";\n    MimeTypeEnum[/** video/3gpp mime type. */ \"Video_3Gpp\"] = \"VIDEO_3GPP\";\n    MimeTypeEnum[/** video/3gpp2 mime type. */ \"Video_3Gpp2\"] = \"VIDEO_3GPP2\";\n    MimeTypeEnum[/** video/avi mime type. */ \"VideoAvi\"] = \"VIDEO_AVI\";\n    MimeTypeEnum[/** video/divx mime type. */ \"VideoDivx\"] = \"VIDEO_DIVX\";\n    MimeTypeEnum[/** video/mp4 mime type. */ \"VideoMp4\"] = \"VIDEO_MP4\";\n    MimeTypeEnum[/** video/mpeg mime type. */ \"VideoMpeg\"] = \"VIDEO_MPEG\";\n    MimeTypeEnum[/** video/ogg mime type. */ \"VideoOgg\"] = \"VIDEO_OGG\";\n    MimeTypeEnum[/** video/quicktime mime type. */ \"VideoQuicktime\"] = \"VIDEO_QUICKTIME\";\n    MimeTypeEnum[/** video/webm mime type. */ \"VideoWebm\"] = \"VIDEO_WEBM\";\n    MimeTypeEnum[/** video/x-flv mime type. */ \"VideoXFlv\"] = \"VIDEO_X_FLV\";\n    MimeTypeEnum[/** video/x-matroska mime type. */ \"VideoXMatroska\"] = \"VIDEO_X_MATROSKA\";\n    MimeTypeEnum[/** video/x-ms-asf mime type. */ \"VideoXMsAsf\"] = \"VIDEO_X_MS_ASF\";\n    MimeTypeEnum[/** video/x-ms-wm mime type. */ \"VideoXMsWm\"] = \"VIDEO_X_MS_WM\";\n    MimeTypeEnum[/** video/x-ms-wmv mime type. */ \"VideoXMsWmv\"] = \"VIDEO_X_MS_WMV\";\n    MimeTypeEnum[/** video/x-ms-wmx mime type. */ \"VideoXMsWmx\"] = \"VIDEO_X_MS_WMX\";\n})(MimeTypeEnum || (MimeTypeEnum = {}));\nvar OrderEnum;\n(function(OrderEnum) {\n    OrderEnum[/** Sort the query result set in an ascending order */ \"Asc\"] = \"ASC\";\n    OrderEnum[/** Sort the query result set in a descending order */ \"Desc\"] = \"DESC\";\n})(OrderEnum || (OrderEnum = {}));\nvar PageIdType;\n(function(PageIdType) {\n    PageIdType[/** Identify a resource by the Database ID. */ \"DatabaseId\"] = \"DATABASE_ID\";\n    PageIdType[/** Identify a resource by the (hashed) Global ID. */ \"Id\"] = \"ID\";\n    PageIdType[/** Identify a resource by the URI. */ \"Uri\"] = \"URI\";\n})(PageIdType || (PageIdType = {}));\nvar PluginStatusEnum;\n(function(PluginStatusEnum) {\n    PluginStatusEnum[/** The plugin is currently active. */ \"Active\"] = \"ACTIVE\";\n    PluginStatusEnum[/** The plugin is a drop-in plugin. */ \"DropIn\"] = \"DROP_IN\";\n    PluginStatusEnum[/** The plugin is currently inactive. */ \"Inactive\"] = \"INACTIVE\";\n    PluginStatusEnum[/** The plugin is a must-use plugin. */ \"MustUse\"] = \"MUST_USE\";\n    PluginStatusEnum[/** The plugin is technically active but was paused while loading. */ \"Paused\"] = \"PAUSED\";\n    PluginStatusEnum[/** The plugin was active recently. */ \"RecentlyActive\"] = \"RECENTLY_ACTIVE\";\n    PluginStatusEnum[/** The plugin has an upgrade available. */ \"Upgrade\"] = \"UPGRADE\";\n})(PluginStatusEnum || (PluginStatusEnum = {}));\nvar PostFormatIdType;\n(function(PostFormatIdType) {\n    PostFormatIdType[/** The Database ID for the node */ \"DatabaseId\"] = \"DATABASE_ID\";\n    PostFormatIdType[/** The hashed Global ID */ \"Id\"] = \"ID\";\n    PostFormatIdType[/** The name of the node */ \"Name\"] = \"NAME\";\n    PostFormatIdType[/** Url friendly name of the node */ \"Slug\"] = \"SLUG\";\n    PostFormatIdType[/** The URI for the node */ \"Uri\"] = \"URI\";\n})(PostFormatIdType || (PostFormatIdType = {}));\nvar PostIdType;\n(function(PostIdType) {\n    PostIdType[/** Identify a resource by the Database ID. */ \"DatabaseId\"] = \"DATABASE_ID\";\n    PostIdType[/** Identify a resource by the (hashed) Global ID. */ \"Id\"] = \"ID\";\n    PostIdType[/** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */ \"Slug\"] = \"SLUG\";\n    PostIdType[/** Identify a resource by the URI. */ \"Uri\"] = \"URI\";\n})(PostIdType || (PostIdType = {}));\nvar PostObjectFieldFormatEnum;\n(function(PostObjectFieldFormatEnum) {\n    PostObjectFieldFormatEnum[/** Provide the field value directly from database. Null on unauthenticated requests. */ \"Raw\"] = \"RAW\";\n    PostObjectFieldFormatEnum[/** Provide the field value as rendered by WordPress. Default. */ \"Rendered\"] = \"RENDERED\";\n})(PostObjectFieldFormatEnum || (PostObjectFieldFormatEnum = {}));\nvar PostObjectsConnectionDateColumnEnum;\n(function(PostObjectsConnectionDateColumnEnum) {\n    PostObjectsConnectionDateColumnEnum[/** The date the comment was created in local time. */ \"Date\"] = \"DATE\";\n    PostObjectsConnectionDateColumnEnum[/** The most recent modification date of the comment. */ \"Modified\"] = \"MODIFIED\";\n})(PostObjectsConnectionDateColumnEnum || (PostObjectsConnectionDateColumnEnum = {}));\nvar PostObjectsConnectionOrderbyEnum;\n(function(PostObjectsConnectionOrderbyEnum) {\n    PostObjectsConnectionOrderbyEnum[/** Order by author */ \"Author\"] = \"AUTHOR\";\n    PostObjectsConnectionOrderbyEnum[/** Order by the number of comments it has acquired */ \"CommentCount\"] = \"COMMENT_COUNT\";\n    PostObjectsConnectionOrderbyEnum[/** Order by publish date */ \"Date\"] = \"DATE\";\n    PostObjectsConnectionOrderbyEnum[/** Preserve the ID order given in the IN array */ \"In\"] = \"IN\";\n    PostObjectsConnectionOrderbyEnum[/** Order by the menu order value */ \"MenuOrder\"] = \"MENU_ORDER\";\n    PostObjectsConnectionOrderbyEnum[/** Order by last modified date */ \"Modified\"] = \"MODIFIED\";\n    PostObjectsConnectionOrderbyEnum[/** Preserve slug order given in the NAME_IN array */ \"NameIn\"] = \"NAME_IN\";\n    PostObjectsConnectionOrderbyEnum[/** Order by parent ID */ \"Parent\"] = \"PARENT\";\n    PostObjectsConnectionOrderbyEnum[/** Order by slug */ \"Slug\"] = \"SLUG\";\n    PostObjectsConnectionOrderbyEnum[/** Order by title */ \"Title\"] = \"TITLE\";\n})(PostObjectsConnectionOrderbyEnum || (PostObjectsConnectionOrderbyEnum = {}));\nvar PostStatusEnum;\n(function(PostStatusEnum) {\n    PostStatusEnum[/** Objects with the auto-draft status */ \"AutoDraft\"] = \"AUTO_DRAFT\";\n    PostStatusEnum[/** Objects with the draft status */ \"Draft\"] = \"DRAFT\";\n    PostStatusEnum[/** Objects with the future status */ \"Future\"] = \"FUTURE\";\n    PostStatusEnum[/** Objects with the inherit status */ \"Inherit\"] = \"INHERIT\";\n    PostStatusEnum[/** Objects with the negated status */ \"Negated\"] = \"NEGATED\";\n    PostStatusEnum[/** Objects with the pending status */ \"Pending\"] = \"PENDING\";\n    PostStatusEnum[/** Objects with the private status */ \"Private\"] = \"PRIVATE\";\n    PostStatusEnum[/** Objects with the publish status */ \"Publish\"] = \"PUBLISH\";\n    PostStatusEnum[/** Objects with the request-completed status */ \"RequestCompleted\"] = \"REQUEST_COMPLETED\";\n    PostStatusEnum[/** Objects with the request-confirmed status */ \"RequestConfirmed\"] = \"REQUEST_CONFIRMED\";\n    PostStatusEnum[/** Objects with the request-failed status */ \"RequestFailed\"] = \"REQUEST_FAILED\";\n    PostStatusEnum[/** Objects with the request-pending status */ \"RequestPending\"] = \"REQUEST_PENDING\";\n    PostStatusEnum[/** Objects with the trash status */ \"Trash\"] = \"TRASH\";\n    PostStatusEnum[/** Objects with the wpca_except status */ \"WpcaExcept\"] = \"WPCA_EXCEPT\";\n    PostStatusEnum[/** Objects with the wpca_or status */ \"WpcaOr\"] = \"WPCA_OR\";\n})(PostStatusEnum || (PostStatusEnum = {}));\nvar RelationEnum;\n(function(RelationEnum) {\n    RelationEnum[/** The logical AND condition returns true if both operands are true, otherwise, it returns false. */ \"And\"] = \"AND\";\n    RelationEnum[/** The logical OR condition returns false if both operands are false, otherwise, it returns true. */ \"Or\"] = \"OR\";\n})(RelationEnum || (RelationEnum = {}));\nvar ScriptLoadingStrategyEnum;\n(function(ScriptLoadingStrategyEnum) {\n    ScriptLoadingStrategyEnum[/** Use the script `async` attribute */ \"Async\"] = \"ASYNC\";\n    ScriptLoadingStrategyEnum[/** Use the script `defer` attribute */ \"Defer\"] = \"DEFER\";\n})(ScriptLoadingStrategyEnum || (ScriptLoadingStrategyEnum = {}));\nvar TagIdType;\n(function(TagIdType) {\n    TagIdType[/** The Database ID for the node */ \"DatabaseId\"] = \"DATABASE_ID\";\n    TagIdType[/** The hashed Global ID */ \"Id\"] = \"ID\";\n    TagIdType[/** The name of the node */ \"Name\"] = \"NAME\";\n    TagIdType[/** Url friendly name of the node */ \"Slug\"] = \"SLUG\";\n    TagIdType[/** The URI for the node */ \"Uri\"] = \"URI\";\n})(TagIdType || (TagIdType = {}));\nvar TaxonomyEnum;\n(function(TaxonomyEnum) {\n    TaxonomyEnum[/** Taxonomy enum category */ \"Category\"] = \"CATEGORY\";\n    TaxonomyEnum[/** Taxonomy enum post_format */ \"Postformat\"] = \"POSTFORMAT\";\n    TaxonomyEnum[/** Taxonomy enum post_tag */ \"Tag\"] = \"TAG\";\n})(TaxonomyEnum || (TaxonomyEnum = {}));\nvar TaxonomyIdTypeEnum;\n(function(TaxonomyIdTypeEnum) {\n    TaxonomyIdTypeEnum[/** The globally unique ID */ \"Id\"] = \"ID\";\n    TaxonomyIdTypeEnum[/** The name of the taxonomy */ \"Name\"] = \"NAME\";\n})(TaxonomyIdTypeEnum || (TaxonomyIdTypeEnum = {}));\nvar TermNodeIdTypeEnum;\n(function(TermNodeIdTypeEnum) {\n    TermNodeIdTypeEnum[/** The Database ID for the node */ \"DatabaseId\"] = \"DATABASE_ID\";\n    TermNodeIdTypeEnum[/** The hashed Global ID */ \"Id\"] = \"ID\";\n    TermNodeIdTypeEnum[/** The name of the node */ \"Name\"] = \"NAME\";\n    TermNodeIdTypeEnum[/** Url friendly name of the node */ \"Slug\"] = \"SLUG\";\n    TermNodeIdTypeEnum[/** The URI for the node */ \"Uri\"] = \"URI\";\n})(TermNodeIdTypeEnum || (TermNodeIdTypeEnum = {}));\nvar TermObjectsConnectionOrderbyEnum;\n(function(TermObjectsConnectionOrderbyEnum) {\n    TermObjectsConnectionOrderbyEnum[/** Order the connection by item count. */ \"Count\"] = \"COUNT\";\n    TermObjectsConnectionOrderbyEnum[/** Order the connection by description. */ \"Description\"] = \"DESCRIPTION\";\n    TermObjectsConnectionOrderbyEnum[/** Order the connection by name. */ \"Name\"] = \"NAME\";\n    TermObjectsConnectionOrderbyEnum[/** Order the connection by slug. */ \"Slug\"] = \"SLUG\";\n    TermObjectsConnectionOrderbyEnum[/** Order the connection by term group. */ \"TermGroup\"] = \"TERM_GROUP\";\n    TermObjectsConnectionOrderbyEnum[/** Order the connection by term id. */ \"TermId\"] = \"TERM_ID\";\n    TermObjectsConnectionOrderbyEnum[/** Order the connection by term order. */ \"TermOrder\"] = \"TERM_ORDER\";\n})(TermObjectsConnectionOrderbyEnum || (TermObjectsConnectionOrderbyEnum = {}));\nvar UserNodeIdTypeEnum;\n(function(UserNodeIdTypeEnum) {\n    UserNodeIdTypeEnum[/** The Database ID for the node */ \"DatabaseId\"] = \"DATABASE_ID\";\n    UserNodeIdTypeEnum[/** The Email of the User */ \"Email\"] = \"EMAIL\";\n    UserNodeIdTypeEnum[/** The hashed Global ID */ \"Id\"] = \"ID\";\n    UserNodeIdTypeEnum[/** The slug of the User */ \"Slug\"] = \"SLUG\";\n    UserNodeIdTypeEnum[/** The URI for the node */ \"Uri\"] = \"URI\";\n    UserNodeIdTypeEnum[/** The username the User uses to login with */ \"Username\"] = \"USERNAME\";\n})(UserNodeIdTypeEnum || (UserNodeIdTypeEnum = {}));\nvar UserRoleEnum;\n(function(UserRoleEnum) {\n    UserRoleEnum[/** User role with specific capabilities */ \"Administrator\"] = \"ADMINISTRATOR\";\n    UserRoleEnum[/** User role with specific capabilities */ \"Author\"] = \"AUTHOR\";\n    UserRoleEnum[/** User role with specific capabilities */ \"CampaignManager\"] = \"CAMPAIGN_MANAGER\";\n    UserRoleEnum[/** User role with specific capabilities */ \"Contributor\"] = \"CONTRIBUTOR\";\n    UserRoleEnum[/** User role with specific capabilities */ \"Customer\"] = \"CUSTOMER\";\n    UserRoleEnum[/** User role with specific capabilities */ \"Donor\"] = \"DONOR\";\n    UserRoleEnum[/** User role with specific capabilities */ \"Editor\"] = \"EDITOR\";\n    UserRoleEnum[/** User role with specific capabilities */ \"SeoEditor\"] = \"SEO_EDITOR\";\n    UserRoleEnum[/** User role with specific capabilities */ \"SeoManager\"] = \"SEO_MANAGER\";\n    UserRoleEnum[/** User role with specific capabilities */ \"ShopManager\"] = \"SHOP_MANAGER\";\n    UserRoleEnum[/** User role with specific capabilities */ \"Subscriber\"] = \"SUBSCRIBER\";\n    UserRoleEnum[/** User role with specific capabilities */ \"WebDesigner\"] = \"WEB_DESIGNER\";\n})(UserRoleEnum || (UserRoleEnum = {}));\nvar UsersConnectionOrderbyEnum;\n(function(UsersConnectionOrderbyEnum) {\n    UsersConnectionOrderbyEnum[/** Order by display name */ \"DisplayName\"] = \"DISPLAY_NAME\";\n    UsersConnectionOrderbyEnum[/** Order by email address */ \"Email\"] = \"EMAIL\";\n    UsersConnectionOrderbyEnum[/** Order by login */ \"Login\"] = \"LOGIN\";\n    UsersConnectionOrderbyEnum[/** Preserve the login order given in the LOGIN_IN array */ \"LoginIn\"] = \"LOGIN_IN\";\n    UsersConnectionOrderbyEnum[/** Order by nice name */ \"NiceName\"] = \"NICE_NAME\";\n    UsersConnectionOrderbyEnum[/** Preserve the nice name order given in the NICE_NAME_IN array */ \"NiceNameIn\"] = \"NICE_NAME_IN\";\n    UsersConnectionOrderbyEnum[/** Order by registration date */ \"Registered\"] = \"REGISTERED\";\n    UsersConnectionOrderbyEnum[/** Order by URL */ \"Url\"] = \"URL\";\n})(UsersConnectionOrderbyEnum || (UsersConnectionOrderbyEnum = {}));\nvar UsersConnectionSearchColumnEnum;\n(function(UsersConnectionSearchColumnEnum) {\n    UsersConnectionSearchColumnEnum[/** The user's email address. */ \"Email\"] = \"EMAIL\";\n    UsersConnectionSearchColumnEnum[/** The globally unique ID. */ \"Id\"] = \"ID\";\n    UsersConnectionSearchColumnEnum[/** The username the User uses to login with. */ \"Login\"] = \"LOGIN\";\n    UsersConnectionSearchColumnEnum[/** A URL-friendly name for the user. The default is the user's username. */ \"Nicename\"] = \"NICENAME\";\n    UsersConnectionSearchColumnEnum[/** The URL of the user's website. */ \"Url\"] = \"URL\";\n})(UsersConnectionSearchColumnEnum || (UsersConnectionSearchColumnEnum = {}));\nconst PostFragementFragmentDoc = (0,_apollo_client__WEBPACK_IMPORTED_MODULE_1__.gql)(_templateObject());\nconst GetPostsDocument = (0,_apollo_client__WEBPACK_IMPORTED_MODULE_1__.gql)(_templateObject1(), PostFragementFragmentDoc);\n/**\n * __useGetPostsQuery__\n *\n * To run a query within a React component, call `useGetPostsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPostsQuery({\n *   variables: {\n *   },\n * });\n */ function useGetPostsQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_2__.useQuery(GetPostsDocument, options);\n}\nfunction useGetPostsLazyQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_3__.useLazyQuery(GetPostsDocument, options);\n}\nfunction useGetPostsSuspenseQuery(baseOptions) {\n    const options = {\n        ...defaultOptions,\n        ...baseOptions\n    };\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_4__.useSuspenseQuery(GetPostsDocument, options);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-client)/../../generated/graphql.ts\n"));

/***/ })

});